{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Pandoc is the awesome open-source command-line tool that converts documents  from one format to another. The project was initiated by John MacFarlane;  under the hood, it's a Haskell library.</p> <p>The Pandoc Python Library brings Pandoc's document model to Python:</p> <pre><code>$ echo \"Hello world!\" | python -m pandoc read \nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre> <p>It can be used to analyze, create and transform documents, in Python :</p> <pre><code>&gt;&gt;&gt; import pandoc\n&gt;&gt;&gt; text = \"Hello world!\"\n&gt;&gt;&gt; doc = pandoc.read(text)\n&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n\n&gt;&gt;&gt; paragraph = doc[1][0]\n&gt;&gt;&gt; paragraph\nPara([Str('Hello'), Space(), Str('world!')])\n&gt;&gt;&gt; from pandoc.types import Str\n&gt;&gt;&gt; paragraph[0][2] = Str('Python!')\n&gt;&gt;&gt; text = pandoc.write(doc)\n&gt;&gt;&gt; print(text) # doctest: +NORMALIZE_WHITESPACE\nHello Python!\n</code></pre> <p>Warning</p> <p>This documentation is dedicated to the latest version of the project available on github.  It is automatically tested with Python 3.12.4 against pandoc 3.2.1. At the moment I am writing this, the latest release of pandoc for conda  is pandoc 3.2.1.</p>"},{"location":"api/","title":"API Reference","text":"<pre><code>import pandoc\nfrom pandoc.types import *\n</code></pre>"},{"location":"api/#pandoc","title":"<code>pandoc</code>","text":"<code>read(source=None, file=None, format=None, options=None)</code> <p>Read a source document.</p> <p>The source document must be specified by either <code>source</code> or <code>file</code>. Implicitly, the document format is inferred from the filename extension when possible1, otherwise the markdown format is assumed by default; the input format can also be specified explicitly. Extra options can be passed to the pandoc command-line tool.</p> <p>Arguments</p> <ul> <li> <p><code>source</code>: the document content, as a string or as utf-8 encoded bytes.</p> </li> <li> <p><code>file</code>: the document, provided as a file or filename.</p> </li> <li> <p><code>format</code>: the document format (such as <code>\"markdown\"</code>, <code>\"odt\"</code>, <code>\"docx\"</code>, <code>\"html\"</code>, etc.)</p> <p>Refer to Pandoc's README for the list of supported input formats.</p> </li> <li> <p><code>options</code>: additional pandoc options (a list of strings).</p> <p>Refer to Pandoc's user guide for a complete list of options.</p> </li> </ul> <p>Returns</p> <ul> <li><code>doc</code>: the document, as a <code>Pandoc</code> object.</li> </ul> <p>Usage</p> <p>Read documents from strings:</p> <pre><code>&gt;&gt;&gt; markdown = \"Hello world!\"\n&gt;&gt;&gt; pandoc.read(markdown)\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n&gt;&gt;&gt; html = \"&lt;p&gt;Hello world!&lt;/p&gt;\"\n&gt;&gt;&gt; pandoc.read(html, format=\"html\")\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre> <p>Read documents from files:</p> <pre><code>&gt;&gt;&gt; filename = \"doc.html\"\n&gt;&gt;&gt; with open(filename, \"w\", encoding=\"utf-8\") as file:\n...     _ = file.write(html)\n&gt;&gt;&gt; pandoc.read(file=filename) # html format inferred from filename\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n&gt;&gt;&gt; file = open(filename, encoding=\"utf-8\")\n&gt;&gt;&gt; pandoc.read(file=file, format=\"html\") # but here it must be explicit\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre> <p>Use extra pandoc options:</p> <pre><code>&gt;&gt;&gt; pandoc.read(markdown, options=[\"-M\", \"id=hello\"]) # add metadata\nPandoc(Meta({'id': MetaString('hello')}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre> <code>write(doc, file=None, format=None, options=None)</code> <p>Write a pandoc document (or document fragment) to a file and return its contents.</p> <p>Inline document fragments are automatically wrapped into a <code>Plain</code>  blocks; block document fragments are automatically wrapped into a <code>Pandoc</code> element with no metadata. </p> <p>Implicitly, the document format is inferred from the filename extension when possible1, otherwise the markdown format is assumed by default; the output format can also be specified explicitly. Extra options can be passed to the pandoc command-line tool.</p> <p>Arguments</p> <ul> <li> <p><code>doc</code>: a <code>Pandoc</code> object or a document fragment      (<code>Inline</code>, <code>[Inline]</code>, <code>MetaInlines</code>,       <code>Block</code>, <code>[Block]</code> or <code>MetaBlocks</code>).</p> </li> <li> <p><code>file</code>: a file, filename or <code>None</code>.</p> </li> <li> <p><code>format</code>: the document format (such as <code>\"markdown\"</code>, <code>\"odt\"</code>, <code>\"docx\"</code>, <code>\"html\"</code>, etc.)</p> <p>Refer to Pandoc's README for the list of supported output formats.</p> </li> <li> <p><code>options</code>: additional pandoc options (a list of strings).</p> <p>Refer to Pandoc's user guide for a complete list of options.</p> </li> </ul> <p>Returns</p> <ul> <li> <p><code>output</code>: the output document, as a string or as a byte sequence.</p> <p>Bytes are only used for binary output formats (doc, ppt, etc.).</p> </li> </ul> <p>Usage</p> <p>Write documents to markdown strings:</p> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"Hello world!\")\n&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n&gt;&gt;&gt; print(pandoc.write(doc))  # doctest: +NORMALIZE_WHITESPACE\nHello world!\n</code></pre> <p>Write document fragments to markdown strings:</p> <pre><code>&gt;&gt;&gt; md = lambda elt: print(pandoc.write(elt))\n&gt;&gt;&gt; md(Str(\"Hello!\")) # doctest: +NORMALIZE_WHITESPACE\nHello!\n&gt;&gt;&gt; md([Str('Hello'), Space(), Str('world!')]) # doctest: +NORMALIZE_WHITESPACE\nHello world!\n&gt;&gt;&gt; md(Para([Str('Hello'), Space(), Str('world!')])) # doctest: +NORMALIZE_WHITESPACE\nHello world!\n&gt;&gt;&gt; md([ # doctest: +NORMALIZE_WHITESPACE\n...     Para([Str('Hello'), Space(), Str('world!')]),\n...     Para([Str('Hello'), Space(), Str('world!')])\n... ])\nHello world!\n&lt;BLANKLINE&gt;\nHello world!\n&gt;&gt;&gt; md(MetaInlines([Str('Hello'), Space(), Str('world!')])) # doctest: +NORMALIZE_WHITESPACE\nHello world!\n&gt;&gt;&gt; md(MetaBlocks([ # doctest: +NORMALIZE_WHITESPACE\n...     Para([Str('Hello'), Space(), Str('world!')]),\n...     Para([Str('Hello'), Space(), Str('world!')])\n... ]))\nHello world!\n&lt;BLANKLINE&gt;\nHello world!\n</code></pre> <p>Use alternate (text or binary) output formats:</p> <pre><code>&gt;&gt;&gt; output = pandoc.write(doc, format=\"html\") # html output\n&gt;&gt;&gt; type(output)\n&lt;class 'str'&gt;\n&gt;&gt;&gt; print(output)\n&lt;p&gt;Hello world!&lt;/p&gt;\n&lt;BLANKLINE&gt;\n&gt;&gt;&gt; output = pandoc.write(doc, format=\"odt\")\n&gt;&gt;&gt; type(output)\n&lt;class 'bytes'&gt;\n&gt;&gt;&gt; output # doctest: +ELLIPSIS\nb'PK...'\n</code></pre> <p>Write documents to files:</p> <pre><code>&gt;&gt;&gt; _ = pandoc.write(doc, file=\"doc.md\")\n&gt;&gt;&gt; open(\"doc.md\", encoding=\"utf-8\").read()\n'Hello world!\\n'\n&gt;&gt;&gt; _ = pandoc.write(doc, file=\"doc.html\")\n&gt;&gt;&gt; open(\"doc.html\", encoding=\"utf-8\").read()\n'&lt;p&gt;Hello world!&lt;/p&gt;\\n'\n&gt;&gt;&gt; _ = pandoc.write(doc, file=\"doc.pdf\")\n&gt;&gt;&gt; open(\"doc.pdf\", \"rb\").read() # doctest: +ELLIPSIS\nb'%PDF...'\n</code></pre> <p>Use extra pandoc options:</p> <pre><code>&gt;&gt;&gt; output = pandoc.write(\n...     doc, \n...     format=\"html\", \n...     options=[\"--standalone\", \"-V\", \"lang=en\"]\n... )\n&gt;&gt;&gt; print(output) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE\n&lt;!DOCTYPE html&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"&gt;\n...\n&lt;body&gt;\n&lt;p&gt;Hello world!&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <code>iter(elt, path=False)</code> <p>Iterate on document elements in document order.</p> <p>Arguments</p> <ul> <li> <p><code>elt</code>: a pandoc item (or more generally any Python object),</p> </li> <li> <p><code>path</code>: a boolean; defaults to <code>False</code>.</p> </li> </ul> <p>Returns</p> <ul> <li> <p><code>iterator</code>: a depth-first tree iterator.</p> </li> <li> <p><code>elt_path</code> (when <code>path==True</code>): a list of <code>(elt, index)</code> pairs. </p> </li> </ul> <p>Usage</p> <p>This iterator may be used as a general-purpose tree iterator</p> <pre><code>&gt;&gt;&gt; tree = [1, [2, [3]]]\n&gt;&gt;&gt; for elt in pandoc.iter(tree):\n...     print(elt)\n[1, [2, [3]]]\n1\n[2, [3]]\n2\n[3]\n3\n</code></pre> <p>Non-iterable objects yield themselves:</p> <pre><code>&gt;&gt;&gt; root = 1\n&gt;&gt;&gt; for elt in pandoc.iter(root):\n...     print(elt)\n1\n</code></pre> <p>But it is really meant to be used with pandoc objects:</p> <pre><code>&gt;&gt;&gt; doc = Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n&gt;&gt;&gt; for elt in pandoc.iter(doc):\n...     print(elt)\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\nMeta({})\n{}\n[Para([Str('Hello'), Space(), Str('world!')])]\nPara([Str('Hello'), Space(), Str('world!')])\n[Str('Hello'), Space(), Str('world!')]\nStr('Hello')\nHello\nSpace()\nStr('world!')\nworld!\n</code></pre> <p>Two gotchas: characters in strings are not iterated (strings are considered \"atomic\")</p> <pre><code>&gt;&gt;&gt; root = \"Hello world!\"\n&gt;&gt;&gt; for elt in pandoc.iter(root):\n...     print(elt)\nHello world!\n</code></pre> <p>and dicts yield their key-value pairs (and not only their keys):</p> <pre><code>&gt;&gt;&gt; root = {\"a\": 1, \"b\": 2}\n&gt;&gt;&gt; for elt in pandoc.iter(root):\n...      print(elt)\n{'a': 1, 'b': 2}\n('a', 1)\na\n1\n('b', 2)\nb\n2\n</code></pre> <p>Use <code>path=True</code> when you need to locate the element in the document. You can get the element parent and index within this parent as <code>path[-1]</code>, the grand-parent and the index of the parent within the grand-parent  as <code>path[-2]</code>, etc. up to the document root.</p> <pre><code>&gt;&gt;&gt; doc = Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n&gt;&gt;&gt; world = Str(\"world!\")\n&gt;&gt;&gt; for elt, path in pandoc.iter(doc, path=True): # find the path to Str(\"world!\")\n...     if elt == world:\n...         break\n&gt;&gt;&gt; for elt, index in path:\n...     print(f\"At index {index} in {elt}:\")\n... else:\n...     print(world)\nAt index 1 in Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])]):\nAt index 0 in [Para([Str('Hello'), Space(), Str('world!')])]:\nAt index 0 in Para([Str('Hello'), Space(), Str('world!')]):\nAt index 2 in [Str('Hello'), Space(), Str('world!')]:\nStr('world!')\n</code></pre> <p>See also</p> <p>Refer to the Tree iteration section.</p> <code>configure(auto=False, path=None, version=None, pandoc_types_version=None, read=False, reset=False)</code> <p>Arguments</p> <ul> <li> <p><code>auto</code>: a boolean; defaults to <code>False</code>; set to <code>True</code> to     infer the configuration from the <code>pandoc</code> in your path.</p> </li> <li> <p><code>path</code>: the path to the pandoc executable, such as <code>\"/usr/bin/pandoc\"</code>.</p> </li> <li> <p><code>version</code>: the <code>pandoc</code> command-line tool version, such as <code>\"2.14.2\"</code>.</p> </li> <li> <p><code>pandoc_types_version</code>: the <code>pandoc-types</code>      version, such as <code>\"1.22.1\"</code>.</p> </li> <li> <p><code>read</code>: a boolean; defaults to <code>False</code>. Return the configuration dictionary.</p> </li> <li> <p><code>reset</code>: a boolean; defaults to <code>False</code>. Delete the current configuration.</p> </li> </ul> <p>Returns</p> <ul> <li><code>configuration</code> (if <code>read==True</code>): the configuration dictionary,     with entries <code>\"auto\"</code>, <code>\"path\"</code>, <code>\"version\"</code> and \"<code>pandoc_types_version</code>\".</li> </ul> <p>Usage</p> <p>The configuration step is triggered when you import <code>pandoc.types</code> or call <code>pandoc.read</code> or <code>pandoc.write</code> and will automatically infer the configuration from the <code>pandoc</code> executable found in the path (or fails).</p> <p><pre><code>&gt;&gt;&gt; config = pandoc.configure(read=True)\n&gt;&gt;&gt; config # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE\n{'auto': True, \n 'path': ..., \n 'version': '3.2.1', \n 'pandoc_types_version': '1.23.1'}\n</code></pre> To avoid this, call <code>pandoc.configure(...)</code> yourself beforehand. Alternatively, select manually your pandoc executable afterwards:</p> <pre><code>&gt;&gt;&gt; pandoc.configure(reset=True)\n&gt;&gt;&gt; pandoc.configure(read=True) is None\nTrue\n&gt;&gt;&gt; config[\"auto\"] = False\n&gt;&gt;&gt; pandoc.configure(**config)\n&gt;&gt;&gt; pandoc.configure(read=True) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE\n{'auto': False, \n 'path': ..., \n 'version': '3.2.1', \n 'pandoc_types_version': '1.23.1'}    \n</code></pre> <p>See also</p> <p>Refer to the Configuration section.</p>"},{"location":"api/#pandoctypes","title":"<code>pandoc.types</code>","text":"<code>AlignCenter</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>AlignCenter()\n</code></pre> <code>AlignDefault</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>AlignDefault()\n</code></pre> <code>AlignLeft</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>AlignLeft()\n</code></pre> <code>AlignRight</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>AlignRight()\n</code></pre> <code>Alignment</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>Alignment = AlignLeft()\n          | AlignRight()\n          | AlignCenter()\n          | AlignDefault()\n</code></pre> <p>See also</p> <p><code>AlignCenter</code>, <code>AlignDefault</code>, <code>AlignLeft</code>, <code>AlignRight</code>.</p> <code>Attr</code> <p>Typedef</p> <p>Signature</p> <pre><code>Attr = (Text, [Text], [(Text, Text)])\n</code></pre> <p>See also</p> <p><code>Text</code>.</p> <code>AuthorInText</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>AuthorInText()\n</code></pre> <code>Block</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>Block = Plain([Inline])\n      | Para([Inline])\n      | LineBlock([[Inline]])\n      | CodeBlock(Attr, Text)\n      | RawBlock(Format, Text)\n      | BlockQuote([Block])\n      | OrderedList(ListAttributes, [[Block]])\n      | BulletList([[Block]])\n      | DefinitionList([([Inline], [[Block]])])\n      | Header(Int, Attr, [Inline])\n      | HorizontalRule()\n      | Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot)\n      | Figure(Attr, Caption, [Block])\n      | Div(Attr, [Block])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>BlockQuote</code>, <code>BulletList</code>, <code>Caption</code>, <code>CodeBlock</code>, <code>ColSpec</code>, <code>DefinitionList</code>, <code>Div</code>, <code>Figure</code>, <code>Format</code>, <code>Header</code>, <code>HorizontalRule</code>, <code>Inline</code>, <code>Int</code>, <code>LineBlock</code>, <code>ListAttributes</code>, <code>OrderedList</code>, <code>Para</code>, <code>Plain</code>, <code>RawBlock</code>, <code>Table</code>, <code>TableBody</code>, <code>TableFoot</code>, <code>TableHead</code>, <code>Text</code>.</p> <code>BlockQuote</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>BlockQuote([Block])\n</code></pre> <p>See also</p> <p><code>Block</code>.</p> <code>Bool</code> <p>Primitive type</p> <p>Signature</p> <pre><code>bool\n</code></pre> <code>BulletList</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>BulletList([[Block]])\n</code></pre> <p>See also</p> <p><code>Block</code>.</p> <code>Caption</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Caption(ShortCaption or None, [Block])\n</code></pre> <p>See also</p> <p><code>Block</code>, <code>ShortCaption</code>.</p> <code>Cell</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Cell(Attr, Alignment, RowSpan, ColSpan, [Block])\n</code></pre> <p>See also</p> <p><code>Alignment</code>, <code>Attr</code>, <code>Block</code>, <code>ColSpan</code>, <code>RowSpan</code>.</p> <code>Citation</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Citation(Text, [Inline], [Inline], CitationMode, Int, Int)\n</code></pre> <p>See also</p> <p><code>CitationMode</code>, <code>Inline</code>, <code>Int</code>, <code>Text</code>.</p> <code>CitationMode</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>CitationMode = AuthorInText()\n             | SuppressAuthor()\n             | NormalCitation()\n</code></pre> <p>See also</p> <p><code>AuthorInText</code>, <code>NormalCitation</code>, <code>SuppressAuthor</code>.</p> <code>Cite</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Cite([Citation], [Inline])\n</code></pre> <p>See also</p> <p><code>Citation</code>, <code>Inline</code>.</p> <code>Code</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Code(Attr, Text)\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Text</code>.</p> <code>CodeBlock</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>CodeBlock(Attr, Text)\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Text</code>.</p> <code>ColSpan</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>ColSpan(Int)\n</code></pre> <p>See also</p> <p><code>Int</code>.</p> <code>ColSpec</code> <p>Typedef</p> <p>Signature</p> <pre><code>ColSpec = (Alignment, ColWidth)\n</code></pre> <p>See also</p> <p><code>Alignment</code>, <code>ColWidth</code>.</p> <code>ColWidth</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>ColWidth = ColWidth_(Double)\n         | ColWidthDefault()\n</code></pre> <p>See also</p> <p><code>ColWidthDefault</code>, <code>ColWidth_</code>, <code>Double</code>.</p> <code>ColWidthDefault</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>ColWidthDefault()\n</code></pre> <code>ColWidth_</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>ColWidth_(Double)\n</code></pre> <p>See also</p> <p><code>Double</code>.</p> <code>Decimal</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Decimal()\n</code></pre> <code>DefaultDelim</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>DefaultDelim()\n</code></pre> <code>DefaultStyle</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>DefaultStyle()\n</code></pre> <code>DefinitionList</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>DefinitionList([([Inline], [[Block]])])\n</code></pre> <p>See also</p> <p><code>Block</code>, <code>Inline</code>.</p> <code>DisplayMath</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>DisplayMath()\n</code></pre> <code>Div</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Div(Attr, [Block])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Block</code>.</p> <code>Double</code> <p>Primitive type</p> <p>Signature</p> <pre><code>float\n</code></pre> <code>DoubleQuote</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>DoubleQuote()\n</code></pre> <code>Emph</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Emph([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>Example</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Example()\n</code></pre> <code>Figure</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Figure(Attr, Caption, [Block])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Block</code>, <code>Caption</code>.</p> <code>Format</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Format(Text)\n</code></pre> <p>See also</p> <p><code>Text</code>.</p> <code>Header</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Header(Int, Attr, [Inline])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Inline</code>, <code>Int</code>.</p> <code>HorizontalRule</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>HorizontalRule()\n</code></pre> <code>Image</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Image(Attr, [Inline], Target)\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Inline</code>, <code>Target</code>.</p> <code>Inline</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>Inline = Str(Text)\n       | Emph([Inline])\n       | Underline([Inline])\n       | Strong([Inline])\n       | Strikeout([Inline])\n       | Superscript([Inline])\n       | Subscript([Inline])\n       | SmallCaps([Inline])\n       | Quoted(QuoteType, [Inline])\n       | Cite([Citation], [Inline])\n       | Code(Attr, Text)\n       | Space()\n       | SoftBreak()\n       | LineBreak()\n       | Math(MathType, Text)\n       | RawInline(Format, Text)\n       | Link(Attr, [Inline], Target)\n       | Image(Attr, [Inline], Target)\n       | Note([Block])\n       | Span(Attr, [Inline])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Block</code>, <code>Citation</code>, <code>Cite</code>, <code>Code</code>, <code>Emph</code>, <code>Format</code>, <code>Image</code>, <code>LineBreak</code>, <code>Link</code>, <code>Math</code>, <code>MathType</code>, <code>Note</code>, <code>QuoteType</code>, <code>Quoted</code>, <code>RawInline</code>, <code>SmallCaps</code>, <code>SoftBreak</code>, <code>Space</code>, <code>Span</code>, <code>Str</code>, <code>Strikeout</code>, <code>Strong</code>, <code>Subscript</code>, <code>Superscript</code>, <code>Target</code>, <code>Text</code>, <code>Underline</code>.</p> <code>InlineMath</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>InlineMath()\n</code></pre> <code>Int</code> <p>Primitive type</p> <p>Signature</p> <pre><code>int\n</code></pre> <code>LineBlock</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>LineBlock([[Inline]])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>LineBreak</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>LineBreak()\n</code></pre> <code>Link</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Link(Attr, [Inline], Target)\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Inline</code>, <code>Target</code>.</p> <code>ListAttributes</code> <p>Typedef</p> <p>Signature</p> <pre><code>ListAttributes = (Int, ListNumberStyle, ListNumberDelim)\n</code></pre> <p>See also</p> <p><code>Int</code>, <code>ListNumberDelim</code>, <code>ListNumberStyle</code>.</p> <code>ListNumberDelim</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>ListNumberDelim = DefaultDelim()\n                | Period()\n                | OneParen()\n                | TwoParens()\n</code></pre> <p>See also</p> <p><code>DefaultDelim</code>, <code>OneParen</code>, <code>Period</code>, <code>TwoParens</code>.</p> <code>ListNumberStyle</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>ListNumberStyle = DefaultStyle()\n                | Example()\n                | Decimal()\n                | LowerRoman()\n                | UpperRoman()\n                | LowerAlpha()\n                | UpperAlpha()\n</code></pre> <p>See also</p> <p><code>Decimal</code>, <code>DefaultStyle</code>, <code>Example</code>, <code>LowerAlpha</code>, <code>LowerRoman</code>, <code>UpperAlpha</code>, <code>UpperRoman</code>.</p> <code>LowerAlpha</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>LowerAlpha()\n</code></pre> <code>LowerRoman</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>LowerRoman()\n</code></pre> <code>Math</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Math(MathType, Text)\n</code></pre> <p>See also</p> <p><code>MathType</code>, <code>Text</code>.</p> <code>MathType</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>MathType = DisplayMath()\n         | InlineMath()\n</code></pre> <p>See also</p> <p><code>DisplayMath</code>, <code>InlineMath</code>.</p> <code>Meta</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Meta({Text: MetaValue})\n</code></pre> <p>See also</p> <p><code>MetaValue</code>, <code>Text</code>.</p> <code>MetaBlocks</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>MetaBlocks([Block])\n</code></pre> <p>See also</p> <p><code>Block</code>.</p> <code>MetaBool</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>MetaBool(Bool)\n</code></pre> <p>See also</p> <p><code>Bool</code>.</p> <code>MetaInlines</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>MetaInlines([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>MetaList</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>MetaList([MetaValue])\n</code></pre> <p>See also</p> <p><code>MetaValue</code>.</p> <code>MetaMap</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>MetaMap({Text: MetaValue})\n</code></pre> <p>See also</p> <p><code>MetaValue</code>, <code>Text</code>.</p> <code>MetaString</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>MetaString(Text)\n</code></pre> <p>See also</p> <p><code>Text</code>.</p> <code>MetaValue</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>MetaValue = MetaMap({Text: MetaValue})\n          | MetaList([MetaValue])\n          | MetaBool(Bool)\n          | MetaString(Text)\n          | MetaInlines([Inline])\n          | MetaBlocks([Block])\n</code></pre> <p>See also</p> <p><code>Block</code>, <code>Bool</code>, <code>Inline</code>, <code>MetaBlocks</code>, <code>MetaBool</code>, <code>MetaInlines</code>, <code>MetaList</code>, <code>MetaMap</code>, <code>MetaString</code>, <code>Text</code>.</p> <code>NormalCitation</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>NormalCitation()\n</code></pre> <code>Note</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Note([Block])\n</code></pre> <p>See also</p> <p><code>Block</code>.</p> <code>OneParen</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>OneParen()\n</code></pre> <code>OrderedList</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>OrderedList(ListAttributes, [[Block]])\n</code></pre> <p>See also</p> <p><code>Block</code>, <code>ListAttributes</code>.</p> <code>Pandoc</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Pandoc(Meta, [Block])\n</code></pre> <p>See also</p> <p><code>Block</code>, <code>Meta</code>.</p> <code>Para</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Para([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>Period</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Period()\n</code></pre> <code>Plain</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Plain([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>QuoteType</code> <p>Abstract data type</p> <p>Signature</p> <pre><code>QuoteType = SingleQuote()\n          | DoubleQuote()\n</code></pre> <p>See also</p> <p><code>DoubleQuote</code>, <code>SingleQuote</code>.</p> <code>Quoted</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Quoted(QuoteType, [Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>, <code>QuoteType</code>.</p> <code>RawBlock</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>RawBlock(Format, Text)\n</code></pre> <p>See also</p> <p><code>Format</code>, <code>Text</code>.</p> <code>RawInline</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>RawInline(Format, Text)\n</code></pre> <p>See also</p> <p><code>Format</code>, <code>Text</code>.</p> <code>Row</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Row(Attr, [Cell])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Cell</code>.</p> <code>RowHeadColumns</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>RowHeadColumns(Int)\n</code></pre> <p>See also</p> <p><code>Int</code>.</p> <code>RowSpan</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>RowSpan(Int)\n</code></pre> <p>See also</p> <p><code>Int</code>.</p> <code>ShortCaption</code> <p>Typedef</p> <p>Signature</p> <pre><code>ShortCaption = [Inline]\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>SingleQuote</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>SingleQuote()\n</code></pre> <code>SmallCaps</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>SmallCaps([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>SoftBreak</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>SoftBreak()\n</code></pre> <code>Space</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Space()\n</code></pre> <code>Span</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Span(Attr, [Inline])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Inline</code>.</p> <code>Str</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Str(Text)\n</code></pre> <p>See also</p> <p><code>Text</code>.</p> <code>Strikeout</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Strikeout([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>String</code> <p>Primitive type</p> <p>Signature</p> <pre><code>str\n</code></pre> <code>Strong</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Strong([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>Subscript</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Subscript([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>Superscript</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Superscript([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>SuppressAuthor</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>SuppressAuthor()\n</code></pre> <code>Table</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot)\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Caption</code>, <code>ColSpec</code>, <code>TableBody</code>, <code>TableFoot</code>, <code>TableHead</code>.</p> <code>TableBody</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>TableBody(Attr, RowHeadColumns, [Row], [Row])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Row</code>, <code>RowHeadColumns</code>.</p> <code>TableFoot</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>TableFoot(Attr, [Row])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Row</code>.</p> <code>TableHead</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>TableHead(Attr, [Row])\n</code></pre> <p>See also</p> <p><code>Attr</code>, <code>Row</code>.</p> <code>Target</code> <p>Typedef</p> <p>Signature</p> <pre><code>Target = (Text, Text)\n</code></pre> <p>See also</p> <p><code>Text</code>.</p> <code>Text</code> <p>Primitive type</p> <p>Signature</p> <pre><code>str\n</code></pre> <code>TwoParens</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>TwoParens()\n</code></pre> <code>Underline</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>Underline([Inline])\n</code></pre> <p>See also</p> <p><code>Inline</code>.</p> <code>UpperAlpha</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>UpperAlpha()\n</code></pre> <code>UpperRoman</code> <p>Concrete data type</p> <p>Signature</p> <pre><code>UpperRoman()\n</code></pre> <ol> <li> <p>refer to Pandoc's heuristics for the gory details of this inference.\u00a0\u21a9\u21a9</p> </li> </ol>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#version-24-08072024","title":"Version 2.4 (08/07/2024)","text":"<ul> <li> <p>Add support for Pandoc 3.0.1 to 3.2.1.</p> </li> <li> <p>Bug fixes and improvement by @yves-chevallier,     @DanielGerlicher and @abn.</p> </li> <li> <p>Documentation fixes by @andrew-sayers.</p> </li> </ul>"},{"location":"changelog/#version-23-11232022","title":"Version 2.3 (11/23/2022)","text":"<ul> <li> <p>If the version of Pandoc is not supported, dont throw an error but warn,     and proceed as if it was the latest supported version (with undefined      results if the two document models differ). </p> </li> <li> <p>Add support for Pandoc 2.19, 2.19.1 and 2.19.2.</p> </li> </ul>"},{"location":"changelog/#version-22-04202022","title":"Version 2.2 (04/20/2022)","text":"<ul> <li>Add support for Pandoc 2.18.</li> </ul>"},{"location":"cli/","title":"Command-Line Interface","text":"<p>The Pandoc Python library includes a command-line tool to convert pandoc documents to their python representation. It is invoked with <code>python -m pandoc</code> followed by the <code>read</code> or <code>write</code> subcommands.</p> <p>You may use it to visualize the structure of markdown snippets: simply pipe them into the <code>read</code> subcommand standard input:</p> <pre><code>$ echo \"Hello world!\" | python -m pandoc read \nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre> <p>Alternatively, you can use markdown files as inputs:</p> <pre><code>$ echo \"Hello world!\" &gt; hello.md\n$ cat hello.md\nHello world!\n$ python -m pandoc read hello.md\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre> <p>Note that the output of <code>python -m pandoc read</code> is always compact:  it holds on a single line. Consider the <code>README.md</code> file of this project for example</p> <pre><code>$ URL=\"https://raw.githubusercontent.com/boisgera/pandoc/master/README.md\"\n$ curl $URL --output README.md \n$ cat README.md | head -n 10\n\nPandoc (Python Library)\n================================================================================\n\n[![build](https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg)](https://github.com/boisgera/pandoc/actions/workflows/build.yml)\n[![Downloads](https://pepy.tech/badge/pandoc)](https://pepy.tech/project/pandoc)\n[![Gitter chat](https://badges.gitter.im/boisgera/python-pandoc.svg)](https://gitter.im/python-pandoc/community#)\n\n*This README is about the 2.x branch of the library (alpha stage!). Only the 1.x branch is available on PyPi at the moment.*\n</code></pre> <p>The output of the read subcommand is a very long line: <pre><code>$ python -m pandoc read README.md\nPandoc(Meta({}), [Header(1, ('pandoc-python-library', [], []), [Str('Pandoc'), Space(), Str('(Python'), Space(), Str('Library)')]), Para([Link(('', [], []), [Image(('', [], []), [Str('build')], ('https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg', ''))], ('https://github.com/boisgera/pandoc/actions/workflows/build.yml', '')), SoftBreak(), Link(('', [], []), [Image(('', [], []), [Str('Downloads')], ('https://pepy.tech/badge/pandoc', ''))], ('https://pepy.tech/project/pandoc', '')), SoftBreak(), Link(('', [], []), [Image(('', [], []), [Str('Gitter'), Space(), Str('chat')], ('https://badges.gitter.im/boisgera/python-pandoc.svg', ''))], ('https://gitter.im/python-pandoc/community#', ''))]), Para([Emph([Str('This'), Space(), Str('README'), Space(), Str('is'), Space(), Str('about'), Space(), Str('the'), Space(), Str('2.x'), Space(), Str('branch'), Space(), Str('of'), Space(), Str('the'), Space(), Str('library'), Space(), Str('(alpha'), Space(), Str('stage!).'), Space(), Str('Only'), Space(), Str('the'), Space(), Str('1.x'), Space(), Str('branch'), Space(), Str('is'), Space(), Str('available'), Space(), Str('on'), Space(), Str('PyPi'), Space(), Str('at'), Space(), Str('the'), Space(), Str('moment.')])]), Header(2, ('getting-started', [], []), [Str('Getting'), Space(), Str('started')]), Para([Str('Install'), Space(), Str('the'), Space(), Str('latest'), Space(), Str('version'), Space(), Str('with:')]), CodeBlock(('', [], []), '$ pip install --upgrade git+https://github.com/boisgera/pandoc.git'), Para([Str('The'), Space(), Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Space(), Str('command-line'), Space(), Str('tool'), Space(), Str('is'), Space(), Str('a'), Space(), Str('also'), Space(), Str('required'), Space(), Str('dependency'), Space(), Str(';'), SoftBreak(), Str('you'), Space(), Str('may'), Space(), Str('install'), Space(), Str('it'), Space(), Str('with'), Space(), Str(':')]), CodeBlock(('', [], []), '$ conda install -c conda-forge pandoc'), Header(2, ('overview', [], []), [Str('Overview')]), Para([Str('This'), Space(), Str('project'), Space(), Str('brings'), Space(), Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Str('\u2019s'), Space(), Str('data'), Space(), Str('model'), Space(), Str('for'), Space(), Str('markdown'), Space(), Str('documents'), Space(), Str('to'), Space(), Str('Python:')]), CodeBlock(('', [], []), '$ echo \"Hello world!\" | python -m pandoc read \\nPandoc(Meta({}), [Para([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])])'), Para([Str('It'), Space(), Str('can'), Space(), Str('be'), Space(), Str('used'), Space(), Str('to'), Space(), Str('analyze,'), Space(), Str('create'), Space(), Str('and'), Space(), Str('transform'), Space(), Str('documents,'), Space(), Str('in'), Space(), Str('Python'), Space(), Str(':')]), CodeBlock(('', [], []), '&gt;&gt;&gt; import pandoc\\n&gt;&gt;&gt; text = \"Hello world!\"\\n&gt;&gt;&gt; doc = pandoc.read(text)\\n&gt;&gt;&gt; doc\\nPandoc(Meta({}), [Para([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])])\\n\\n&gt;&gt;&gt; paragraph = doc[1][0]\\n&gt;&gt;&gt; paragraph\\nPara([Str(\\'Hello\\'), Space(), Str(\\'world!\\')])\\n&gt;&gt;&gt; from pandoc.types import Str\\n&gt;&gt;&gt; paragraph[0][2] = Str(\\'Python!\\')\\n&gt;&gt;&gt; text = pandoc.write(doc)\\n&gt;&gt;&gt; print(text)\\nHello Python!'), Para([Link(('', [], []), [Str('Pandoc')], ('http://pandoc.org/', '')), Space(), Str('is'), Space(), Str('the'), Space(), Str('general'), Space(), Str('markup'), Space(), Str('converter'), Space(), Str('(and'), Space(), Str('Haskell'), Space(), Str('library)'), Space(), Str('written'), Space(), Str('by'), Space(), Link(('', [], []), [Str('John'), Space(), Str('MacFarlane')], ('http://johnmacfarlane.net/', '')), Str('.')])])\n</code></pre></p> <p>If this is not what you want, remember that this output is valid Python code that any code formatter can handle. For example, if the black formatter is available,  you can pretty-print the output with: </p> <pre><code>$ python -m pandoc read README.md | black -q -\nPandoc(\n    Meta({}),\n    [\n        Header(\n            1,\n            (\"pandoc-python-library\", [], []),\n            [Str(\"Pandoc\"), Space(), Str(\"(Python\"), Space(), Str(\"Library)\")],\n        ),\n        Para(\n            [\n                Link(\n                    (\"\", [], []),\n                    [\n                        Image(\n                            (\"\", [], []),\n                            [Str(\"build\")],\n                            (\n                                \"https://github.com/boisgera/pandoc/actions/workflows/build.yml/badge.svg\",\n                                \"\",\n                            ),\n                        )\n                    ],\n                    (\n                        \"https://github.com/boisgera/pandoc/actions/workflows/build.yml\",\n                        \"\",\n                    ),\n                ),\n                SoftBreak(),\n                Link(\n                    (\"\", [], []),\n                    [\n                        Image(\n                            (\"\", [], []),\n                            [Str(\"Downloads\")],\n                            (\"https://pepy.tech/badge/pandoc\", \"\"),\n                        )\n                    ],\n                    (\"https://pepy.tech/project/pandoc\", \"\"),\n                ),\n                SoftBreak(),\n                Link(\n                    (\"\", [], []),\n                    [\n                        Image(\n                            (\"\", [], []),\n                            [Str(\"Gitter\"), Space(), Str(\"chat\")],\n                            (\"https://badges.gitter.im/boisgera/python-pandoc.svg\", \"\"),\n                        )\n                    ],\n                    (\"https://gitter.im/python-pandoc/community#\", \"\"),\n                ),\n            ]\n        ),\n        Para(\n            [\n                Emph(\n                    [\n                        Str(\"This\"),\n                        Space(),\n                        Str(\"README\"),\n                        Space(),\n                        Str(\"is\"),\n                        Space(),\n                        Str(\"about\"),\n                        Space(),\n                        Str(\"the\"),\n                        Space(),\n                        Str(\"2.x\"),\n                        Space(),\n                        Str(\"branch\"),\n                        Space(),\n                        Str(\"of\"),\n                        Space(),\n                        Str(\"the\"),\n                        Space(),\n                        Str(\"library\"),\n                        Space(),\n                        Str(\"(alpha\"),\n                        Space(),\n                        Str(\"stage!).\"),\n                        Space(),\n                        Str(\"Only\"),\n                        Space(),\n                        Str(\"the\"),\n                        Space(),\n                        Str(\"1.x\"),\n                        Space(),\n                        Str(\"branch\"),\n                        Space(),\n                        Str(\"is\"),\n                        Space(),\n                        Str(\"available\"),\n                        Space(),\n                        Str(\"on\"),\n                        Space(),\n                        Str(\"PyPi\"),\n                        Space(),\n                        Str(\"at\"),\n                        Space(),\n                        Str(\"the\"),\n                        Space(),\n                        Str(\"moment.\"),\n                    ]\n                )\n            ]\n        ),\n        Header(\n            2, (\"getting-started\", [], []), [Str(\"Getting\"), Space(), Str(\"started\")]\n        ),\n        Para(\n            [\n                Str(\"Install\"),\n                Space(),\n                Str(\"the\"),\n                Space(),\n                Str(\"latest\"),\n                Space(),\n                Str(\"version\"),\n                Space(),\n                Str(\"with:\"),\n            ]\n        ),\n        CodeBlock(\n            (\"\", [], []),\n            \"$ pip install --upgrade git+https://github.com/boisgera/pandoc.git\",\n        ),\n        Para(\n            [\n                Str(\"The\"),\n                Space(),\n                Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")),\n                Space(),\n                Str(\"command-line\"),\n                Space(),\n                Str(\"tool\"),\n                Space(),\n                Str(\"is\"),\n                Space(),\n                Str(\"a\"),\n                Space(),\n                Str(\"also\"),\n                Space(),\n                Str(\"required\"),\n                Space(),\n                Str(\"dependency\"),\n                Space(),\n                Str(\";\"),\n                SoftBreak(),\n                Str(\"you\"),\n                Space(),\n                Str(\"may\"),\n                Space(),\n                Str(\"install\"),\n                Space(),\n                Str(\"it\"),\n                Space(),\n                Str(\"with\"),\n                Space(),\n                Str(\":\"),\n            ]\n        ),\n        CodeBlock((\"\", [], []), \"$ conda install -c conda-forge pandoc\"),\n        Header(2, (\"overview\", [], []), [Str(\"Overview\")]),\n        Para(\n            [\n                Str(\"This\"),\n                Space(),\n                Str(\"project\"),\n                Space(),\n                Str(\"brings\"),\n                Space(),\n                Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")),\n                Str(\"\u2019s\"),\n                Space(),\n                Str(\"data\"),\n                Space(),\n                Str(\"model\"),\n                Space(),\n                Str(\"for\"),\n                Space(),\n                Str(\"markdown\"),\n                Space(),\n                Str(\"documents\"),\n                Space(),\n                Str(\"to\"),\n                Space(),\n                Str(\"Python:\"),\n            ]\n        ),\n        CodeBlock(\n            (\"\", [], []),\n            \"$ echo \\\"Hello world!\\\" | python -m pandoc read \\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\",\n        ),\n        Para(\n            [\n                Str(\"It\"),\n                Space(),\n                Str(\"can\"),\n                Space(),\n                Str(\"be\"),\n                Space(),\n                Str(\"used\"),\n                Space(),\n                Str(\"to\"),\n                Space(),\n                Str(\"analyze,\"),\n                Space(),\n                Str(\"create\"),\n                Space(),\n                Str(\"and\"),\n                Space(),\n                Str(\"transform\"),\n                Space(),\n                Str(\"documents,\"),\n                Space(),\n                Str(\"in\"),\n                Space(),\n                Str(\"Python\"),\n                Space(),\n                Str(\":\"),\n            ]\n        ),\n        CodeBlock(\n            (\"\", [], []),\n            \"&gt;&gt;&gt; import pandoc\\n&gt;&gt;&gt; text = \\\"Hello world!\\\"\\n&gt;&gt;&gt; doc = pandoc.read(text)\\n&gt;&gt;&gt; doc\\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\\n\\n&gt;&gt;&gt; paragraph = doc[1][0]\\n&gt;&gt;&gt; paragraph\\nPara([Str('Hello'), Space(), Str('world!')])\\n&gt;&gt;&gt; from pandoc.types import Str\\n&gt;&gt;&gt; paragraph[0][2] = Str('Python!')\\n&gt;&gt;&gt; text = pandoc.write(doc)\\n&gt;&gt;&gt; print(text)\\nHello Python!\",\n        ),\n        Para(\n            [\n                Link((\"\", [], []), [Str(\"Pandoc\")], (\"http://pandoc.org/\", \"\")),\n                Space(),\n                Str(\"is\"),\n                Space(),\n                Str(\"the\"),\n                Space(),\n                Str(\"general\"),\n                Space(),\n                Str(\"markup\"),\n                Space(),\n                Str(\"converter\"),\n                Space(),\n                Str(\"(and\"),\n                Space(),\n                Str(\"Haskell\"),\n                Space(),\n                Str(\"library)\"),\n                Space(),\n                Str(\"written\"),\n                Space(),\n                Str(\"by\"),\n                Space(),\n                Link(\n                    (\"\", [], []),\n                    [Str(\"John\"), Space(), Str(\"MacFarlane\")],\n                    (\"http://johnmacfarlane.net/\", \"\"),\n                ),\n                Str(\".\"),\n            ]\n        ),\n    ],\n)\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<pre><code>import pandoc\n</code></pre>"},{"location":"configuration/#introduction","title":"Introduction","text":"<p>The good news are that you generally don't need to configure anything: when you use the <code>pandoc</code> Python library, it does inspect your system to find the available <code>pandoc</code>  command-line tool and configures itself accordingly.  Most of the time, this is what you want.</p> <p>However, if you need more control on this configuration step, you can import <code>pandoc</code> and call <code>configure</code> before you do anything else with the library:</p> <pre><code>import pandoc\npandoc.configure(...)\n</code></pre> <p>If you do this, the implicit configuration does not take place; it is triggered only when no configuration is specified when </p> <ul> <li> <p>you import <code>pandoc.types</code> or</p> </li> <li> <p>you call <code>pandoc.read</code> or <code>pandoc.write</code>. </p> </li> </ul>"},{"location":"configuration/#options","title":"Options","text":"<p>To have the library find a <code>pandoc</code> executable in your path,  and configure itself accordingly, enable the <code>auto</code> option</p> <pre><code>pandoc.configure(auto=True)\n</code></pre> <p>This is the method used by the implicit configuration. If instead you want to specify manually the pandoc executable, use the <code>path</code> argument, for example:</p> <pre><code>pandoc.configure(path='/usr/bin/pandoc')\n</code></pre> <p>Some features1 of the Python <code>pandoc</code> library  do not require the <code>pandoc</code> executable, but in this case  we still need to know what version of pandoc you target, so specify for example:</p> <pre><code>pandoc.configure(version='2.18')\n</code></pre> <p>Actually, the exact version of pandoc is not even required.  Instead what matters is the version of the document model  that you intend to use, or equivalently, the version of the <code>pandoc-types</code> Haskell package used by the pandoc executable. Accordingly, you may configure <code>pandoc</code> with the  <code>pandoc_types_version</code> argument:</p> <pre><code>pandoc.configure(pandoc_types_version='1.22.2')\n</code></pre>"},{"location":"configuration/#extra-arguments","title":"Extra Arguments","text":"<p>To get a copy of the configuration (or <code>None</code> if the library is not configured yet), enable the <code>read</code> option. The call <code>pandoc.configure(read=True)</code> does not change the current configuration  but returns a dictionary whose keys are <code>auto</code>, <code>path</code>,  <code>version</code> and <code>pandoc_types_version</code>, such as</p> <pre><code>&gt;&gt;&gt; pandoc.configure(read=True) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE\n{'auto': True, \n 'path': ..., \n 'version': '3.2.1', \n 'pandoc_types_version': '1.23.1'}\n</code></pre> <p>The <code>read</code> option may be combined with other arguments, for example</p> <pre><code>config = pandoc.configure(auto=True, read=True)\n</code></pre> <p>This is actually a good way to know where the pandoc executable has been found, what is its version and the corresponding version of <code>pandoc-types</code>.</p> <p>When it is needed, it is also possible to restore the unconfigured state:</p> <pre><code>pandoc.configure(reset=True)\n</code></pre> <ol> <li> <p>typically conversion between json and Python object representations  of documents and analysis or transformations of documents as Python objects. As soon as you use convert to or from any other format, markdown for example, you need a pandoc executable.\u00a0\u21a9</p> </li> </ol>"},{"location":"cookbook/","title":"Cookbook","text":"<pre><code># Python Standard Library\nimport builtins\nimport copy\n\n# Pandoc\nimport pandoc\nfrom pandoc.types import *\n</code></pre> <p>In this cookbook, we will use as reference the very simple \"Hello world!\" document</p> <pre><code>HELLOWORLD_DOC = pandoc.read(\"Hello world!\")\n</code></pre> <p>and the longer and more complex commonmark spec:</p> <pre><code>from urllib.request import urlopen\nPATH = \"raw.githubusercontent.com/commonmark/commonmark-spec\"\nHASH = \"499ebbad90163881f51498c4c620652d0c66fb2e\" # pinned version\nURL = f\"https://{PATH}/{HASH}/spec.txt\"\nCOMMONMARK_SPEC = urlopen(URL).read().decode(\"utf-8\")\n</code></pre> <pre><code>&gt;&gt;&gt; print(COMMONMARK_SPEC[:583]) # excerpt\n---\ntitle: CommonMark Spec\nauthor: John MacFarlane\nversion: '0.30'\ndate: '2021-06-19'\nlicense: '[CC-BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)'\n...\n&lt;BLANKLINE&gt;\n# Introduction\n&lt;BLANKLINE&gt;\n## What is Markdown?\n&lt;BLANKLINE&gt;\nMarkdown is a plain text format for writing structured documents,\nbased on conventions for indicating formatting in email\nand usenet posts.  It was developed by John Gruber (with\nhelp from Aaron Swartz) and released in 2004 in the form of a\n[syntax description](http://daringfireball.net/projects/markdown/syntax)\nand a Perl script (`Markdown.pl`) for converting Markdown to\nHTML.\n</code></pre> <pre><code>COMMONMARK_DOC = pandoc.read(COMMONMARK_SPEC)\n</code></pre>"},{"location":"cookbook/#access","title":"Access","text":"<p>When we know the location and type of some information in a document, we can use either random access or pattern matching to retrieve it.</p>"},{"location":"cookbook/#random-access","title":"Random access","text":"<p>A date is often included as inline text into a document's metadata;  in this case, we can access it and return it as a markdown string:</p> <pre><code>def get_date(doc):\n    meta = doc[0] # doc: Pandoc(Meta, [Block])\n    meta_dict = meta[0] # meta: Meta({Text: MetaValue})\n    date = meta_dict[\"date\"]\n    date_inlines = date[0] # date: MetaInlines([Inline])\n    return pandoc.write(date_inlines).strip()\n</code></pre> <p>The commonmark specification includes such a date: <pre><code>&gt;&gt;&gt; print(COMMONMARK_SPEC) # doctest: +ELLIPSIS\n---\ntitle: CommonMark Spec\nauthor: John MacFarlane\nversion: '0.30'\ndate: '2021-06-19'\nlicense: '[CC-BY-SA 4.0](http://creativecommons.org/licenses/by-sa/4.0/)'\n...\n</code></pre></p> <p>and therefore</p> <pre><code>&gt;&gt;&gt; get_date(COMMONMARK_DOC)\n'2021-06-19'\n</code></pre> <p>After the metadata, the document starts with a header. To get its title, we can use</p> <pre><code>def get_first_header_title(doc):\n    blocks = doc[1] # doc: Pandoc(Meta, [Block])\n    header = blocks[0]\n    title_inlines = header[2] # header: Header(Int, Attr, [Inline])\n    return pandoc.write(title_inlines).strip()\n</code></pre> <pre><code>&gt;&gt;&gt; get_first_header_title(COMMONMARK_DOC)\n'Introduction'\n</code></pre>"},{"location":"cookbook/#structural-checks","title":"Structural checks","text":"<p>The functions <code>get_date</code> and <code>get_first_header_title</code> may fail if they are use on a document which doesn't have the expected structure.  For example, for the \"Hello world!\" document</p> <pre><code>&gt;&gt;&gt; HELLOWORLD_DOC\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre> <p>which has no <code>date</code> metadata field, and doesn't start with a header, we end up with</p> <pre><code>&gt;&gt;&gt; get_date(HELLOWORLD_DOC)\nTraceback (most recent call last):\n...\nKeyError: 'date'\n</code></pre> <pre><code>&gt;&gt;&gt; get_first_header_title(HELLOWORLD_DOC)\nTraceback (most recent call last):\n...\nIndexError: list index out of range\n</code></pre> <p>A more robust version of these functions may return <code>None</code> when the document does not have the expected structure:</p> <pre><code>def get_date(doc):\n    meta = doc[0] # doc: Pandoc(Meta, [Block])\n    meta_dict = meta[0] # meta: Meta({Text: MetaValue})\n    date = meta_dict.get(\"date\")\n    if isinstance(date, MetaInlines):\n        date_inlines = date[0] # date: MetaInlines([Inline])\n        return pandoc.write(date_inlines).strip()\n</code></pre> <pre><code>&gt;&gt;&gt; get_date(COMMONMARK_DOC)\n'2021-06-19'\n&gt;&gt;&gt; get_date(HELLOWORLD_DOC)\n</code></pre> <pre><code>def get_first_header_title(doc):\n    blocks = doc[1] # doc: Pandoc(Meta, [Block])\n    if blocks and isinstance(blocks[0], Header):\n        header = blocks[0]\n        title_inlines = header[2] # header: Header(Int, Attr, [Inline])\n        return pandoc.write(title_inlines).strip()\n</code></pre> <pre><code>&gt;&gt;&gt; get_first_header_title(COMMONMARK_DOC)\n'Introduction'\n&gt;&gt;&gt; get_first_header_title(HELLOWORLD_DOC)\n</code></pre>"},{"location":"cookbook/#pattern-matching","title":"Pattern matching","text":"<p>With Python 3.10 or later, pattern matching can be used to combine random access and structural checks. The following implementation of <code>get_date</code></p> <pre><code>def get_date(doc):\n    match doc:\n        case Pandoc(Meta({\"date\": MetaInlines(date_inlines)}), _):\n            return pandoc.write(date_inlines).strip()\n</code></pre> <p>and the previous one have identical behaviors:</p> <pre><code>&gt;&gt;&gt; get_date(COMMONMARK_DOC)\n'2021-06-19'\n&gt;&gt;&gt; get_date(HELLOWORLD_DOC)\n</code></pre> <p>The behavior of the following <code>get_first_header_title</code> function</p> <pre><code>def get_first_header_title(doc):\n    match doc:\n        case Pandoc(_, [Header(_, _, header_inlines), *_]):\n            return pandoc.write(header_inlines).strip()\n</code></pre> <p>is also unchanged:</p> <pre><code>&gt;&gt;&gt; get_first_header_title(COMMONMARK_DOC)\n'Introduction'\n&gt;&gt;&gt; get_first_header_title(HELLOWORLD_DOC)\n</code></pre>"},{"location":"cookbook/#find","title":"Find","text":"<p>When the items we are searching for are not in a known place in the document, we may use the tree iterator provided by <code>pandoc.iter</code> and a variety of filtering methods to fetch them. Here we focus on comprehensions first and then introduce a higher-level helper.</p>"},{"location":"cookbook/#filter","title":"Filter","text":"<p>The pattern to use is <code>[elt for elt in pandoc.iter(root) if condition_is_met(elt)]</code>.</p> <p>With it, we can build a simple table of contents of the document: <pre><code>def table_of_contents(doc):\n    headers = [elt for elt in pandoc.iter(doc) if isinstance(elt, Header)]\n    toc_lines = []\n    for header in headers:\n       level, _, inlines = header[:] # header: Header(Int, Attr, [Inline]) \n       header_title = pandoc.write(inlines).strip()\n       indent = (level - 1) * 4 * \" \"\n       toc_lines.append(f\"{indent}  - {header_title}\")\n    return \"\\n\".join(toc_lines)\n</code></pre></p> <pre><code>&gt;&gt;&gt; print(table_of_contents(COMMONMARK_DOC)) # doctest: +ELLIPSIS\n  - Introduction\n      - What is Markdown?\n      - Why is a spec needed?\n      - About this document\n  - Preliminaries\n      - Characters and lines\n      - Tabs\n      - Insecure characters\n      - Backslash escapes\n      - Entity and numeric character references\n  ...\n  - Appendix: A parsing strategy\n      - Overview\n      - Phase 1: block structure\n      - Phase 2: inline structure\n          - An algorithm for parsing nested emphasis and links\n              - *look for link or image*\n              - *process emphasis*\n</code></pre> <p>We can display all external link URLs used in the commonmark specification:</p> <pre><code>def display_external_links(doc):\n    links = [elt for elt in pandoc.iter(doc) if isinstance(elt, Link)]\n    for link in links:\n        target = link[2] # link: Link(Attr, [Inline], Target)\n        url = target[0] # target: (Text, Text)\n        if url.startswith(\"http:\") or url.startswith(\"https:\"):\n            print(url)\n</code></pre> <pre><code>&gt;&gt;&gt; display_external_links(COMMONMARK_DOC)\nhttp://creativecommons.org/licenses/by-sa/4.0/\nhttp://daringfireball.net/projects/markdown/syntax\nhttp://daringfireball.net/projects/markdown/\nhttp://www.methods.co.nz/asciidoc/\nhttp://daringfireball.net/projects/markdown/syntax\nhttp://article.gmane.org/gmane.text.markdown.general/1997\nhttp://article.gmane.org/gmane.text.markdown.general/2146\nhttp://article.gmane.org/gmane.text.markdown.general/2554\nhttps://html.spec.whatwg.org/entities.json\nhttp://www.aaronsw.com/2002/atx/atx.py\nhttp://docutils.sourceforge.net/rst.html\nhttp://daringfireball.net/projects/markdown/syntax#em\nhttp://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags\nhttps://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email)\nhttp://www.w3.org/TR/html5/syntax.html#comments\n</code></pre> <p>We can get the list of all code blocks and collect their types  (registered as code block classes):</p> <pre><code>def fetch_code_types(doc):\n    code_blocks = [elt for elt in pandoc.iter(doc) if isinstance(elt, CodeBlock)]\n    types = set()\n    for code_block in code_blocks:\n        attr = code_block[0] # CodeBlock(Attr, Text)\n        _, classes, _ = attr # Attr = (Text, [Text], [(Text, Text)])\n        types.update(classes)\n    return sorted(list(types))\n</code></pre> <pre><code>&gt;&gt;&gt; code_types = fetch_code_types(COMMONMARK_DOC)\n&gt;&gt;&gt; code_types\n['example', 'html', 'markdown', 'tree']\n</code></pre>"},{"location":"cookbook/#exclude","title":"Exclude","text":"<p>Some search patterns require to exclude some elements when one of their  ancestors meets some condition. For example, you may want to count the number  of words in your document (loosely defined as the number of <code>Str</code> instances) excluding those inside a div tagged as notes1.</p> <p>Let's use the following example document:</p> <pre><code>words_doc = pandoc.read(\"\"\"\nThe words in this paragraph should be counted.\n\n::: notes ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\nBut these words should be excluded.\n\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n\"\"\")\n</code></pre> <p>Counting all words is easy</p> <pre><code>&gt;&gt;&gt; len([item for item in pandoc.iter(words_doc) if isinstance(item, Str)])\n14\n</code></pre> <p>But to exclude all words with a <code>notes</code> div, we need to detect when the iteration enters and exits such an element. The easiest way to do this is to record the depth of the div when we enter it. As long as we iterate on items at a greater depth, we're still in the div scope ; when this depth becomes equal or smaller than this recorded depth, we're out of it.  Thus, we can implement this pattern with:</p> <pre><code>def is_notes(elt):\n    if isinstance(elt, Div):\n        attr = elt[0] # elt: Div(Attr, [Block])\n        classes = attr[1] # attr :(Text, [Text], [(Text, Text)])\n        return \"notes\" in classes\n    else:\n        return False\n\ndef count_words(doc):\n    in_notes, depth = False, None\n    count = 0\n    for elt, path in pandoc.iter(doc, path=True):\n        if in_notes and len(path) &gt; depth:\n            pass\n        elif is_notes(elt):\n            in_notes, depth = True, len(path)\n        else:\n            in_notes, depth = False, None\n            if isinstance(elt, Str) and not in_notes:\n                count += 1\n    return count\n</code></pre> <p>It provides the expected result: <pre><code>&gt;&gt;&gt; count_words(words_doc)\n8\n</code></pre></p>"},{"location":"cookbook/#finder","title":"Finder","text":"<p>If your code ends up being hard to read, it's not hard to wrap the more common search patterns into a <code>find</code> helper function, for example:</p> <pre><code>def is_type_or_types(item):\n    return isinstance(item, type) or (\n        isinstance(item, tuple) and all(isinstance(x, type) for x in item)\n    )\n\ndef to_function(condition):\n    if is_type_or_types(condition):\n        return lambda elt: isinstance(elt, condition)\n    elif callable(condition):\n        return condition\n    else:\n        error = \"condition should be a type, tuple of types or function\"\n        error += f\", not {condition}\"\n        raise TypeError(error)\n\ndef find(root, condition, all=False):\n    condition = to_function(condition)\n    elts = (elt for elt in pandoc.iter(root) if condition(elt))\n    if all:\n        return list(elts)\n    else:\n        try:\n            return next(elts)\n        except StopIteration:\n            return None\n</code></pre> <p>This <code>find</code> helper returns the first elt that matches the specified condition, or returns <code>None</code> if the condition was never met:</p> <pre><code>&gt;&gt;&gt; find(HELLOWORLD_DOC, Meta)\nMeta({})\n&gt;&gt;&gt; find(HELLOWORLD_DOC, Para)\nPara([Str('Hello'), Space(), Str('world!')])\n&gt;&gt;&gt; find(HELLOWORLD_DOC, Str)\nStr('Hello')\n&gt;&gt;&gt; find(HELLOWORLD_DOC, LineBreak)\n</code></pre> <p>With <code>all=True</code>, the list of all matching elements are returned instead:</p> <pre><code>&gt;&gt;&gt; find(HELLOWORLD_DOC, Meta, all=True)\n[Meta({})]\n&gt;&gt;&gt; find(HELLOWORLD_DOC, Para, all=True)\n[Para([Str('Hello'), Space(), Str('world!')])]\n&gt;&gt;&gt; find(HELLOWORLD_DOC, Str, all=True)\n[Str('Hello'), Str('world!')]\n&gt;&gt;&gt; find(HELLOWORLD_DOC, LineBreak, all=True)\n[]\n</code></pre> <p>Types or multiple types can be specified (this is similar to what <code>isinstance</code> does):</p> <pre><code>&gt;&gt;&gt; find(HELLOWORLD_DOC, (Str, Space))\nStr('Hello')\n&gt;&gt;&gt; find(HELLOWORLD_DOC, (Str, Space), all=True)\n[Str('Hello'), Space(), Str('world!')]\n</code></pre> <p>Complex conditions based on types and values can be factored out in  a predicate function, such as <code>is_http_or_https_link</code>:</p> <pre><code>def get_url(link):\n    target = link[2] # link: Link(Attr, [Inline], Target)\n    url = target[0] # target: (Text, Text)\n    return url\n\ndef is_http_or_https_link(elt):\n    if isinstance(elt, Link):\n        url = get_url(link=elt)\n        return url.startswith(\"http:\") or url.startswith(\"https:\")\n    else:\n        return False\n</code></pre> <pre><code>&gt;&gt;&gt; for link in find(COMMONMARK_DOC, is_http_or_https_link, all=True):\n...     print(get_url(link))\nhttp://creativecommons.org/licenses/by-sa/4.0/\nhttp://daringfireball.net/projects/markdown/syntax\nhttp://daringfireball.net/projects/markdown/\nhttp://www.methods.co.nz/asciidoc/\nhttp://daringfireball.net/projects/markdown/syntax\nhttp://article.gmane.org/gmane.text.markdown.general/1997\nhttp://article.gmane.org/gmane.text.markdown.general/2146\nhttp://article.gmane.org/gmane.text.markdown.general/2554\nhttps://html.spec.whatwg.org/entities.json\nhttp://www.aaronsw.com/2002/atx/atx.py\nhttp://docutils.sourceforge.net/rst.html\nhttp://daringfireball.net/projects/markdown/syntax#em\nhttp://www.vfmd.org/vfmd-spec/specification/#procedure-for-identifying-emphasis-tags\nhttps://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email)\nhttp://www.w3.org/TR/html5/syntax.html#comments\n</code></pre> <p>We can improve <code>find</code> to make it support the exclusion pattern:</p> <pre><code>def find(root, condition, exclude=None, all=False):\n    condition = to_function(condition)\n    exclude = exclude or (lambda elt: False)\n    def generator():\n        is_excluded, depth = False, None\n        for elt, path in pandoc.iter(root, path=True):\n            if is_excluded and len(path) &gt; depth:\n                pass\n            elif exclude(elt):\n                is_excluded, depth = True, len(path)\n            else:\n                is_excluded, depth = False, None\n                if condition(elt):\n                    yield elt\n    if all:\n        return list(generator())\n    else:\n        try:\n            return next(generator())\n        except StopIteration:\n            return None\n</code></pre> <p>We can then count again the words in the <code>words_doc</code> document:</p> <pre><code>&gt;&gt;&gt; len(find(words_doc, Str, all=True))\n14\n&gt;&gt;&gt; len(find(words_doc, Str, exclude=is_notes, all=True))\n8\n</code></pre>"},{"location":"cookbook/#locate","title":"Locate","text":"<p>We sometimes need to find some elements meeting some condition and to know at the same times where they are in the document hierarchy.</p>"},{"location":"cookbook/#holder-and-index","title":"Holder and index","text":"<p>A way to locate an element <code>elt</code> is to provide the unique pair <code>holder</code>, <code>index</code>  such that <code>elt</code> is <code>holder[index]</code>2. To get this information during a depth-first iteration of <code>root</code>, we iterate on <code>pandoc.iter(root, path=True)</code>: the iteration then yields <code>elt, path</code>  and <code>holder, index</code> is the last item of <code>path</code>. For example:</p> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"Hello world!\")\n&gt;&gt;&gt; for elt, path in pandoc.iter(doc, path=True):\n...     if elt != doc: # when doc is the root, path == []\n...          holder, index = path[-1]\n...          print(f\"elt: {elt!r}\")\n...          print(f\"  -&gt; holder: {holder}\")\n...          print(f\"  -&gt; index: {index}\")\nelt: Meta({})\n  -&gt; holder: Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n  -&gt; index: 0\nelt: {}\n  -&gt; holder: Meta({})\n  -&gt; index: 0\nelt: [Para([Str('Hello'), Space(), Str('world!')])]\n  -&gt; holder: Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n  -&gt; index: 1\nelt: Para([Str('Hello'), Space(), Str('world!')])\n  -&gt; holder: [Para([Str('Hello'), Space(), Str('world!')])]\n  -&gt; index: 0\nelt: [Str('Hello'), Space(), Str('world!')]\n  -&gt; holder: Para([Str('Hello'), Space(), Str('world!')])\n  -&gt; index: 0\nelt: Str('Hello')\n  -&gt; holder: [Str('Hello'), Space(), Str('world!')]\n  -&gt; index: 0\nelt: 'Hello'\n  -&gt; holder: Str('Hello')\n  -&gt; index: 0\nelt: Space()\n  -&gt; holder: [Str('Hello'), Space(), Str('world!')]\n  -&gt; index: 1\nelt: Str('world!')\n  -&gt; holder: [Str('Hello'), Space(), Str('world!')]\n  -&gt; index: 2\nelt: 'world!'\n  -&gt; holder: Str('world!')\n  -&gt; index: 0\n</code></pre> <p>The previous components of the path contain the holder and index that locate the element holder, then their holder and index, etc. up to the document root: <pre><code>&gt;&gt;&gt; for elt, path in pandoc.iter(doc, path=True):\n...     if elt == \"world!\":\n...         for holder, index in path:\n...             print(f\"-&gt; {holder}[{index}]\")\n-&gt; Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])[1]\n-&gt; [Para([Str('Hello'), Space(), Str('world!')])][0]\n-&gt; Para([Str('Hello'), Space(), Str('world!')])[0]\n-&gt; [Str('Hello'), Space(), Str('world!')][2]\n-&gt; Str('world!')[0]\n</code></pre></p>"},{"location":"cookbook/#transforms","title":"Transforms","text":"<p>The location (<code>holder</code>, <code>index</code> pair) of elements is a must-have for many  (in-place) document transforms. We demonstrate in this section several typical use of this information on the document</p> <pre><code>doc = pandoc.read(\"\ud83c\udfe0, sweet \ud83c\udfe0.\")\n</code></pre> <pre><code>&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Str('\ud83c\udfe0,'), Space(), Str('sweet'), Space(), Str('\ud83c\udfe0.')])])\n</code></pre>"},{"location":"cookbook/#expand","title":"Expand","text":"<p>To easily locate the \ud83c\udfe0 symbol in the subsequent steps,  we expand every instance of <code>Str</code> where it appears. First, we define the helper function <code>split_home</code></p> <pre><code>def split_home(string):\n    text = string[0] # string: Str(text)\n    texts = [t for t in text.split(\"\ud83c\udfe0\")]\n    parts = []\n    for text in texts:\n        parts.extend([Str(text), Str(\"\ud83c\udfe0\")])\n    parts = parts[:-1] # remove trailing Str(\"\ud83c\udfe0\")\n    return [elt for elt in parts if elt != Str(\"\")]\n</code></pre> <pre><code>&gt;&gt;&gt; split_home(Str(\"!\ud83c\udfe0!\"))\n[Str('!'), Str('\ud83c\udfe0'), Str('!')]\n</code></pre> <p>then we use it to expand all <code>Str</code> inlines accordingly:</p> <pre><code>matches = [\n    (elt, path) for (elt, path) in pandoc.iter(doc, path=True) \n    if isinstance(elt, Str)\n]\nfor elt, path in reversed(matches): # reversed: subsequent matches stay valid\n    holder, index = path[-1]\n    holder[index:index+1] = split_home(elt)\n</code></pre> <p>This operation had no apparent impact when the document is converted to markdown</p> <pre><code>&gt;&gt;&gt; print(pandoc.write(doc).strip())\n\ud83c\udfe0, sweet \ud83c\udfe0.\n</code></pre> <p>but we can check that it has actually changed the document:</p> <pre><code>&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Str('\ud83c\udfe0'), Str(','), Space(), Str('sweet'), Space(), Str('\ud83c\udfe0'), Str('.')])])\n</code></pre>"},{"location":"cookbook/#replace","title":"Replace","text":"<p>We locate all locations of \ud83c\udfe0 in the text and wrap them into links.</p> <pre><code>matches = [\n    (elt, path) for (elt, path) in pandoc.iter(doc, path=True) \n    if elt == Str(\"\ud83c\udfe0\")\n]\nfor elt, path in reversed(matches):\n    holder, index = path[-1]\n    attr = (\"\", [], [])\n    target = (\"https://github.com/boisgera/pandoc/\", \"\")\n    holder[index] = Link(attr, [elt], target) \n</code></pre> <pre><code>&gt;&gt;&gt; print(pandoc.write(doc)) # doctest: +NORMALIZE_WHITESPACE\n[\ud83c\udfe0](https://github.com/boisgera/pandoc/), sweet [\ud83c\udfe0](https://github.com/boisgera/pandoc/).\n</code></pre> <pre><code>&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Link(('', [], []), [Str('\ud83c\udfe0')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('\ud83c\udfe0')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])])\n</code></pre>"},{"location":"cookbook/#insert","title":"Insert","text":"<p>We insert the text \"home\" just after the \ud83c\udfe0 symbols:</p> <pre><code>matches = [\n    (elt, path) for (elt, path) in pandoc.iter(doc, path=True) \n    if elt == Str(\"\ud83c\udfe0\")\n]\nfor elt, path in reversed(matches):\n    holder, index = path[-1]\n    attr = (\"\", [], [])\n    target = (\"https://github.com/boisgera/pandoc/\", \"\")\n    holder.insert(index + 1, Str(\"home\"))\n</code></pre> <p><pre><code>&gt;&gt;&gt; print(pandoc.write(doc)) # doctest: +NORMALIZE_WHITESPACE\n[\ud83c\udfe0home](https://github.com/boisgera/pandoc/), sweet [\ud83c\udfe0home](https://github.com/boisgera/pandoc/).\n</code></pre> <pre><code>&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Link(('', [], []), [Str('\ud83c\udfe0'), Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('\ud83c\udfe0'), Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])])\n</code></pre></p>"},{"location":"cookbook/#delete","title":"Delete","text":"<p>And finally, we get rid of the \ud83c\udfe0 symbols altogether.</p> <pre><code>matches = [\n    (elt, path) for (elt, path) in pandoc.iter(doc, path=True) \n    if elt == Str(\"\ud83c\udfe0\")\n]\nfor elt, path in reversed(matches):\n    holder, index = path[-1]\n    attr = (\"\", [], [])\n    target = (\"https://github.com/boisgera/pandoc/\", \"\")\n    del holder[index] \n</code></pre> <pre><code>&gt;&gt;&gt; print(pandoc.write(doc)) # doctest: +NORMALIZE_WHITESPACE\n[home](https://github.com/boisgera/pandoc/), sweet [home](https://github.com/boisgera/pandoc/).\n</code></pre> <pre><code>&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Link(('', [], []), [Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str(','), Space(), Str('sweet'), Space(), Link(('', [], []), [Str('home')], ('https://github.com/boisgera/pandoc/', '')), Str('.')])])\n</code></pre>"},{"location":"cookbook/#immutable-data","title":"Immutable data","text":"<p>Every non-trivial pandoc document contains some data which is immutable. To perform in-place modifications of your document,  you have to deal with them specifically. And this is a good thing!</p>"},{"location":"cookbook/#hello-world","title":"Hello world!","text":"<p>Consider the most basic \"Hello world!\" paragraph:</p> <pre><code>&gt;&gt;&gt; paragraph = Para([Str('Hello'), Space(), Str('world!')])\n&gt;&gt;&gt; string = paragraph[0][2]\n&gt;&gt;&gt; string\nStr('world!')\n&gt;&gt;&gt; text = string[0]\n&gt;&gt;&gt; text\n'world!'\n</code></pre> <p>Here <code>text</code> is a Python string, which is immutable. Thus, we cannot modify it in-place:</p> <pre><code>&gt;&gt;&gt; text[:] = \"pandoc!\"\nTraceback (most recent call last):\n...\nTypeError: 'str' object does not support item assignment\n</code></pre> <p>Does it mean that we cannot modify any word of this sentence? Absolutely not! Because instead of modifying the Python string, we can replace it in its container instead:</p> <pre><code>&gt;&gt;&gt; string[0] = \"pandoc!\"\n&gt;&gt;&gt; paragraph\nPara([Str('Hello'), Space(), Str('pandoc!')])\n</code></pre> <p>This works because the container of <code>\"world!\"</code> is an instance of <code>Str</code>, a custom Pandoc type, which is mutable.</p>"},{"location":"cookbook/#type-safety","title":"Type safety","text":"<p>While the above approach may seem to be a workaround at first,  it is actually a good thing, because it helps you to carefully consider the type of data that you select and transform. Python strings for example are of course in documents to describe fragments of text, but also in many other roles. </p> <p>Consider the HTML fragment:</p> <p><pre><code>blocks = [ # &lt;p&gt;html rocks!&lt;/p&gt;\n    RawBlock(Format(\"html\"), \"&lt;p&gt;\"), \n    Plain([Str(\"html\"), Space(), Str('rocks!')]), \n    RawBlock(Format(\"html\"), \"&lt;p/&gt;\")\n]\n</code></pre> Let's say that we want to replace <code>\"html\"</code> with <code>\"pandoc\"</code> in the document text. Notice that the string <code>\"html\"</code> is used in the <code>\"html rocks!\"</code>,  but also as a type field in the <code>Format</code> instance.  If Python strings were mutable, you could carelessly try to replace all <code>\"html\"</code> strings in the document model regardless of their role.  And you would end up with the (invalid) document fragment:</p> <pre><code>invalid_blocks = [\n    RawBlock(Format(\"pandoc\"), \"&lt;p&gt;\"), \n    Plain([Str(\"pandoc\"), Space(), Str('rocks!')]),  \n    RawBlock(Format(\"pandoc\"), \"&lt;p/&gt;\")\n]\n</code></pre> <p>Fortunately this approach will fail loudly:</p> <pre><code>&gt;&gt;&gt; for elt in pandoc.iter(blocks):\n...     if elt == \"html\":\n...         elt[:] = \"pandoc\"\nTraceback (most recent call last):\n...\nTypeError: 'str' object does not support item assignment\n</code></pre> <p>A correct, type-safe, way to proceed is instead:</p> <pre><code>&gt;&gt;&gt; for elt in pandoc.iter(blocks):\n...     if isinstance(elt, Str) and elt[0] == \"html\":\n...         elt[0] = \"pandoc\"\n... \n&gt;&gt;&gt; blocks == [\n...     RawBlock(Format(\"html\"), \"&lt;p&gt;\"), \n...     Plain([Str(\"pandoc\"), Space(), Str('rocks!')]), \n...     RawBlock(Format(\"html\"), \"&lt;p/&gt;\")\n... ]\nTrue\n</code></pre>"},{"location":"cookbook/#use-cases","title":"Use cases","text":"<p>Python strings is an example of primitive type which is immutable and thus require special handling when in-place algorithms are used.  Boolean, integers and floating-point numbers are also found in document and can be handled similarly. The other immutable types that appears in documents are based on tuples. We illustrate how to deal with them on the two most common use cases:  targets and attributes.</p>"},{"location":"cookbook/#targets","title":"Targets","text":"<p>In pandoc, targets are pairs of Python strings</p> <pre><code>&gt;&gt;&gt; Target\nTarget = (Text, Text)\n&gt;&gt;&gt; Text\n&lt;class 'str'&gt;\n</code></pre> <p>The first text represents an URL and the second a title. Targets are used in link and image elements (and only there).</p> <p>Say that you want to find all links in your document whose target URL is <code>\"https://pandoc.org\"</code> and make sure that the associated title is  <code>\"Pandoc - About pandoc\"</code>. The relevant type signature is:</p> <pre><code>&gt;&gt;&gt; Link\nLink(Attr, [Inline], Target)\n</code></pre> <p>You may be tempted to iterate the document to find all pairs of text, then select those whose first item is \"<code>https://pandoc.org</code>\" and modify them.  But this approach will not work: we know by now that it is unsafe, since you may find some items which are not really targets3 ; and additionally, you cannot modify the targets in-place since tuples are immutable.</p> <p>The easiest way to handle this situation is to search for links that target  pandoc's web site.</p> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"[Link to pandoc.org](https://pandoc.org)\")\n&gt;&gt;&gt; for elt in pandoc.iter(doc):\n...     if isinstance(elt, Link):\n...         attr, inlines, target = elt[:] # elt: Link(Attr, [Inline], Target)\n...         if target[0] == \"https://pandoc.org\":\n...             new_target = (target[0], \"Pandoc - About pandoc\")\n...             elt[2] = new_target\n... \n&gt;&gt;&gt; print(pandoc.write(doc)) # doctest: +NORMALIZE_WHITESPACE\n[Link to pandoc.org](https://pandoc.org \"Pandoc - About pandoc\")\n</code></pre>"},{"location":"cookbook/#attributes","title":"Attributes","text":"<p>The other most notable immutable type in documents is <code>Attr</code>:</p> <pre><code>&gt;&gt;&gt; Attr\nAttr = (Text, [Text], [(Text, Text)])\n</code></pre> <p><code>Attr</code> is composed of an identifier, a list of classes, and a list of key-value pairs. To transform <code>Attr</code> content, again the easiest way to proceed is to target their holders. Say that we want to add a class tag  that described the type of the pandoc element for every element which  is a <code>Attr</code> holder.  The relevant type signatures \u2013 we display all <code>Attr</code> holders \u2013 are:</p> <pre><code>&gt;&gt;&gt; Inline # doctest: +ELLIPSIS\nInline = ...\n       | Code(Attr, Text)\n       ...\n       | Link(Attr, [Inline], Target)\n       | Image(Attr, [Inline], Target)\n       ...\n       | Span(Attr, [Inline])\n</code></pre> <p>and </p> <pre><code>&gt;&gt;&gt; Block  # doctest: +ELLIPSIS\nBlock = ...\n      | CodeBlock(Attr, Text)\n      ...\n      | Header(Int, Attr, [Inline])\n      ...\n      | Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot)\n      ...\n      | Div(Attr, [Block])\n</code></pre> <p>So we need to target <code>Code</code>, <code>Link</code>, <code>Image</code>, <code>Span</code>, <code>Div</code>,<code>CodeBlock</code>, <code>Header</code>, <code>Table</code> and <code>Div</code> instances. <code>Header</code> is a special case here  since its attributes are its second item ; for every other type, the attributes come first. The transformation can be implemented as follows:</p> <pre><code>AttrHolder = (Code, Link, Image, Span, Div, CodeBlock, Header, Table, Div)\n\ndef add_class(doc):\n    for elt in pandoc.iter(doc):\n        if isinstance(elt, AttrHolder):\n            attr_index = 0 if not isinstance(elt, Header) else 1\n            identifier, classes, key_value_pairs = elt[attr_index]\n            typename = type(elt).__name__.lower()\n            classes.append(typename)\n</code></pre> <p>The transformation works as expected:</p> <pre><code>&gt;&gt;&gt; markdown = \"\"\"\n... # Pandoc {#pandoc}\n... [Link to pandoc.org](https://pandoc.org)\n... \"\"\"\n&gt;&gt;&gt; doc = pandoc.read(markdown)\n&gt;&gt;&gt; add_class(doc)\n&gt;&gt;&gt; print(pandoc.write(doc)) # doctest: +NORMALIZE_WHITESPACE\n# Pandoc {#pandoc .header}\n[Link to pandoc.org](https://pandoc.org){.link}\n</code></pre> <p>Note that here we can get away without changing the attribute tuple entirely because its mutability is shallow: while we cannot rebind the reference to its items, if these items are mutable they can still be changed in-place. Here precisely, <code>classes</code> cannot be rebound, but since it is mutable, its contents can be changed.</p> <p>If we want to change the element ids instead, we would need to use a new tuple. For example, to add the id <code>anonymous</code> to every attribute holder without identifier, we can do:</p> <pre><code>def add_id(doc):\n    for elt in pandoc.iter(doc):\n        if isinstance(elt, AttrHolder):\n            attr_index = 0 if not isinstance(elt, Header) else 1\n            identifier, classes, key_value_pairs = elt[attr_index]\n            if not identifier:\n                identifier = \"anonymous\"\n                elt[attr_index] = identifier, classes, key_value_pairs\n</code></pre> <p>and this transformation would result in:</p> <pre><code>&gt;&gt;&gt; add_id(doc)\n&gt;&gt;&gt; print(pandoc.write(doc)) # doctest: +NORMALIZE_WHITESPACE\n# Pandoc {#pandoc .header}\n[Link to pandoc.org](https://pandoc.org){#anonymous .link}\n</code></pre> <ol> <li> <p>such divs are used to include speaker notes into reveal.js presentations.\u00a0\u21a9</p> </li> <li> <p>or <code>elt</code> is <code>list(holder.items())[index]</code> if <code>holder</code> is a dict.\u00a0\u21a9</p> </li> <li> <p>These items would simply happen to share the same structure.    For example, this can happen with attributes:    since <code>Attr = (Text, [Text], [(Text, Text)])</code>,   the third component of every attribute \u2013 its list of key-value pairs \u2013    will contain some pairs of <code>Text</code> if it's not empty.\u00a0\u21a9</p> </li> </ol>"},{"location":"document/","title":"Document structure","text":"<pre><code>import pandoc\nfrom pandoc.types import *\n</code></pre>"},{"location":"document/#meta-model","title":"Meta-model","text":"<p>Pandoc models every document as a tree of elements. Each element has a well-defined type such as paragraph, image, note link, etc. and of  course the document type. These elements are combined using a well-defined set of rules which defines the document meta-model1.</p> <p>Pandoc can be used as a converter between different document formats; this usage requires very little knowledge about the document structure.  However, if one wishes to analyze, create or transform documents, some working knowledge of this meta-model becomes necessary.</p>"},{"location":"document/#haskell-python","title":"Haskell &amp; Python","text":"<p>The primary source of information about pandoc's meta-model is the hierarchy of types defined by the pandoc-types  Haskell package. The meta-model, represented by a collection of Haskell types, is described in the documentation of the <code>Text.Pandoc.Definition</code> module.</p> <p>However, this source of information requires some understanding of the Haskell programming language. The pandoc Python library brings to Python this hierarchy  of types; it also offers an alternate and interactive way to become familiar  with the meta-model. This is what we describe in the following sections.</p>"},{"location":"document/#documents","title":"Documents","text":""},{"location":"document/#explore","title":"Explore","text":"<p>The basic idea here is that you can create markdown documents that feature exactly the kind of document constructs that you are interested in, and then read them as pandoc documents to see how they look.  By construction, these documents converted from markdown will be valid,  i.e. consistent with the pandoc meta-model.  And since you can display them, it's a great way to build some understanding of how things work.</p> <p>For example, the plain text <code>\"Hello World!\"</code> is represented in the following manner:</p> <pre><code>&gt;&gt;&gt; text = \"Hello, World!\"\n&gt;&gt;&gt; doc = pandoc.read(text)\n&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Str('Hello,'), Space(), Str('World!')])])\n</code></pre> <p>We can see that this document is an instance of the <code>Pandoc</code> type, which contains some (empty) metadata and whose contents are a single  paragraph which contains strings and spaces.</p> <p>It's possible to explore interactively this document in a more precise manner:</p> <pre><code>&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Str('Hello,'), Space(), Str('World!')])])\n&gt;&gt;&gt; meta = doc[0]\n&gt;&gt;&gt; meta\nMeta({})\n&gt;&gt;&gt; meta[0]\n{}\n&gt;&gt;&gt; contents = doc[1]\n&gt;&gt;&gt; contents\n[Para([Str('Hello,'), Space(), Str('World!')])]\n&gt;&gt;&gt; paragraph = contents[0]\n&gt;&gt;&gt; paragraph\nPara([Str('Hello,'), Space(), Str('World!')])\n&gt;&gt;&gt; paragraph[0]\n[Str('Hello,'), Space(), Str('World!')]\n&gt;&gt;&gt; world = paragraph[0][2]\n&gt;&gt;&gt; world\nStr('World!')\n</code></pre> <p>I recommend that you try to reproduce the process above for small documents  that feature titles, headers, emphasized text, lists, etc. to become familiar  with the way that these constructs are described in pandoc documents.</p>"},{"location":"document/#create","title":"Create","text":"<p>At this stage, even if we have not yet described formally the meta-model,  we have already gathered enough knowledge to build a simple plain text document  from scratch.</p> <pre><code>&gt;&gt;&gt; text = [Str(\"Python\"), Space(), Str(\"&amp;\"), Space(), Str(\"Pandoc\")]\n&gt;&gt;&gt; paragraph = Para(text)\n&gt;&gt;&gt; metadata = Meta({})\n&gt;&gt;&gt; doc = Pandoc(metadata, [paragraph])\n</code></pre> <p>We can check that our document is valid and describes what we are expecting by converting it to markdown and displaying the result:</p> <pre><code>&gt;&gt;&gt; print(pandoc.write(doc)) # doctest: +NORMALIZE_WHITESPACE\nPython &amp; Pandoc\n</code></pre>"},{"location":"document/#types","title":"Types","text":""},{"location":"document/#explore_1","title":"Explore","text":"<p>The insights gathered in the previous sections were a good starting point to get a feel for the possible document structure. Now, to be certain that we always deal with valid documents, we need to explore the document meta-model  itself, i.e. the hierarchy of pandoc types, such as <code>Pandoc</code>, <code>Meta</code>, <code>Para</code>, <code>Str</code>, <code>Space</code>, etc. Luckily for us, these types are self-documented: in the Python interpreter  they are represented by a type signature. This signature described  how they can be constructed.</p> <p>For example, the top-level type <code>Pandoc</code> is represented as:</p> <pre><code>&gt;&gt;&gt; Pandoc\nPandoc(Meta, [Block])\n</code></pre> <p>which means that a <code>Pandoc</code> instance is defined by an instance of <code>Meta</code> (the document metadata) and a list of blocks. In our exemple above, the metadata was not very interesting: <code>Meta({})</code>. Still, we can make sure that this fragment is valid: the <code>Meta</code> type signature is</p> <pre><code>&gt;&gt;&gt; Meta\nMeta({Text: MetaValue})\n</code></pre> <p>which reads as: metadata instances contain a dictionary of <code>Text</code> keys and <code>MetaValue</code> values. In our example, this dictionary was empty, hence we don't need to explore the structure of <code>Text</code> and <code>MetaValue</code> any further to conclude that the fragment is valid.</p> <p>Now, let's explore the content of the document which is defined as a list of blocks. The <code>Block</code> type signature is</p> <pre><code>&gt;&gt;&gt; Block\nBlock = Plain([Inline])\n      | Para([Inline])\n      | LineBlock([[Inline]])\n      | CodeBlock(Attr, Text)\n      | RawBlock(Format, Text)\n      | BlockQuote([Block])\n      | OrderedList(ListAttributes, [[Block]])\n      | BulletList([[Block]])\n      | DefinitionList([([Inline], [[Block]])])\n      | Header(Int, Attr, [Inline])\n      | HorizontalRule()\n      | Table(Attr, Caption, [ColSpec], TableHead, [TableBody], TableFoot)\n      | Figure(Attr, Caption, [Block])\n      | Div(Attr, [Block])\n</code></pre> <p>Each <code>\"|\"</code> symbol in the signature represents an alternative: blocks are  either instances of <code>Plain</code> or <code>Para</code> or <code>LineBlock</code>, etc. In our example document, the only type of block that was used is the paragraph type <code>Para</code>, whose signature is:</p> <pre><code>&gt;&gt;&gt; Para\nPara([Inline])\n</code></pre> <p>Paragraphs contain a list of inlines. An inline is</p> <pre><code>&gt;&gt;&gt; Inline\nInline = Str(Text)\n       | Emph([Inline])\n       | Underline([Inline])\n       | Strong([Inline])\n       | Strikeout([Inline])\n       | Superscript([Inline])\n       | Subscript([Inline])\n       | SmallCaps([Inline])\n       | Quoted(QuoteType, [Inline])\n       | Cite([Citation], [Inline])\n       | Code(Attr, Text)\n       | Space()\n       | SoftBreak()\n       | LineBreak()\n       | Math(MathType, Text)\n       | RawInline(Format, Text)\n       | Link(Attr, [Inline], Target)\n       | Image(Attr, [Inline], Target)\n       | Note([Block])\n       | Span(Attr, [Inline])\n</code></pre> <p>In our plain text example, only two types of inlines where used: strings <code>Str</code> and white space <code>Space</code>. Since</p> <pre><code>&gt;&gt;&gt; Str\nStr(Text)\n&gt;&gt;&gt; Text\n&lt;class 'str'&gt;\n</code></pre> <p>we see that <code>Str</code> merely wraps an instance of <code>Text</code> which is simply a  synonym for the Python string type. On the other hand, the white space is a type without any content:</p> <pre><code>&gt;&gt;&gt; Space\nSpace()\n</code></pre> <p>We now have successfully discovered all pandoc types used in our simple \"Hello world!\" document. Again, I recommend that you reproduce this process  for all document constructs that you are interested in.</p>"},{"location":"document/#kinds-of-types","title":"Kinds of Types","text":"<p>The types defined in <code>pandoc.types</code> are either data types, typedefs or aliases  for Python built-ins.</p> <pre><code>&gt;&gt;&gt; from pandoc.types import *\n</code></pre> <p>The <code>Pandoc</code> type is an example of data type:</p> <pre><code>&gt;&gt;&gt; issubclass(Pandoc, Type)\nTrue\n&gt;&gt;&gt; issubclass(Pandoc, Data)\nTrue\n</code></pre> <p>Data types come in two flavors: abstract or concrete. The signature of abstract  data types lists the collection of concrete types they correspond to:</p> <pre><code>&gt;&gt;&gt; Inline # doctest: +ELLIPSIS\nInline = Str(Text)\n       | Emph([Inline])\n       | Underline([Inline])\n       | Strong([Inline])\n...\n&gt;&gt;&gt; issubclass(Inline, Type)\nTrue\n&gt;&gt;&gt; issubclass(Inline, Data)\nTrue\n</code></pre> <p>The concrete types on the right-hand side of this signature are constructor (concrete) types. The abstract type itself is not a constructor ;  it cannot be instantiated:</p> <pre><code>&gt;&gt;&gt; issubclass(Inline, Constructor)\nFalse\n&gt;&gt;&gt; Inline()\nTraceback (most recent call last):\n...\nTypeError: Can't instantiate abstract class Inline\n</code></pre> <p>The constructors associated to some abstract data type are concrete:</p> <pre><code>&gt;&gt;&gt; issubclass(Str, Type)\nTrue\n&gt;&gt;&gt; issubclass(Str, Data)\nTrue\n&gt;&gt;&gt; issubclass(Str, Constructor)\nTrue\n</code></pre> <p>They can be instantiated and the classic inheritance test apply:</p> <pre><code>&gt;&gt;&gt; string = Str(\"Hello\")\n&gt;&gt;&gt; isinstance(string, Str)\nTrue\n</code></pre> <p>Constructor types inherit from the corresponding abstract data type:</p> <pre><code>&gt;&gt;&gt; issubclass(Str, Inline)\nTrue\n&gt;&gt;&gt; isinstance(string, Inline)\nTrue\n</code></pre> <p>Typedefs are also another kind of abstract type. They are merely introduced so that we can name some constructs in the type hierarchy, but no instance of such types exist in documents. For example, consider  the <code>Attr</code> and <code>Target</code> types:</p> <pre><code>&gt;&gt;&gt; Attr\nAttr = (Text, [Text], [(Text, Text)])\n&gt;&gt;&gt; Target\nTarget = (Text, Text)\n</code></pre> <p>They are pandoc types which are not data types but typedefs:</p> <pre><code>&gt;&gt;&gt; issubclass(Attr, Type)\nTrue\n&gt;&gt;&gt; issubclass(Attr, Data)\nFalse\n&gt;&gt;&gt; issubclass(Attr, TypeDef)\nTrue\n&gt;&gt;&gt; issubclass(Target, Type)\nTrue\n&gt;&gt;&gt; issubclass(Target, Data)\nFalse\n&gt;&gt;&gt; issubclass(Target, TypeDef)\nTrue\n</code></pre> <p>They enable more compact and readable types signatures.  For example, with typedefs, the <code>Link</code> signature is:</p> <pre><code>&gt;&gt;&gt; Link\nLink(Attr, [Inline], Target)\n</code></pre> <p>instead of <code>Link((Text, [Text], [(Text, Text)]), [Inline], (Text, Text))</code> without them.</p> <p>To mimick closely the original Haskell type hierarchy, we also define aliases  for some Python primitive types. For example, the <code>Text</code> type used in the <code>Str</code>  data constructor is not a custom Pandoc type:</p> <pre><code>&gt;&gt;&gt; Str\nStr(Text)\n&gt;&gt;&gt; issubclass(Text, Type)\nFalse\n</code></pre> <p>Instead, it's a mere alias for the builtin Python string:</p> <pre><code>&gt;&gt;&gt; Text\n&lt;class 'str'&gt;\n</code></pre> <ol> <li> <p>A document model represents a given document. The document meta-model represents the document model itself, i.e. the set of all valid  documents.\u00a0\u21a9</p> </li> </ol>"},{"location":"examples/","title":"Examples","text":"<pre><code>import pandoc\nfrom pandoc.types import *\n</code></pre>"},{"location":"examples/#uppercase","title":"Uppercase","text":"<p>\ud83d\ude80 Change all text to upper case.</p> <pre><code>def uppercase(doc):\n    for elt in pandoc.iter(doc):\n        if isinstance(elt, Str):\n            elt[0] = elt[0].upper() # elt: Str(Text)\n</code></pre> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"Hello world!\")\n&gt;&gt;&gt; uppercase(doc)\n&gt;&gt;&gt; print(pandoc.write(doc).strip())\nHELLO WORLD!\n</code></pre>"},{"location":"examples/#de-emphasize","title":"De-emphasize","text":"<p>\ud83d\ude80 Turn emphasized text into normal text.</p> <pre><code>def de_emphasize(doc):\n    locations = []\n    for elt, path in pandoc.iter(doc, path=True):\n        if isinstance(elt, Emph):\n            holder, index = path[-1]\n            locations.append((elt, holder, index))\n    # Perform the change in reverse document order \n    # not to invalidate the remaining matches.\n    for elt, holder, index in reversed(locations):\n        assert isinstance(elt, Emph)\n        inlines = elt[0] # elt: Emph([Inline])\n        holder[index:index+1] = inlines\n</code></pre> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"**strong**, *emphasized*, normal\")\n&gt;&gt;&gt; de_emphasize(doc)\n&gt;&gt;&gt; print(pandoc.write(doc).strip())\n**strong**, emphasized, normal\n</code></pre> <p>This implementation will remove nested layers of emphasis:</p> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"0x _1x *2x*_\")\n&gt;&gt;&gt; de_emphasize(doc)\n&gt;&gt;&gt; print(pandoc.write(doc).strip())\n0x 1x 2x\n</code></pre> <p>To remove only one layer of emphasis instead (the outer layer),  we can filter out all elements that are already emphasized.</p> <pre><code>from math import inf\n\ndef de_emphasize(doc):\n    locations = []\n    depth = inf\n    for elt, path in pandoc.iter(doc, path=True):\n        if len(path) &lt;= depth: # not emphasized\n            depth = inf\n            if isinstance(elt, Emph):\n                holder, index = path[-1]\n                locations.append((elt, holder, index))\n                depth = len(path)\n    # Perform the change in reverse document order \n    # not to invalidate the remaining matches.\n    for elt, holder, index in reversed(locations):\n        assert isinstance(elt, Emph)\n        inlines = elt[0] # elt: Emph([Inline])\n        holder[index:index+1] = inlines\n</code></pre> <p>The behavior with simply emphasized items is unchanged:</p> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"**strong**, *emphasized*, normal\")\n&gt;&gt;&gt; de_emphasize(doc)\n&gt;&gt;&gt; print(pandoc.write(doc).strip())\n**strong**, emphasized, normal\n</code></pre> <p>but differs for multiply emphasized text:</p> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"0x _1x *2x*_\")\n&gt;&gt;&gt; de_emphasize(doc)\n&gt;&gt;&gt; print(pandoc.write(doc).strip())\n0x 1x *2x*\n</code></pre>"},{"location":"examples/#latex-theorems","title":"LaTeX theorems","text":"<p>\ud83d\ude80 Convert divs tagged as theorems into LaTeX theorems.</p> <p>First we need to detect this kind of divs:</p> <pre><code>def is_theorem(elt):\n    if isinstance(elt, Div):\n        attrs = elt[0] # elt: Div(Attr, [Block])\n        classes = attrs[1] # attrs: (Text, [Text], [(Text, Text)])\n        if \"theorem\" in classes:\n            return True\n    return False\n</code></pre> <p>Or equivalenty, with Python 3.10 (or newer), using pattern matching:</p> <pre><code>def is_theorem(elt):\n    match elt:\n        case Div((_, classes, _), _) if \"theorem\" in classes:\n            return True\n        case _:\n            return False\n</code></pre> <p>Now we can implement the transformation itself:</p> <pre><code>def LaTeX(text):\n    return RawBlock(Format(\"latex\"), text)\n</code></pre> <pre><code>def theoremize(doc):\n    for elt in pandoc.iter(doc):\n        if is_theorem(elt):\n            attr, blocks = elt # elt: Div(Attr, [Block])\n            id_ = attr[0] # attrs: (Text, [Text], [(Text, Text)])\n            label = r\"\\label{\" + id_ + \"}\" if id_ else \"\"\n            start_theorem = LaTeX(r'\\begin{theorem}' + label)\n            end_theorem   = LaTeX(r'\\end{theorem}')\n            blocks[:] = [start_theorem] + blocks + [end_theorem]\n</code></pre> <p>Here are the results:</p> <pre><code>markdown = r\"\"\"\n&lt;div id='cauchy-formula' class='theorem'&gt;\n$$f(z) = \\frac{1}{i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw$$\n&lt;/div&gt;\n\"\"\"\n</code></pre> <pre><code>&gt;&gt;&gt; doc = pandoc.read(markdown)\n&gt;&gt;&gt; print(pandoc.write(doc, format=\"latex\")) # doctest: +NORMALIZE_WHITESPACE\n\\phantomsection\\label{cauchy-formula}\n\\[f(z) = \\frac{1}{i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw\\]\n&gt;&gt;&gt; theoremize(doc)\n&gt;&gt;&gt; print(pandoc.write(doc, format=\"latex\")) # doctest: +NORMALIZE_WHITESPACE\n\\phantomsection\\label{cauchy-formula}\n\\begin{theorem}\\label{cauchy-formula}\n&lt;BLANKLINE&gt;\n\\[f(z) = \\frac{1}{i2\\pi} \\int \\frac{f(w)}{w-z}\\, dw\\]\n&lt;BLANKLINE&gt;\n\\end{theorem}\n</code></pre>"},{"location":"examples/#jupyter-notebooks","title":"Jupyter Notebooks","text":"<p>\ud83d\ude80 Transform a markdown document into a Jupyter notebook.</p> <p>\ud83d\udcd6 Reference: the notebook file format</p> <p>Jupyter notebook helpers (building blocks):</p> <pre><code>import copy\nimport uuid\n\ndef Notebook():\n    return {\n        \"nbformat\": 4,\n        \"nbformat_minor\": 5,\n        \"cells\": [],\n        \"metadata\": {},\n    }\n\ndef CodeCell():\n    return {\n        \"cell_type\": \"code\",\n        \"source\": [],\n        \"execution_count\": None,\n        \"outputs\": [],\n        \"id\": uuid.uuid4().hex,\n        \"metadata\": {},\n    }\n\ndef MarkdownCell(): \n    return {\n        \"cell_type\": \"markdown\",\n        \"source\": [],\n        \"id\": uuid.uuid4().hex,\n        \"metadata\": {},\n    }\n</code></pre> <p>The core transformation code:</p> <pre><code>def notebookify(doc):\n    notebook = Notebook()\n    cells = notebook[\"cells\"]\n    blocks = doc[1] # doc: Pandoc(Meta, [Block])\n    for block in blocks:\n        source, cell = None, None\n        if isinstance(block, CodeBlock):\n            source = block[1] # block: CodeBlock(Attr, Text)\n            cell = CodeCell()\n        else:\n            source = pandoc.write(block).strip()\n            cell = MarkdownCell()\n        cell[\"source\"] = source.splitlines(keepends=True)\n        cells.append(cell)\n    return notebook\n</code></pre> <pre><code>markdown = \"\"\"\n# Hello world!\nPrint `Hello world!`:\n\n    &gt;&gt;&gt; print(\"Hello world!\")\n\"\"\"\ndoc = pandoc.read(markdown)\n</code></pre> <pre><code>&gt;&gt;&gt; doc\nPandoc(Meta({}), [Header(1, ('hello-world', [], []), [Str('Hello'), Space(), Str('world!')]), Para([Str('Print'), Space(), Code(('', [], []), 'Hello world!'), Str(':')]), CodeBlock(('', [], []), '&gt;&gt;&gt; print(\"Hello world!\")')])\n&gt;&gt;&gt; ipynb = notebookify(doc)\n&gt;&gt;&gt; import pprint\n&gt;&gt;&gt; pprint.pprint(ipynb) # doctest: +ELLIPSIS\n{'cells': [{'cell_type': 'markdown',\n            'id': ...,\n            'metadata': {},\n            'source': ['# Hello world!']},\n           {'cell_type': 'markdown',\n            'id': ...,\n            'metadata': {},\n            'source': ['Print `Hello world!`:']},\n           {'cell_type': 'code',\n            'execution_count': None,\n            'id': ...,\n            'metadata': {},\n            'outputs': [],\n            'source': ['&gt;&gt;&gt; print(\"Hello world!\")']}],\n 'metadata': {},\n 'nbformat': 4,\n 'nbformat_minor': 5}\n</code></pre> <p>To use <code>notebookify</code> from the command-line we may create a <code>main</code> entry point:</p> <pre><code>import json\nfrom pathlib import Path\nimport sys\n\ndef main():\n    filename = sys.argv[1]\n    doc = pandoc.read(file=filename)\n    notebook = notebookify(doc)\n    ipynb = Path(filename).with_suffix(\".ipynb\")\n    with open(ipynb, \"w\", encoding=\"utf-8\") as output:\n        json.dump(notebook, output, ensure_ascii=False, indent=2)\n</code></pre> <p>If we specify on the command-line a (temporary) markdown file,  <code>main()</code> creates the corresponding notebook:</p> <pre><code>&gt;&gt;&gt; import tempfile\n&gt;&gt;&gt; with tempfile.TemporaryDirectory() as tmp_dir: # doctest: +ELLIPSIS\n...     md_path = Path(tmp_dir).joinpath(\"doc.md\")\n...     with open(md_path, \"w\", encoding=\"utf-8\") as md_file:\n...         _ = md_file.write(markdown)\n...     sys.argv[:] = [\"notebookify\", str(md_path)]\n...     main()\n...     with open(md_path.with_suffix(\".ipynb\"), encoding=\"utf-8\") as ipynb:\n...         pprint.pprint(json.load(ipynb))\n{'cells': [{'cell_type': 'markdown',\n            'id': ...,\n            'metadata': {},\n            'source': ['# Hello world!']},\n           {'cell_type': 'markdown',\n            'id': ...,\n            'metadata': {},\n            'source': ['Print `Hello world!`:']},\n           {'cell_type': 'code',\n            'execution_count': None,\n            'id': ...,\n            'metadata': {},\n            'outputs': [],\n            'source': ['&gt;&gt;&gt; print(\"Hello world!\")']}],\n 'metadata': {},\n 'nbformat': 4,\n 'nbformat_minor': 5}\n</code></pre>"},{"location":"getting-started/","title":"Getting started","text":"<p>Install Pandoc first, for example with conda:</p> <pre><code>$ conda install -c conda-forge pandoc\n</code></pre> <p>Then, install the Pandoc Python Library with pip:</p> <pre><code>$ pip install --upgrade pandoc\n</code></pre>"},{"location":"iteration/","title":"Containers and iteration","text":"<pre><code>import pandoc\nfrom pandoc.types import *\n</code></pre>"},{"location":"iteration/#container","title":"Container","text":"<p>All concrete1 Pandoc element (of type <code>Pandoc</code>, <code>Para</code>, <code>Str</code>, etc.) are list-like ; their items are the arguments passed to their constructor.  We present here several familiar methods to access this content.</p> <p>We illustrate this interface with the <code>\"Hello world!\"</code> document:</p> <pre><code>meta = Meta({})\nblocks = [Para([Str('Hello'), Space(), Str('world!')])]\ndoc = Pandoc(meta, blocks)\n</code></pre>"},{"location":"iteration/#random-access","title":"Random access","text":"<p>Indexing and slicing for this element work pretty much as in lists:</p> <pre><code>&gt;&gt;&gt; doc[0]\nMeta({})\n&gt;&gt;&gt; doc[1]\n[Para([Str('Hello'), Space(), Str('world!')])]\n&gt;&gt;&gt; meta, blocks = doc[:]\n&gt;&gt;&gt; meta\nMeta({})\n&gt;&gt;&gt; blocks\n[Para([Str('Hello'), Space(), Str('world!')])]\n</code></pre> <p>The same patterns apply to change the element contents:</p> <pre><code>&gt;&gt;&gt; maths = [Para([Math(InlineMath(), 'a=1')])]\n&gt;&gt;&gt; doc[1] = maths\n&gt;&gt;&gt; doc\nPandoc(Meta({}), [Para([Math(InlineMath(), 'a=1')])])\n&gt;&gt;&gt; meta = Meta({'title': MetaInlines([Str('Maths')])})\n&gt;&gt;&gt; doc[:] = meta, maths\n&gt;&gt;&gt; doc\nPandoc(Meta({'title': MetaInlines([Str('Maths')])}), [Para([Math(InlineMath(), 'a=1')])])\n</code></pre>"},{"location":"iteration/#length","title":"Length","text":"<p>The length of element is the number of items it contains. Here for <code>doc</code>, the <code>meta</code> and <code>blocks</code> arguments of its constructor:</p> <pre><code>&gt;&gt;&gt; len(doc)\n2\n&gt;&gt;&gt; len(doc) == len(doc[:])\nTrue\n</code></pre>"},{"location":"iteration/#equality","title":"Equality","text":"<p>Pandoc elements can be compared.  The equality test checks for equality of type,  then (recusively if needed) for equality of contents:</p> <pre><code>&gt;&gt;&gt; para = doc[1][0]\n&gt;&gt;&gt; para == Para([Math(InlineMath(), 'a=1')])\nTrue\n&gt;&gt;&gt; para == Para([Math(DisplayMath(), 'a=1')])\nFalse\n&gt;&gt;&gt; para == Para([Math(InlineMath(), 'a=2')])\nFalse\n</code></pre>"},{"location":"iteration/#membership","title":"Membership","text":"<p>A membership test \u2013 that leverages the equality test \u2013 is also available:</p> <pre><code>&gt;&gt;&gt; Meta({}) in doc\nFalse\n&gt;&gt;&gt; Meta({'title': MetaInlines([Str('Maths')])}) in doc\nTrue\n</code></pre>"},{"location":"iteration/#iteration","title":"Iteration","text":"<p>All pandoc item can be iterated. Consider</p> <pre><code>doc = pandoc.read(\"Hello world!\")\n</code></pre> <p>We have:</p> <pre><code>&gt;&gt;&gt; for elt in doc:\n...     print(elt)\nMeta({})\n[Para([Str('Hello'), Space(), Str('world!')])]\n&gt;&gt;&gt; meta, blocks = doc[:]\n&gt;&gt;&gt; for elt in meta:\n...     print(elt)\n{}\n&gt;&gt;&gt; para = blocks[0]\n&gt;&gt;&gt; for elt in para:\n...     print(elt)\n[Str('Hello'), Space(), Str('world!')]\n&gt;&gt;&gt; world = para[0][2]\n&gt;&gt;&gt; for elt in world:\n...      print(elt)\nworld!\n</code></pre>"},{"location":"iteration/#pattern-matching","title":"Pattern matching","text":"<p>With Python 3.10 (or newer), pattern matching can be used for every Pandoc element:</p> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"Hello world!\")\n&gt;&gt;&gt; match doc:\n...     case Pandoc(Meta(meta), [Para(inlines)]):\n...         assert meta == {}\n...         print(inlines)\n[Str('Hello'), Space(), Str('world!')]\n</code></pre>"},{"location":"iteration/#tree-iteration","title":"Tree Iteration","text":""},{"location":"iteration/#depth-first-traversal","title":"Depth-first traversal","text":"<p>Python's built-in <code>iter</code> \u2013 which is used implicitly in the for loops \u2013  yields the children of the pandoc element, that is the arguments  that were given to its constructor ; it is non-recursive: the contents of these children are not explored. </p> <p>On the contrary, <code>pandoc.iter</code> iterates a pandoc item recursively,  in document order. It performs a (preoder) depth-first traversal: the iteration first yields the element given as argument to <code>pandoc.iter</code> (the root), then its first child (if any), then the first child of this child  (if any), etc. recursively, before it yields the second child of the root (if any), then the first child of this child, etc.</p> <p>For example, with the following document</p> <pre><code>&gt;&gt;&gt; doc = pandoc.read(\"\"\"\n... # Title\n... Content\n... \"\"\")\n&gt;&gt;&gt; doc\nPandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])\n</code></pre> <p>we have on one hand</p> <pre><code>&gt;&gt;&gt; for elt in iter(doc):\n...     print(elt)\nMeta({})\n[Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]\n</code></pre> <p>and on the other hand</p> <pre><code>&gt;&gt;&gt; for elt in pandoc.iter(doc):\n...     print(elt)\nPandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])\nMeta({})\n{}\n[Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]\nHeader(1, ('title', [], []), [Str('Title')])\n1\n('title', [], [])\ntitle\n[]\n[]\n[Str('Title')]\nStr('Title')\nTitle\nPara([Str('Content')])\n[Str('Content')]\nStr('Content')\nContent\n</code></pre>"},{"location":"iteration/#python-built-in-types","title":"Python built-in types","text":""},{"location":"iteration/#numbers","title":"Numbers","text":"<p>Tree iteration can be applied to Python builts-in types, including those which are not usually considered containers and thus are not iterable with the built-in <code>iter</code> function. The <code>Bool</code>, <code>Int</code> and <code>Double</code> primitive types (that is <code>bool</code>, <code>int</code> and <code>float</code>) fall in this case:</p> <pre><code>&gt;&gt;&gt; assert isinstance(True, Bool)\n&gt;&gt;&gt; iter(True)\nTraceback (most recent call last):\n...\nTypeError: 'bool' object is not iterable\n</code></pre> <pre><code>&gt;&gt;&gt; assert isinstance(1, Int)\n&gt;&gt;&gt; iter(1)\nTraceback (most recent call last):\n...\nTypeError: 'int' object is not iterable\n</code></pre> <pre><code>&gt;&gt;&gt; assert isinstance(3.14, Double)\n&gt;&gt;&gt; iter(3.14)\nTraceback (most recent call last):\n...\nTypeError: 'float' object is not iterable\n</code></pre> <p>Since these elements have no child, tree iteration will only yield the elements themselves:</p> <pre><code>&gt;&gt;&gt; for elt in pandoc.iter(True):\n...     print(elt)\nTrue\n&gt;&gt;&gt; for elt in pandoc.iter(1):\n...     print(elt)\n1\n&gt;&gt;&gt; for elt in pandoc.iter(3.14):\n...     print(elt)\n3.14\n</code></pre>"},{"location":"iteration/#strings","title":"Strings","text":"<p>Python strings are iterable, but in the context of tree iteration, we consider them as atomic objects like booleans, integers and doubles. Thus <code>pandoc.iter</code>  will not iterate on characters like the built-in <code>iter</code> function:</p> <pre><code>&gt;&gt;&gt; isinstance(\"Hello!\", Text)\nTrue\n&gt;&gt;&gt; for elt in \"Hello!\":\n...     print(elt)\nH\ne\nl\nl\no\n!\n&gt;&gt;&gt; for elt in pandoc.iter(\"Hello!\"):\n...     print(elt)\nHello!\n</code></pre>"},{"location":"iteration/#tuples-lists-dicts","title":"Tuples, lists, dicts","text":"<p>Tree iteration for tuples holds no surprise:</p> <pre><code>&gt;&gt;&gt; elts = (1, (2, 3))\n&gt;&gt;&gt; for elt in elts:\n...     print(elt)\n1\n(2, 3)\n&gt;&gt;&gt; for elt in pandoc.iter(elts):\n...     print(elt)\n(1, (2, 3))\n1\n(2, 3)\n2\n3\n</code></pre> <p>List iteration is very similar:</p> <pre><code>&gt;&gt;&gt; elts = [1, [2, 3]]\n&gt;&gt;&gt; for elt in elts:\n...     print(elt)\n1\n[2, 3]\n&gt;&gt;&gt; for elt in pandoc.iter(elts):\n...     print(elt)\n[1, [2, 3]]\n1\n[2, 3]\n2\n3\n</code></pre> <p>For maps/dicts, tree iteration combine recursivity and iteration on key-value pairs, while standard iteration is flat and iterates on keys only. In other words, tree iteration adds recursivity to the dict <code>items</code> iterator:</p> <pre><code>&gt;&gt;&gt; elts = {\"a\": True, \"b\": [1, 2]}\n&gt;&gt;&gt; for elt in elts:\n...     print(elt)\na\nb\n&gt;&gt;&gt; for elt in elts.items():\n...     print(elt)\n('a', True)\n('b', [1, 2])\n&gt;&gt;&gt; for elt in pandoc.iter(elts):\n...     print(elt)\n{'a': True, 'b': [1, 2]}\n('a', True)\na\nTrue\n('b', [1, 2])\nb\n[1, 2]\n1\n2\n</code></pre>"},{"location":"iteration/#path","title":"Path","text":""},{"location":"iteration/#principles","title":"Principles","text":"<p>The function <code>pandoc.iter</code> accepts an optional boolean argument <code>path</code>. When it is set to <code>True</code>, the iteration returns <code>elt, path</code> pairs. In this pair, <code>elt</code> is equal to what the iteration with <code>path</code> set to <code>False</code> would have yielded and <code>path</code> contains additional  information about the location of <code>elt</code> in the iteration root.</p> <p>Path is a list of <code>(holder, i)</code> pairs which is not empty unless <code>elt</code> is <code>root</code> and such that:</p> <ul> <li> <p>the first holder in the path is the root of the iteration,</p> </li> <li> <p>the i-th item in holder is the next holder in the path ...</p> </li> <li> <p>or <code>elt</code> if we are at the end of the path.</p> </li> </ul> <p>Here i-th item in holder should be understood as <code>holder[i]</code> unless <code>holder</code> is a dict. In this special case, it would be its i-th key-value pair:</p> <pre><code>def getitem(elt, i):\n    if isinstance(elt, dict):\n        elt = elt.items()\n    return elt[i]\n</code></pre> <p>In any case, the following assertion is always valid:</p> <pre><code>def check(root, elt, path):\n    if path == []:\n        assert elt is root\n    else:\n        assert path[0][0] is root\n        for i, (holder, index) in enumerate(path):\n            next_elt = getitem(holder, index)\n            if i &lt; len(path) - 1:\n                assert next_elt is path[i+1][0]\n            else:\n                assert next_elt is elt\n</code></pre> <p>And indeed, if we consider the following document:</p> <pre><code>doc = pandoc.read(\"\"\"\n# Title\nContent\n\"\"\")\n</code></pre> <p>the check works at any level:</p> <pre><code>&gt;&gt;&gt; for elt, path in pandoc.iter(doc, path=True):\n...     check(doc, elt, path)\n</code></pre>"},{"location":"iteration/#use-cases","title":"Use cases","text":"<p>The length of <code>path</code> provides the depth of <code>elt</code> with respect to the root:</p> <pre><code>&gt;&gt;&gt; for elt, path in pandoc.iter(doc, path=True):\n...     print(f\"{len(path)} - {elt!r}\")\n0 - Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])\n1 - Meta({})\n2 - {}\n1 - [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]\n2 - Header(1, ('title', [], []), [Str('Title')])\n3 - 1\n3 - ('title', [], [])\n4 - 'title'\n4 - []\n4 - []\n3 - [Str('Title')]\n4 - Str('Title')\n5 - 'Title'\n2 - Para([Str('Content')])\n3 - [Str('Content')]\n4 - Str('Content')\n5 - 'Content'\n</code></pre> <p>The latest item of <code>path</code> provides the parent of the current element and its index in this parent:</p> <pre><code>&gt;&gt;&gt; for elt, path in pandoc.iter(doc, path=True):\n...     try:\n...         holder, index = path[-1]\n...         print(f\"{elt!r} == {holder!r}[{index}]\")\n...     except IndexError:\n...         assert elt is doc\nMeta({}) == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])[0]\n{} == Meta({})[0]\n[Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])] == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])[1]\nHeader(1, ('title', [], []), [Str('Title')]) == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])][0]\n1 == Header(1, ('title', [], []), [Str('Title')])[0]\n('title', [], []) == Header(1, ('title', [], []), [Str('Title')])[1]\n'title' == ('title', [], [])[0]\n[] == ('title', [], [])[1]\n[] == ('title', [], [])[2]\n[Str('Title')] == Header(1, ('title', [], []), [Str('Title')])[2]\nStr('Title') == [Str('Title')][0]\n'Title' == Str('Title')[0]\nPara([Str('Content')]) == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])][1]\n[Str('Content')] == Para([Str('Content')])[0]\nStr('Content') == [Str('Content')][0]\n'Content' == Str('Content')[0]\n</code></pre> <p>Grand-parents are available in the previous path items, all the way up to the root, allowing us to locate the current element with respect to the root if needed:</p> <pre><code>&gt;&gt;&gt; for elt, path in pandoc.iter(doc, path=True):\n...     indices = [i for holder, i in path]\n...     z = \"\".join(f\"[{i}]\" for i in indices)\n...     print(f\"doc{z} == {elt!r}\")\ndoc == Pandoc(Meta({}), [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])])\ndoc[0] == Meta({})\ndoc[0][0] == {}\ndoc[1] == [Header(1, ('title', [], []), [Str('Title')]), Para([Str('Content')])]\ndoc[1][0] == Header(1, ('title', [], []), [Str('Title')])\ndoc[1][0][0] == 1\ndoc[1][0][1] == ('title', [], [])\ndoc[1][0][1][0] == 'title'\ndoc[1][0][1][1] == []\ndoc[1][0][1][2] == []\ndoc[1][0][2] == [Str('Title')]\ndoc[1][0][2][0] == Str('Title')\ndoc[1][0][2][0][0] == 'Title'\ndoc[1][1] == Para([Str('Content')])\ndoc[1][1][0] == [Str('Content')]\ndoc[1][1][0][0] == Str('Content')\ndoc[1][1][0][0][0] == 'Content'\n</code></pre> <ol> <li> <p>any custom pandoc type that can be instantiated. If needed, refer to the kind of types section of the documentation for additional explanations.\u00a0\u21a9</p> </li> </ol>"},{"location":"labs/","title":"Labs \ud83e\uddea","text":"<p>Warning</p> <p>The <code>pandoc.labs</code> module is an experiment ; its interface is highly unstable. Don't build anything serious on top of it!</p> <pre><code>import pandoc\nfrom pandoc.types import *\nfrom pandoc.labs import *\n</code></pre> <pre><code>HELLOWORLD_DOC = pandoc.read(\"Hello world!\")\n</code></pre> <pre><code>from urllib.request import urlopen\nPATH = \"raw.githubusercontent.com/commonmark/commonmark-spec\"\nHASH = \"499ebbad90163881f51498c4c620652d0c66fb2e\" # pinned version\nURL = f\"https://{PATH}/{HASH}/spec.txt\"\nCOMMONMARK_SPEC = urlopen(URL).read().decode(\"utf-8\")\nCOMMONMARK_DOC = pandoc.read(COMMONMARK_SPEC)\n</code></pre> <pre><code>&gt;&gt;&gt; HELLOWORLD_DOC\nPandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n&gt;&gt;&gt; query(HELLOWORLD_DOC)\n- Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre> <p>TODO. Explain what query does: a collection which  stores single or multiple document elements on which parallel operations  can be applied and that \"automagically\" know their location within the root  document. Also \"no-failure\" flavor (operations don't fail, they return the empty collection)</p> <pre><code>&gt;&gt;&gt; q = query(HELLOWORLD_DOC)\n</code></pre> <pre><code>&gt;&gt;&gt; isinstance(q, Query)\nTrue\n</code></pre> <p>TODO: consider a change of name for <code>Query</code>: <code>Results</code>, <code>Match</code>, <code>Collection</code>, etc?</p> <p>At this stage, the query only contains the document itself.</p> <pre><code>&gt;&gt;&gt; q\n- Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n</code></pre>"},{"location":"labs/#search-by-type","title":"Search by type","text":"<p>The <code>find</code> method allows to select items within the initial collection. To begin with, we can search items by type:</p> <pre><code>&gt;&gt;&gt; q.find(Meta)\n- Meta({})\n&gt;&gt;&gt; q.find(Para)\n- Para([Str('Hello'), Space(), Str('world!')])\n</code></pre> <p>Abstract types can also be used:</p> <pre><code>&gt;&gt;&gt; q.find(Block)\n- Para([Str('Hello'), Space(), Str('world!')])\n&gt;&gt;&gt; q.find(Inline)\n- Str('Hello')\n- Space()\n- Str('world!')\n</code></pre> <p>To find all pandoc elements:</p> <pre><code>&gt;&gt;&gt; q.find(Type)\n- Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n- Meta({})\n- Para([Str('Hello'), Space(), Str('world!')])\n- Str('Hello')\n- Space()\n- Str('world!')\n</code></pre> <p>Finding python builtin types works too:</p> <pre><code>&gt;&gt;&gt; q.find(dict)\n- {}\n&gt;&gt;&gt; q.find(list)\n- [Para([Str('Hello'), Space(), Str('world!')])]\n- [Str('Hello'), Space(), Str('world!')]\n&gt;&gt;&gt; q.find(str)\n- 'Hello'\n- 'world!'\n</code></pre> <p>To get every possible item, in document order, we can search for Python objects:</p> <pre><code>&gt;&gt;&gt; q.find(object)\n- Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n- Meta({})\n- {}\n- [Para([Str('Hello'), Space(), Str('world!')])]\n- Para([Str('Hello'), Space(), Str('world!')])\n- [Str('Hello'), Space(), Str('world!')]\n- Str('Hello')\n- 'Hello'\n- Space()\n- Str('world!')\n- 'world!'\n</code></pre>"},{"location":"labs/#selectors","title":"Selectors","text":"<p>Types are not the only possible selectors. Predicates -- functions that take a pandoc element and return a boolean value -- can be used too:</p> <pre><code>&gt;&gt;&gt; def startswith_H(elt):\n...     return isinstance(elt, Str) and elt[0].startswith(\"H\")\n... \n&gt;&gt;&gt; q.find(startswith_H)\n- Str('Hello')\n</code></pre> <p>You can use predicate to define and select \"virtual types\" in a document. For example,</p> <pre><code>def AttrHolder(elt):\n    return isinstance(elt, (Code, Link, Image, Span, Div, CodeBlock, Header, Table))\n</code></pre> <p>TODO: match by attributes (id, classes, key-values); use keyword arguments  in find with \"or\" semantics for lists; allow for predicates. For key values match, match for key existence, key-value pair, predicate as a whole or just for value.</p>"},{"location":"labs/#combine-requirements","title":"Combine requirements","text":"<p>We can search for items that match one of several conditions: <pre><code>&gt;&gt;&gt; q.find(Str, Space)\n- Str('Hello')\n- Space()\n- Str('world!')\n</code></pre></p> <p>If the list of arguments is empty, everything is a match: <pre><code>&gt;&gt;&gt; q.find()\n- Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n- Meta({})\n- {}\n- [Para([Str('Hello'), Space(), Str('world!')])]\n- Para([Str('Hello'), Space(), Str('world!')])\n- [Str('Hello'), Space(), Str('world!')]\n- Str('Hello')\n- 'Hello'\n- Space()\n- Str('world!')\n- 'world!'\n</code></pre> In a boolean context, a query with no results is considered <code>False</code></p> <pre><code>&gt;&gt;&gt; bool(q.find(float))\nFalse\n&gt;&gt;&gt; if not q.find(float):\n...     print(\"no result\")\nno result\n</code></pre> <p>To add match several conditions at once, the <code>filter</code> method can be used:</p> <p><pre><code>&gt;&gt;&gt; q.find(Inline).filter(Str)\n- Str('Hello')\n- Str('world!')\n</code></pre> The <code>filter</code> method can be used implicitly: a query is callable <pre><code>&gt;&gt;&gt; q.find(Inline)(Str)\n- Str('Hello')\n- Str('world!')\n</code></pre></p> <p>We can also match the negation of a condition</p> <pre><code>&gt;&gt;&gt; q.find(Inline)(not_(Space))\n- Str('Hello')\n- Str('world!')\n</code></pre>"},{"location":"labs/#navigation","title":"Navigation","text":"<p>TODO. Parent, children, next, previous, next_sibling, previous_sibling.</p> <pre><code>&gt;&gt;&gt; q\n- Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n&gt;&gt;&gt; q.next\n- Meta({})\n&gt;&gt;&gt; q.next.next\n- {}\n&gt;&gt;&gt; q.next.next.next\n- [Para([Str('Hello'), Space(), Str('world!')])]\n&gt;&gt;&gt; q.next.next.next.next\n- Para([Str('Hello'), Space(), Str('world!')])\n&gt;&gt;&gt; q.next.next.next.next.next\n- [Str('Hello'), Space(), Str('world!')]\n&gt;&gt;&gt; q.next.next.next.next.next.next\n- Str('Hello')\n&gt;&gt;&gt; q.next.next.next.next.next.next.next\n- 'Hello'\n&gt;&gt;&gt; q.next.next.next.next.next.next.next.next\n- Space()\n&gt;&gt;&gt; q.next.next.next.next.next.next.next.next.next\n- Str('world!')\n&gt;&gt;&gt; q.next.next.next.next.next.next.next.next.next.next\n- 'world!'\n&gt;&gt;&gt; q.next.next.next.next.next.next.next.next.next.next.next\n&lt;BLANKLINE&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; q.find(str)\n- 'Hello'\n- 'world!'\n&gt;&gt;&gt; q.find(str)[1]\n- 'world!'\n&gt;&gt;&gt; w = q.find(str)[1]\n&gt;&gt;&gt; w.previous\n- Str('world!')\n&gt;&gt;&gt; w.previous.previous\n- Space()\n&gt;&gt;&gt; w.previous.previous.previous\n- 'Hello'\n&gt;&gt;&gt; w.previous.previous.previous.previous\n- Str('Hello')\n&gt;&gt;&gt; w.previous.previous.previous.previous.previous\n- [Str('Hello'), Space(), Str('world!')]\n&gt;&gt;&gt; w.previous.previous.previous.previous.previous.previous\n- Para([Str('Hello'), Space(), Str('world!')])\n&gt;&gt;&gt; w.previous.previous.previous.previous.previous.previous.previous\n- [Para([Str('Hello'), Space(), Str('world!')])]\n&gt;&gt;&gt; w.previous.previous.previous.previous.previous.previous.previous.previous\n- {}\n&gt;&gt;&gt; w.previous.previous.previous.previous.previous.previous.previous.previous.previous\n- Meta({})\n&gt;&gt;&gt; w.previous.previous.previous.previous.previous.previous.previous.previous.previous.previous\n- Pandoc(Meta({}), [Para([Str('Hello'), Space(), Str('world!')])])\n&gt;&gt;&gt; w.previous.previous.previous.previous.previous.previous.previous.previous.previous.previous.previous\n&lt;BLANKLINE&gt;\n</code></pre> <p>Nota: finding lists of inlines is difficult; finding non-empty lists of inlines is easy, but empty lists is harder, we need to use some knowledge of the type hierarchy.</p>"},{"location":"markdown/","title":"Pandoc's Markdown","text":"<p>Source: https://raw.githubusercontent.com/jgm/pandoc/3.1.1/MANUAL.txt</p> <p>Pandoc understands an extended and slightly revised version of John Gruber's Markdown syntax. This document explains the syntax, noting differences from original Markdown. Except where noted, these differences can be suppressed by using the <code>markdown_strict</code> format instead of <code>markdown</code>. Extensions can be enabled or disabled to specify the behavior more granularly. They are described in the following. See also Extensions above, for extensions that work also on other formats.</p>"},{"location":"markdown/#philosophy","title":"Philosophy","text":"<p>Markdown is designed to be easy to write, and, even more importantly, easy to read:</p> <p>A Markdown-formatted document should be publishable as-is, as plain text, without looking like it's been marked up with tags or formatting instructions. -- John Gruber</p> <p>This principle has guided pandoc's decisions in finding syntax for tables, footnotes, and other extensions.</p> <p>There is, however, one respect in which pandoc's aims are different from the original aims of Markdown. Whereas Markdown was originally designed with HTML generation in mind, pandoc is designed for multiple output formats. Thus, while pandoc allows the embedding of raw HTML, it discourages it, and provides other, non-HTMLish ways of representing important document elements like definition lists, tables, mathematics, and footnotes.</p>"},{"location":"markdown/#paragraphs","title":"Paragraphs","text":"<p>A paragraph is one or more lines of text followed by one or more blank lines. Newlines are treated as spaces, so you can reflow your paragraphs as you like. If you need a hard line break, put two or more spaces at the end of a line.</p>"},{"location":"markdown/#extension-escaped_line_breaks","title":"Extension: <code>escaped_line_breaks</code>","text":"<p>A backslash followed by a newline is also a hard line break. Note: in multiline and grid table cells, this is the only way to create a hard line break, since trailing spaces in the cells are ignored.</p>"},{"location":"markdown/#headings","title":"Headings","text":"<p>There are two kinds of headings: Setext and ATX.</p>"},{"location":"markdown/#setext-style-headings","title":"Setext-style headings","text":"<p>A setext-style heading is a line of text \"underlined\" with a row of <code>=</code> signs (for a level-one heading) or <code>-</code> signs (for a level-two heading):</p> MarkdownPython <pre><code>A level-one heading\n===================\n\nA level-two heading\n-------------------\n</code></pre> <pre><code>Pandoc(Meta({}), [Header(1, ('a-level-one-heading', [], []), [Str('A'), Space(), Str('level-one'), Space(), Str('heading')]), Header(2, ('a-level-two-heading', [], []), [Str('A'), Space(), Str('level-two'), Space(), Str('heading')])])\n</code></pre> <p>The heading text can contain inline formatting, such as emphasis (see Inline formatting, below).</p>"},{"location":"markdown/#atx-style-headings","title":"ATX-style headings","text":"<p>An ATX-style heading consists of one to six <code>#</code> signs and a line of text, optionally followed by any number of <code>#</code> signs. The number of <code>#</code> signs at the beginning of the line is the heading level:</p> MarkdownPython <pre><code>## A level-two heading\n\n### A level-three heading ###\n</code></pre> <pre><code>Pandoc(Meta({}), [Header(2, ('a-level-two-heading', [], []), [Str('A'), Space(), Str('level-two'), Space(), Str('heading')]), Header(3, ('a-level-three-heading', [], []), [Str('A'), Space(), Str('level-three'), Space(), Str('heading')])])\n</code></pre> <p>As with setext-style headings, the heading text can contain formatting:</p> MarkdownPython <pre><code># A level-one heading with a [link](/url) and *emphasis*\n</code></pre> <pre><code>Pandoc(Meta({}), [Header(1, ('a-level-one-heading-with-a-link-and-emphasis', [], []), [Str('A'), Space(), Str('level-one'), Space(), Str('heading'), Space(), Str('with'), Space(), Str('a'), Space(), Link(('', [], []), [Str('link')], ('/url', '')), Space(), Str('and'), Space(), Emph([Str('emphasis')])])])\n</code></pre>"},{"location":"markdown/#extension-blank_before_header","title":"Extension: <code>blank_before_header</code>","text":"<p>Original Markdown syntax does not require a blank line before a heading. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a <code>#</code> to end up at the beginning of a line by accident (perhaps through line wrapping). Consider, for example:</p> MarkdownPython <pre><code>I like several of their flavors of ice cream:\n#22, for example, and #5.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('I'), Space(), Str('like'), Space(), Str('several'), Space(), Str('of'), Space(), Str('their'), Space(), Str('flavors'), Space(), Str('of'), Space(), Str('ice'), Space(), Str('cream:'), SoftBreak(), Str('#22,'), Space(), Str('for'), Space(), Str('example,'), Space(), Str('and'), Space(), Str('#5.')])])\n</code></pre>"},{"location":"markdown/#extension-space_in_atx_header","title":"Extension: <code>space_in_atx_header</code>","text":"<p>Many Markdown implementations do not require a space between the opening <code>#</code>s of an ATX heading and the heading text, so that <code>#5 bolt</code> and <code>#hashtag</code> count as headings. With this extension, pandoc does require the space.</p>"},{"location":"markdown/#heading-identifiers","title":"Heading identifiers","text":"<p>See also the <code>auto_identifiers</code> extension above.</p>"},{"location":"markdown/#extension-header_attributes","title":"Extension: <code>header_attributes</code>","text":"<p>Headings can be assigned attributes using this syntax at the end of the line containing the heading text:</p> MarkdownPython <pre><code>{#identifier .class .class key=value key=value}\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('{#identifier'), Space(), Str('.class'), Space(), Str('.class'), Space(), Str('key=value'), Space(), Str('key=value}')])])\n</code></pre> <p>Thus, for example, the following headings will all be assigned the identifier <code>foo</code>:</p> MarkdownPython <pre><code># My heading {#foo}\n\n## My heading ##    {#foo}\n\nMy other heading   {#foo}\n---------------\n</code></pre> <pre><code>Pandoc(Meta({}), [Header(1, ('foo', [], []), [Str('My'), Space(), Str('heading')]), Header(2, ('foo', [], []), [Str('My'), Space(), Str('heading')]), Header(2, ('foo', [], []), [Str('My'), Space(), Str('other'), Space(), Str('heading')])])\n</code></pre> <p>(This syntax is compatible with PHP Markdown Extra.)</p> <p>Note that although this syntax allows assignment of classes and key/value attributes, writers generally don't use all of this information. Identifiers, classes, and key/value attributes are used in HTML and HTML-based formats such as EPUB and slidy. Identifiers are used for labels and link anchors in the LaTeX, ConTeXt, Textile, Jira markup, and AsciiDoc writers.</p> <p>Headings with the class <code>unnumbered</code> will not be numbered, even if <code>--number-sections</code> is specified. A single hyphen (<code>-</code>) in an attribute context is equivalent to <code>.unnumbered</code>, and preferable in non-English documents. So,</p> MarkdownPython <pre><code># My heading {-}\n</code></pre> <pre><code>Pandoc(Meta({}), [Header(1, ('my-heading', ['unnumbered'], []), [Str('My'), Space(), Str('heading')])])\n</code></pre> <p>is just the same as</p> MarkdownPython <pre><code># My heading {.unnumbered}\n</code></pre> <pre><code>Pandoc(Meta({}), [Header(1, ('my-heading', ['unnumbered'], []), [Str('My'), Space(), Str('heading')])])\n</code></pre> <p>If the <code>unlisted</code> class is present in addition to <code>unnumbered</code>, the heading will not be included in a table of contents. (Currently this feature is only implemented for certain formats: those based on LaTeX and HTML, PowerPoint, and RTF.)</p>"},{"location":"markdown/#extension-implicit_header_references","title":"Extension: <code>implicit_header_references</code>","text":"<p>Pandoc behaves as if reference links have been defined for each heading. So, to link to a heading</p> MarkdownPython <pre><code># Heading identifiers in HTML\n</code></pre> <pre><code>Pandoc(Meta({}), [Header(1, ('heading-identifiers-in-html', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')])])\n</code></pre> <p>you can simply write</p> MarkdownPython <pre><code>[Heading identifiers in HTML]\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('[Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML]')])])\n</code></pre> <p>or</p> MarkdownPython <pre><code>[Heading identifiers in HTML][]\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('[Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML][]')])])\n</code></pre> <p>or</p> MarkdownPython <pre><code>[the section on heading identifiers][heading identifiers in\nHTML]\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('[the'), Space(), Str('section'), Space(), Str('on'), Space(), Str('heading'), Space(), Str('identifiers][heading'), Space(), Str('identifiers'), Space(), Str('in'), SoftBreak(), Str('HTML]')])])\n</code></pre> <p>instead of giving the identifier explicitly:</p> MarkdownPython <pre><code>[Heading identifiers in HTML](#heading-identifiers-in-html)\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Link(('', [], []), [Str('Heading'), Space(), Str('identifiers'), Space(), Str('in'), Space(), Str('HTML')], ('#heading-identifiers-in-html', ''))])])\n</code></pre> <p>If there are multiple headings with identical text, the corresponding reference will link to the first one only, and you will need to use explicit links to link to the others, as described above.</p> <p>Like regular reference links, these references are case-insensitive.</p> <p>Explicit link reference definitions always take priority over implicit heading references. So, in the following example, the link will point to <code>bar</code>, not to <code>#foo</code>:</p> MarkdownPython <pre><code># Foo\n\n[foo]: bar\n\nSee [foo]\n</code></pre> <pre><code>Pandoc(Meta({}), [Header(1, ('foo', [], []), [Str('Foo')]), Para([Str('See'), Space(), Link(('', [], []), [Str('foo')], ('bar', ''))])])\n</code></pre>"},{"location":"markdown/#block-quotations","title":"Block quotations","text":"<p>Markdown uses email conventions for quoting blocks of text. A block quotation is one or more paragraphs or other block elements (such as lists or headings), with each line preceded by a <code>&gt;</code> character and an optional space. (The <code>&gt;</code> need not start at the left margin, but it should not be indented more than three spaces.)</p> MarkdownPython <pre><code>&gt; This is a block quote. This\n&gt; paragraph has two lines.\n&gt;\n&gt; 1. This is a list inside a block quote.\n&gt; 2. Second item.\n</code></pre> <pre><code>Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), Space(), Str('This'), SoftBreak(), Str('paragraph'), Space(), Str('has'), Space(), Str('two'), Space(), Str('lines.')]), OrderedList((1, Decimal(), Period()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('list'), Space(), Str('inside'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])], [Plain([Str('Second'), Space(), Str('item.')])]])])])\n</code></pre> <p>A \"lazy\" form, which requires the <code>&gt;</code> character only on the first line of each block, is also allowed:</p> MarkdownPython <pre><code>&gt; This is a block quote. This\nparagraph has two lines.\n\n&gt; 1. This is a list inside a block quote.\n2. Second item.\n</code></pre> <pre><code>Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), Space(), Str('This'), SoftBreak(), Str('paragraph'), Space(), Str('has'), Space(), Str('two'), Space(), Str('lines.')])]), BlockQuote([OrderedList((1, Decimal(), Period()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('list'), Space(), Str('inside'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])], [Plain([Str('Second'), Space(), Str('item.')])]])])])\n</code></pre> <p>Among the block elements that can be contained in a block quote are other block quotes. That is, block quotes can be nested:</p> MarkdownPython <pre><code>&gt; This is a block quote.\n&gt;\n&gt; &gt; A block quote within a block quote.\n</code></pre> <pre><code>Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')]), BlockQuote([Para([Str('A'), Space(), Str('block'), Space(), Str('quote'), Space(), Str('within'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.')])])])])\n</code></pre> <p>If the <code>&gt;</code> character is followed by an optional space, that space will be considered part of the block quote marker and not part of the indentation of the contents. Thus, to put an indented code block in a block quote, you need five spaces after the <code>&gt;</code>:</p> MarkdownPython <pre><code>&gt;     code\n</code></pre> <pre><code>Pandoc(Meta({}), [BlockQuote([CodeBlock(('', [], []), 'code')])])\n</code></pre>"},{"location":"markdown/#extension-blank_before_blockquote","title":"Extension: <code>blank_before_blockquote</code>","text":"<p>Original Markdown syntax does not require a blank line before a block quote. Pandoc does require this (except, of course, at the beginning of the document). The reason for the requirement is that it is all too easy for a <code>&gt;</code> to end up at the beginning of a line by accident (perhaps through line wrapping). So, unless the <code>markdown_strict</code> format is used, the following does not produce a nested block quote in pandoc:</p> MarkdownPython <pre><code>&gt; This is a block quote.\n&gt;&gt; Not nested, since `blank_before_blockquote` is enabled by default\n</code></pre> <pre><code>Pandoc(Meta({}), [BlockQuote([Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('block'), Space(), Str('quote.'), SoftBreak(), Str('&gt;'), Space(), Str('Not'), Space(), Str('nested,'), Space(), Str('since'), Space(), Code(('', [], []), 'blank_before_blockquote'), Space(), Str('is'), Space(), Str('enabled'), Space(), Str('by'), Space(), Str('default')])])])\n</code></pre>"},{"location":"markdown/#verbatim-code-blocks","title":"Verbatim (code) blocks","text":""},{"location":"markdown/#indented-code-blocks","title":"Indented code blocks","text":"<p>A block of text indented four spaces (or one tab) is treated as verbatim text: that is, special characters do not trigger special formatting, and all spaces and line breaks are preserved. For example,</p> MarkdownPython <pre><code>    if (a &gt; 3) {\n      moveShip(5 * gravity, DOWN);\n    }\n</code></pre> <pre><code>Pandoc(Meta({}), [CodeBlock(('', [], []), 'if (a &gt; 3) {\\n  moveShip(5 * gravity, DOWN);\\n}')])\n</code></pre> <p>The initial (four space or one tab) indentation is not considered part of the verbatim text, and is removed in the output.</p> <p>Note: blank lines in the verbatim text need not begin with four spaces.</p>"},{"location":"markdown/#fenced-code-blocks","title":"Fenced code blocks","text":""},{"location":"markdown/#extension-fenced_code_blocks","title":"Extension: <code>fenced_code_blocks</code>","text":"<p>In addition to standard indented code blocks, pandoc supports fenced code blocks. These begin with a row of three or more tildes (<code>~</code>) and end with a row of tildes that must be at least as long as the starting row. Everything between these lines is treated as code. No indentation is necessary:</p> MarkdownPython <pre><code>~~~~~~~\nif (a &gt; 3) {\n  moveShip(5 * gravity, DOWN);\n}\n~~~~~~~\n</code></pre> <pre><code>Pandoc(Meta({}), [CodeBlock(('', [], []), 'if (a &gt; 3) {\\n  moveShip(5 * gravity, DOWN);\\n}')])\n</code></pre> <p>Like regular code blocks, fenced code blocks must be separated from surrounding text by blank lines.</p> <p>If the code itself contains a row of tildes or backticks, just use a longer row of tildes or backticks at the start and end:</p> MarkdownPython <pre><code>~~~~~~~~~~~~~~~~\n~~~~~~~~~~\ncode including tildes\n~~~~~~~~~~\n~~~~~~~~~~~~~~~~\n</code></pre> <pre><code>Pandoc(Meta({}), [CodeBlock(('', [], []), '~~~~~~~~~~\\ncode including tildes\\n~~~~~~~~~~')])\n</code></pre>"},{"location":"markdown/#extension-backtick_code_blocks","title":"Extension: <code>backtick_code_blocks</code>","text":"<p>Same as <code>fenced_code_blocks</code>, but uses backticks (<code>`</code>) instead of tildes (<code>~</code>).</p>"},{"location":"markdown/#extension-fenced_code_attributes","title":"Extension: <code>fenced_code_attributes</code>","text":"<p>Optionally, you may attach attributes to fenced or backtick code block using this syntax:</p> MarkdownPython <pre><code>~~~~ {#mycode .haskell .numberLines startFrom=\"100\"}\nqsort []     = []\nqsort (x:xs) = qsort (filter (&lt; x) xs) ++ [x] ++\n               qsort (filter (&gt;= x) xs)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre> <pre><code>Pandoc(Meta({}), [CodeBlock(('mycode', ['haskell', 'numberLines'], [('startFrom', '100')]), 'qsort []     = []\\nqsort (x:xs) = qsort (filter (&lt; x) xs) ++ [x] ++\\n               qsort (filter (&gt;= x) xs)')])\n</code></pre> <p>Here <code>mycode</code> is an identifier, <code>haskell</code> and <code>numberLines</code> are classes, and <code>startFrom</code> is an attribute with value <code>100</code>. Some output formats can use this information to do syntax highlighting. Currently, the only output formats that use this information are HTML, LaTeX, Docx, Ms, and PowerPoint. If highlighting is supported for your output format and language, then the code block above will appear highlighted, with numbered lines. (To see which languages are supported, type <code>pandoc --list-highlight-languages</code>.) Otherwise, the code block above will appear as follows:</p> MarkdownPython <pre><code>&lt;pre id=\"mycode\" class=\"haskell numberLines\" startFrom=\"100\"&gt;\n  &lt;code&gt;\n  ...\n  &lt;/code&gt;\n&lt;/pre&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [RawBlock(Format('html'), '&lt;pre id=\"mycode\" class=\"haskell numberLines\" startFrom=\"100\"&gt;\\n  &lt;code&gt;\\n  ...\\n  &lt;/code&gt;\\n&lt;/pre&gt;')])\n</code></pre> <p>The <code>numberLines</code> (or <code>number-lines</code>) class will cause the lines of the code block to be numbered, starting with <code>1</code> or the value of the <code>startFrom</code> attribute. The <code>lineAnchors</code> (or <code>line-anchors</code>) class will cause the lines to be clickable anchors in HTML output.</p> <p>A shortcut form can also be used for specifying the language of the code block:</p> MarkdownPython <pre><code>```haskell\nqsort [] = []\n```\n</code></pre> <pre><code>Pandoc(Meta({}), [CodeBlock(('', ['haskell'], []), 'qsort [] = []')])\n</code></pre> <p>This is equivalent to:</p> MarkdownPython <pre><code>``` {.haskell}\nqsort [] = []\n```\n</code></pre> <pre><code>Pandoc(Meta({}), [CodeBlock(('', ['haskell'], []), 'qsort [] = []')])\n</code></pre> <p>This shortcut form may be combined with attributes:</p> MarkdownPython <pre><code>```haskell {.numberLines}\nqsort [] = []\n```\n</code></pre> <pre><code>Pandoc(Meta({}), [CodeBlock(('', ['haskell', 'numberLines'], []), 'qsort [] = []')])\n</code></pre> <p>Which is equivalent to:</p> MarkdownPython <pre><code>``` {.haskell .numberLines}\nqsort [] = []\n```\n</code></pre> <pre><code>Pandoc(Meta({}), [CodeBlock(('', ['haskell', 'numberLines'], []), 'qsort [] = []')])\n</code></pre> <p>If the <code>fenced_code_attributes</code> extension is disabled, but input contains class attribute(s) for the code block, the first class attribute will be printed after the opening fence as a bare word.</p> <p>To prevent all highlighting, use the <code>--no-highlight</code> flag. To set the highlighting style, use <code>--highlight-style</code>. For more information on highlighting, see Syntax highlighting, below.</p>"},{"location":"markdown/#line-blocks","title":"Line blocks","text":""},{"location":"markdown/#extension-line_blocks","title":"Extension: <code>line_blocks</code>","text":"<p>A line block is a sequence of lines beginning with a vertical bar (<code>|</code>) followed by a space. The division into lines will be preserved in the output, as will any leading spaces; otherwise, the lines will be formatted as Markdown. This is useful for verse and addresses:</p> MarkdownPython <pre><code>| The limerick packs laughs anatomical\n| In space that is quite economical.\n|    But the good ones I've seen\n|    So seldom are clean\n| And the clean ones so seldom are comical\n\n| 200 Main St.\n| Berkeley, CA 94718\n</code></pre> <pre><code>Pandoc(Meta({}), [LineBlock([[Str('The'), Space(), Str('limerick'), Space(), Str('packs'), Space(), Str('laughs'), Space(), Str('anatomical')], [Str('In'), Space(), Str('space'), Space(), Str('that'), Space(), Str('is'), Space(), Str('quite'), Space(), Str('economical.')], [Str('\\xa0\\xa0\\xa0But'), Space(), Str('the'), Space(), Str('good'), Space(), Str('ones'), Space(), Str('I\u2019ve'), Space(), Str('seen')], [Str('\\xa0\\xa0\\xa0So'), Space(), Str('seldom'), Space(), Str('are'), Space(), Str('clean')], [Str('And'), Space(), Str('the'), Space(), Str('clean'), Space(), Str('ones'), Space(), Str('so'), Space(), Str('seldom'), Space(), Str('are'), Space(), Str('comical')]]), LineBlock([[Str('200'), Space(), Str('Main'), Space(), Str('St.')], [Str('Berkeley,'), Space(), Str('CA'), Space(), Str('94718')]])])\n</code></pre> <p>The lines can be hard-wrapped if needed, but the continuation line must begin with a space.</p> MarkdownPython <pre><code>| The Right Honorable Most Venerable and Righteous Samuel L.\n  Constable, Jr.\n| 200 Main St.\n| Berkeley, CA 94718\n</code></pre> <pre><code>Pandoc(Meta({}), [LineBlock([[Str('The'), Space(), Str('Right'), Space(), Str('Honorable'), Space(), Str('Most'), Space(), Str('Venerable'), Space(), Str('and'), Space(), Str('Righteous'), Space(), Str('Samuel'), Space(), Str('L.'), Space(), Str('Constable,'), Space(), Str('Jr.')], [Str('200'), Space(), Str('Main'), Space(), Str('St.')], [Str('Berkeley,'), Space(), Str('CA'), Space(), Str('94718')]])])\n</code></pre> <p>Inline formatting (such as emphasis) is allowed in the content, but not block-level formatting (such as block quotes or lists).</p> <p>This syntax is borrowed from reStructuredText.</p>"},{"location":"markdown/#lists","title":"Lists","text":""},{"location":"markdown/#bullet-lists","title":"Bullet lists","text":"<p>A bullet list is a list of bulleted list items. A bulleted list item begins with a bullet (<code>*</code>, <code>+</code>, or <code>-</code>). Here is a simple example:</p> MarkdownPython <pre><code>* one\n* two\n* three\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])])\n</code></pre> <p>This will produce a \"compact\" list. If you want a \"loose\" list, in which each item is formatted as a paragraph, put spaces between the items:</p> MarkdownPython <pre><code>* one\n\n* two\n\n* three\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Para([Str('one')])], [Para([Str('two')])], [Para([Str('three')])]])])\n</code></pre> <p>The bullets need not be flush with the left margin; they may be indented one, two, or three spaces. The bullet must be followed by whitespace.</p> <p>List items look best if subsequent lines are flush with the first line (after the bullet):</p> MarkdownPython <pre><code>* here is my first\n  list item.\n* and my second.\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Plain([Str('here'), Space(), Str('is'), Space(), Str('my'), Space(), Str('first'), SoftBreak(), Str('list'), Space(), Str('item.')])], [Plain([Str('and'), Space(), Str('my'), Space(), Str('second.')])]])])\n</code></pre> <p>But Markdown also allows a \"lazy\" format:</p> MarkdownPython <pre><code>* here is my first\nlist item.\n* and my second.\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Plain([Str('here'), Space(), Str('is'), Space(), Str('my'), Space(), Str('first'), SoftBreak(), Str('list'), Space(), Str('item.')])], [Plain([Str('and'), Space(), Str('my'), Space(), Str('second.')])]])])\n</code></pre>"},{"location":"markdown/#block-content-in-list-items","title":"Block content in list items","text":"<p>A list item may contain multiple paragraphs and other block-level content. However, subsequent paragraphs must be preceded by a blank line and indented to line up with the first non-space content after the list marker.</p> MarkdownPython <pre><code>  * First paragraph.\n\n    Continued.\n\n  * Second paragraph. With a code block, which must be indented\n    eight spaces:\n\n        { code }\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Para([Str('First'), Space(), Str('paragraph.')]), Para([Str('Continued.')])], [Para([Str('Second'), Space(), Str('paragraph.'), Space(), Str('With'), Space(), Str('a'), Space(), Str('code'), Space(), Str('block,'), Space(), Str('which'), Space(), Str('must'), Space(), Str('be'), Space(), Str('indented'), SoftBreak(), Str('eight'), Space(), Str('spaces:')]), CodeBlock(('', [], []), '{ code }')]])])\n</code></pre> <p>Exception: if the list marker is followed by an indented code block, which must begin 5 spaces after the list marker, then subsequent paragraphs must begin two columns after the last character of the list marker:</p> MarkdownPython <pre><code>*     code\n\n  continuation paragraph\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[CodeBlock(('', [], []), 'code'), Plain([Str('continuation'), Space(), Str('paragraph')])]])])\n</code></pre> <p>List items may include other lists. In this case the preceding blank line is optional. The nested list must be indented to line up with the first non-space character after the list marker of the containing list item.</p> MarkdownPython <pre><code>* fruits\n  + apples\n    - macintosh\n    - red delicious\n  + pears\n  + peaches\n* vegetables\n  + broccoli\n  + chard\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Plain([Str('fruits')]), BulletList([[Plain([Str('apples')]), BulletList([[Plain([Str('macintosh')])], [Plain([Str('red'), Space(), Str('delicious')])]])], [Plain([Str('pears')])], [Plain([Str('peaches')])]])], [Plain([Str('vegetables')]), BulletList([[Plain([Str('broccoli')])], [Plain([Str('chard')])]])]])])\n</code></pre> <p>As noted above, Markdown allows you to write list items \"lazily,\" instead of indenting continuation lines. However, if there are multiple paragraphs or other blocks in a list item, the first line of each must be indented.</p> MarkdownPython <pre><code>+ A lazy, lazy, list\nitem.\n\n+ Another one; this looks\nbad but is legal.\n\n    Second paragraph of second\nlist item.\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Para([Str('A'), Space(), Str('lazy,'), Space(), Str('lazy,'), Space(), Str('list'), SoftBreak(), Str('item.')])], [Para([Str('Another'), Space(), Str('one;'), Space(), Str('this'), Space(), Str('looks'), SoftBreak(), Str('bad'), Space(), Str('but'), Space(), Str('is'), Space(), Str('legal.')]), Para([Str('Second'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('second'), SoftBreak(), Str('list'), Space(), Str('item.')])]])])\n</code></pre>"},{"location":"markdown/#ordered-lists","title":"Ordered lists","text":"<p>Ordered lists work just like bulleted lists, except that the items begin with enumerators rather than bullets.</p> <p>In original Markdown, enumerators are decimal numbers followed by a period and a space. The numbers themselves are ignored, so there is no difference between this list:</p> MarkdownPython <pre><code>1.  one\n2.  two\n3.  three\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((1, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])])\n</code></pre> <p>and this one:</p> MarkdownPython <pre><code>5.  one\n7.  two\n1.  three\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((5, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])])\n</code></pre>"},{"location":"markdown/#extension-fancy_lists","title":"Extension: <code>fancy_lists</code>","text":"<p>Unlike original Markdown, pandoc allows ordered list items to be marked with uppercase and lowercase letters and roman numerals, in addition to Arabic numerals. List markers may be enclosed in parentheses or followed by a single right-parenthesis or period. They must be separated from the text that follows by at least one space, and, if the list marker is a capital letter with a period, by at least two spaces.1</p> <p>The <code>fancy_lists</code> extension also allows '<code>#</code>' to be used as an ordered list marker in place of a numeral:</p> MarkdownPython <pre><code>#. one\n#. two\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((1, DefaultStyle(), DefaultDelim()), [[Plain([Str('one')])], [Plain([Str('two')])]])])\n</code></pre>"},{"location":"markdown/#extension-startnum","title":"Extension: <code>startnum</code>","text":"<p>Pandoc also pays attention to the type of list marker used, and to the starting number, and both of these are preserved where possible in the output format. Thus, the following yields a list with numbers followed by a single parenthesis, starting with 9, and a sublist with lowercase roman numerals:</p> MarkdownPython <pre><code> 9)  Ninth\n10)  Tenth\n11)  Eleventh\n       i. subone\n      ii. subtwo\n     iii. subthree\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((9, Decimal(), OneParen()), [[Plain([Str('Ninth')])], [Plain([Str('Tenth')])], [Plain([Str('Eleventh')]), OrderedList((1, LowerRoman(), Period()), [[Plain([Str('subone')])], [Plain([Str('subtwo')])], [Plain([Str('subthree')])]])]])])\n</code></pre> <p>Pandoc will start a new list each time a different type of list marker is used. So, the following will create three lists:</p> MarkdownPython <pre><code>(2) Two\n(5) Three\n1.  Four\n*   Five\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((2, Decimal(), TwoParens()), [[Plain([Str('Two')])], [Plain([Str('Three')])]]), OrderedList((1, Decimal(), Period()), [[Plain([Str('Four')])]]), BulletList([[Plain([Str('Five')])]])])\n</code></pre> <p>If default list markers are desired, use <code>#.</code>:</p> MarkdownPython <pre><code>#.  one\n#.  two\n#.  three\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((1, DefaultStyle(), DefaultDelim()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]])])\n</code></pre>"},{"location":"markdown/#extension-task_lists","title":"Extension: <code>task_lists</code>","text":"<p>Pandoc supports task lists, using the syntax of GitHub-Flavored Markdown.</p> MarkdownPython <pre><code>- [ ] an unchecked task list item\n- [x] checked item\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Plain([Str('\u2610'), Space(), Str('an'), Space(), Str('unchecked'), Space(), Str('task'), Space(), Str('list'), Space(), Str('item')])], [Plain([Str('\u2612'), Space(), Str('checked'), Space(), Str('item')])]])])\n</code></pre>"},{"location":"markdown/#definition-lists","title":"Definition lists","text":""},{"location":"markdown/#extension-definition_lists","title":"Extension: <code>definition_lists</code>","text":"<p>Pandoc supports definition lists, using the syntax of PHP Markdown Extra with some extensions.2</p> MarkdownPython <pre><code>Term 1\n\n:   Definition 1\n\nTerm 2 with *inline markup*\n\n:   Definition 2\n\n        { some code, part of Definition 2 }\n\n    Third paragraph of definition 2.\n</code></pre> <pre><code>Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Para([Str('Definition'), Space(), Str('1')])]]), ([Str('Term'), Space(), Str('2'), Space(), Str('with'), Space(), Emph([Str('inline'), Space(), Str('markup')])], [[Para([Str('Definition'), Space(), Str('2')]), CodeBlock(('', [], []), '{ some code, part of Definition 2 }'), Para([Str('Third'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('definition'), Space(), Str('2.')])]])])])\n</code></pre> <p>Each term must fit on one line, which may optionally be followed by a blank line, and must be followed by one or more definitions. A definition begins with a colon or tilde, which may be indented one or two spaces.</p> <p>A term may have multiple definitions, and each definition may consist of one or more block elements (paragraph, code block, list, etc.), each indented four spaces or one tab stop. The body of the definition (not including the first line) should be indented four spaces. However, as with other Markdown lists, you can \"lazily\" omit indentation except at the beginning of a paragraph or other block element:</p> MarkdownPython <pre><code>Term 1\n\n:   Definition\nwith lazy continuation.\n\n    Second paragraph of the definition.\n</code></pre> <pre><code>Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Para([Str('Definition'), SoftBreak(), Str('with'), Space(), Str('lazy'), Space(), Str('continuation.')]), Para([Str('Second'), Space(), Str('paragraph'), Space(), Str('of'), Space(), Str('the'), Space(), Str('definition.')])]])])])\n</code></pre> <p>If you leave space before the definition (as in the example above), the text of the definition will be treated as a paragraph. In some output formats, this will mean greater spacing between term/definition pairs. For a more compact definition list, omit the space before the definition:</p> MarkdownPython <pre><code>Term 1\n  ~ Definition 1\n\nTerm 2\n  ~ Definition 2a\n  ~ Definition 2b\n</code></pre> <pre><code>Pandoc(Meta({}), [DefinitionList([([Str('Term'), Space(), Str('1')], [[Plain([Str('Definition'), Space(), Str('1')])]]), ([Str('Term'), Space(), Str('2')], [[Plain([Str('Definition'), Space(), Str('2a')])], [Plain([Str('Definition'), Space(), Str('2b')])]])])])\n</code></pre> <p>Note that space between items in a definition list is required. (A variant that loosens this requirement, but disallows \"lazy\" hard wrapping, can be activated with the <code>compact_definition_lists</code> extension.)</p>"},{"location":"markdown/#numbered-example-lists","title":"Numbered example lists","text":""},{"location":"markdown/#extension-example_lists","title":"Extension: <code>example_lists</code>","text":"<p>The special list marker <code>@</code> can be used for sequentially numbered examples. The first list item with a <code>@</code> marker will be numbered '1', the next '2', and so on, throughout the document. The numbered examples need not occur in a single list; each new list using <code>@</code> will take up where the last stopped. So, for example:</p> MarkdownPython <pre><code>(@)  My first example will be numbered (1).\n(@)  My second example will be numbered (2).\n\nExplanation of examples.\n\n(@)  My third example will be numbered (3).\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((1, Example(), TwoParens()), [[Plain([Str('My'), Space(), Str('first'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(1).')])], [Plain([Str('My'), Space(), Str('second'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(2).')])]]), Para([Str('Explanation'), Space(), Str('of'), Space(), Str('examples.')]), OrderedList((3, Example(), TwoParens()), [[Plain([Str('My'), Space(), Str('third'), Space(), Str('example'), Space(), Str('will'), Space(), Str('be'), Space(), Str('numbered'), Space(), Str('(3).')])]])])\n</code></pre> <p>Numbered examples can be labeled and referred to elsewhere in the document:</p> MarkdownPython <pre><code>(@good)  This is a good example.\n\nAs (@good) illustrates, ...\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((1, Example(), TwoParens()), [[Plain([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('good'), Space(), Str('example.')])]]), Para([Str('As'), Space(), Str('(1)'), Space(), Str('illustrates,'), Space(), Str('\u2026')])])\n</code></pre> <p>The label can be any string of alphanumeric characters, underscores, or hyphens.</p> <p>Note: continuation paragraphs in example lists must always be indented four spaces, regardless of the length of the list marker. That is, example lists always behave as if the <code>four_space_rule</code> extension is set. This is because example labels tend to be long, and indenting content to the first non-space character after the label would be awkward.</p>"},{"location":"markdown/#ending-a-list","title":"Ending a list","text":"<p>What if you want to put an indented code block after a list?</p> MarkdownPython <pre><code>-   item one\n-   item two\n\n    { my code block }\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Para([Str('item'), Space(), Str('one')])], [Para([Str('item'), Space(), Str('two')]), Para([Str('{'), Space(), Str('my'), Space(), Str('code'), Space(), Str('block'), Space(), Str('}')])]])])\n</code></pre> <p>Trouble! Here pandoc (like other Markdown implementations) will treat <code>{ my code block }</code> as the second paragraph of item two, and not as a code block.</p> <p>To \"cut off\" the list after item two, you can insert some non-indented content, like an HTML comment, which won't produce visible output in any format:</p> MarkdownPython <pre><code>-   item one\n-   item two\n\n&lt;!-- end of list --&gt;\n\n    { my code block }\n</code></pre> <pre><code>Pandoc(Meta({}), [BulletList([[Plain([Str('item'), Space(), Str('one')])], [Plain([Str('item'), Space(), Str('two')])]]), RawBlock(Format('html'), '&lt;!-- end of list --&gt;'), CodeBlock(('', [], []), '{ my code block }')])\n</code></pre> <p>You can use the same trick if you want two consecutive lists instead of one big list:</p> MarkdownPython <pre><code>1.  one\n2.  two\n3.  three\n\n&lt;!-- --&gt;\n\n1.  uno\n2.  dos\n3.  tres\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((1, Decimal(), Period()), [[Plain([Str('one')])], [Plain([Str('two')])], [Plain([Str('three')])]]), RawBlock(Format('html'), '&lt;!-- --&gt;'), OrderedList((1, Decimal(), Period()), [[Plain([Str('uno')])], [Plain([Str('dos')])], [Plain([Str('tres')])]])])\n</code></pre>"},{"location":"markdown/#horizontal-rules","title":"Horizontal rules","text":"<p>A line containing a row of three or more <code>*</code>, <code>-</code>, or <code>_</code> characters (optionally separated by spaces) produces a horizontal rule:</p> MarkdownPython <pre><code>*  *  *  *\n\n---------------\n</code></pre> <pre><code>Pandoc(Meta({}), [HorizontalRule(), HorizontalRule()])\n</code></pre> <p>We strongly recommend that horizontal rules be separated from surrounding text by blank lines. If a horizontal rule is not followed by a blank line, pandoc may try to interpret the lines that follow as a YAML metadata block or a table.</p>"},{"location":"markdown/#tables","title":"Tables","text":"<p>Four kinds of tables may be used. The first three kinds presuppose the use of a fixed-width font, such as Courier. The fourth kind can be used with proportionally spaced fonts, as it does not require lining up columns.</p>"},{"location":"markdown/#extension-table_captions","title":"Extension: <code>table_captions</code>","text":"<p>A caption may optionally be provided with all 4 kinds of tables (as illustrated in the examples below). A caption is a paragraph beginning with the string <code>Table:</code> (or <code>table:</code> or just <code>:</code>), which will be stripped off. It may appear either before or after the table.</p>"},{"location":"markdown/#extension-simple_tables","title":"Extension: <code>simple_tables</code>","text":"<p>Simple tables look like this:</p> MarkdownPython <pre><code>  Right     Left     Center     Default\n-------     ------ ----------   -------\n     12     12        12            12\n    123     123       123          123\n      1     1          1             1\n\nTable:  Demonstration of simple table syntax.\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Demonstration'), Space(), Str('of'), Space(), Str('simple'), Space(), Str('table'), Space(), Str('syntax.')])]), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignCenter(), ColWidthDefault()), (AlignDefault(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Center')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>The header and table rows must each fit on one line. Column alignments are determined by the position of the header text relative to the dashed line below it:3</p> <ul> <li>If the dashed line is flush with the header text on the right side     but extends beyond it on the left, the column is right-aligned.</li> <li>If the dashed line is flush with the header text on the left side     but extends beyond it on the right, the column is left-aligned.</li> <li>If the dashed line extends beyond the header text on both sides, the     column is centered.</li> <li>If the dashed line is flush with the header text on both sides, the     default alignment is used (in most cases, this will be left).</li> </ul> <p>The table must end with a blank line, or a line of dashes followed by a blank line.</p> <p>The column header row may be omitted, provided a dashed line is used to end the table. For example:</p> MarkdownPython <pre><code>-------     ------ ----------   -------\n     12     12        12             12\n    123     123       123           123\n      1     1          1              1\n-------     ------ ----------   -------\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignCenter(), ColWidthDefault()), (AlignRight(), ColWidthDefault())], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>When the header row is omitted, column alignments are determined on the basis of the first line of the table body. So, in the tables above, the columns would be right, left, center, and right aligned, respectively.</p>"},{"location":"markdown/#extension-multiline_tables","title":"Extension: <code>multiline_tables</code>","text":"<p>Multiline tables allow header and table rows to span multiple lines of text (but cells that span multiple columns or rows of the table are not supported). Here is an example:</p> MarkdownPython <pre><code>-------------------------------------------------------------\n Centered   Default           Right Left\n  Header    Aligned         Aligned Aligned\n----------- ------- --------------- -------------------------\n   First    row                12.0 Example of a row that\n                                    spans multiple lines.\n\n  Second    row                 5.0 Here's another one. Note\n                                    the blank line between\n                                    rows.\n-------------------------------------------------------------\n\nTable: Here's the caption. It, too, may span\nmultiple lines.\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Here\u2019s'), Space(), Str('the'), Space(), Str('caption.'), Space(), Str('It,'), Space(), Str('too,'), Space(), Str('may'), Space(), Str('span'), SoftBreak(), Str('multiple'), Space(), Str('lines.')])]), [(AlignCenter(), ColWidth_(0.16666666666666666)), (AlignDefault(), ColWidth_(0.1111111111111111)), (AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.3611111111111111))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered'), SoftBreak(), Str('Header')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default'), SoftBreak(), Str('Aligned')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right'), SoftBreak(), Str('Aligned')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left'), SoftBreak(), Str('Aligned')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('First')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Example'), Space(), Str('of'), Space(), Str('a'), Space(), Str('row'), Space(), Str('that'), SoftBreak(), Str('spans'), Space(), Str('multiple'), Space(), Str('lines.')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Second')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('5.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Here\u2019s'), Space(), Str('another'), Space(), Str('one.'), Space(), Str('Note'), SoftBreak(), Str('the'), Space(), Str('blank'), Space(), Str('line'), Space(), Str('between'), SoftBreak(), Str('rows.')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>These work like simple tables, but with the following differences:</p> <ul> <li>They must begin with a row of dashes, before the header text (unless     the header row is omitted).</li> <li>They must end with a row of dashes, then a blank line.</li> <li>The rows must be separated by blank lines.</li> </ul> <p>In multiline tables, the table parser pays attention to the widths of the columns, and the writers try to reproduce these relative widths in the output. So, if you find that one of the columns is too narrow in the output, try widening it in the Markdown source.</p> <p>The header may be omitted in multiline tables as well as simple tables:</p> MarkdownPython <pre><code>----------- ------- --------------- -------------------------\n   First    row                12.0 Example of a row that\n                                    spans multiple lines.\n\n  Second    row                 5.0 Here's another one. Note\n                                    the blank line between\n                                    rows.\n----------- ------- --------------- -------------------------\n\n: Here's a multiline table without a header.\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Here\u2019s'), Space(), Str('a'), Space(), Str('multiline'), Space(), Str('table'), Space(), Str('without'), Space(), Str('a'), Space(), Str('header.')])]), [(AlignCenter(), ColWidth_(0.16666666666666666)), (AlignLeft(), ColWidth_(0.1111111111111111)), (AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.3611111111111111))], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('First')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Example'), Space(), Str('of'), Space(), Str('a'), Space(), Str('row'), Space(), Str('that'), SoftBreak(), Str('spans'), Space(), Str('multiple'), Space(), Str('lines.')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Second')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('row')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('5.0')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Here\u2019s'), Space(), Str('another'), Space(), Str('one.'), Space(), Str('Note'), SoftBreak(), Str('the'), Space(), Str('blank'), Space(), Str('line'), Space(), Str('between'), SoftBreak(), Str('rows.')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>It is possible for a multiline table to have just one row, but the row should be followed by a blank line (and then the row of dashes that ends the table), or the table may be interpreted as a simple table.</p>"},{"location":"markdown/#extension-grid_tables","title":"Extension: <code>grid_tables</code>","text":"<p>Grid tables look like this:</p> MarkdownPython <pre><code>: Sample grid table.\n\n+---------------+---------------+--------------------+\n| Fruit         | Price         | Advantages         |\n+===============+===============+====================+\n| Bananas       | $1.34         | - built-in wrapper |\n|               |               | - bright color     |\n+---------------+---------------+--------------------+\n| Oranges       | $2.10         | - cures scurvy     |\n|               |               | - tasty            |\n+---------------+---------------+--------------------+\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Sample'), Space(), Str('grid'), Space(), Str('table.')])]), [(AlignDefault(), ColWidth_(0.2222222222222222)), (AlignDefault(), ColWidth_(0.2222222222222222)), (AlignDefault(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Fruit')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Price')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Advantages')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Bananas')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$1.34')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [BulletList([[Plain([Str('built-in'), Space(), Str('wrapper')])], [Plain([Str('bright'), Space(), Str('color')])]])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Oranges')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$2.10')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [BulletList([[Plain([Str('cures'), Space(), Str('scurvy')])], [Plain([Str('tasty')])]])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>The row of <code>=</code>s separates the header from the table body, and can be omitted for a headerless table. The cells of grid tables may contain arbitrary block elements (multiple paragraphs, code blocks, lists, etc.).</p> <p>Cells can span multiple columns or rows:</p> MarkdownPython <pre><code>+---------------------+----------+\n| Property            | Earth    |\n+=============+=======+==========+\n|             | min   | -89.2 \u00b0C |\n| Temperature +-------+----------+\n| 1961-1990   | mean  | 14 \u00b0C    |\n|             +-------+----------+\n|             | min   | 56.7 \u00b0C  |\n+-------------+-------+----------+\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignDefault(), ColWidth_(0.19444444444444445)), (AlignDefault(), ColWidth_(0.1111111111111111)), (AlignDefault(), ColWidth_(0.1527777777777778))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(2), [Plain([Str('Property')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Earth')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(3), ColSpan(1), [Plain([Str('Temperature'), SoftBreak(), Str('1961-1990')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('min')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('-89.2'), Space(), Str('\u00b0C')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('mean')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('14'), Space(), Str('\u00b0C')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('min')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('56.7'), Space(), Str('\u00b0C')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>A table header may contain more than one row:</p> MarkdownPython <pre><code>+---------------------+-----------------------+\n| Location            | Temperature 1961-1990 |\n|                     | in degree Celsius     |\n|                     +-------+-------+-------+\n|                     | min   | mean  | max   |\n+=====================+=======+=======+=======+\n| Antarctica          | -89.2 | N/A   | 19.8  |\n+---------------------+-------+-------+-------+\n| Earth               | -89.2 | 14    | 56.7  |\n+---------------------+-------+-------+-------+\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignDefault(), ColWidth_(0.3055555555555556)), (AlignDefault(), ColWidth_(0.1111111111111111)), (AlignDefault(), ColWidth_(0.1111111111111111)), (AlignDefault(), ColWidth_(0.1111111111111111))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(2), ColSpan(1), [Plain([Str('Location')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(3), [Plain([Str('Temperature'), Space(), Str('1961-1990'), SoftBreak(), Str('in'), Space(), Str('degree'), Space(), Str('Celsius')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('min')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('mean')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('max')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Antarctica')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('-89.2')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('N/A')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('19.8')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Earth')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('-89.2')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('14')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('56.7')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>Alignments can be specified as with pipe tables, by putting colons at the boundaries of the separator line after the header:</p> MarkdownPython <pre><code>+---------------+---------------+--------------------+\n| Right         | Left          | Centered           |\n+==============:+:==============+:==================:+\n| Bananas       | $1.34         | built-in wrapper   |\n+---------------+---------------+--------------------+\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.2222222222222222)), (AlignCenter(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Bananas')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('$1.34')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('built-in'), Space(), Str('wrapper')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>For headerless tables, the colons go on the top line instead:</p> MarkdownPython <pre><code>+--------------:+:--------------+:------------------:+\n| Right         | Left          | Centered           |\n+---------------+---------------+--------------------+\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignRight(), ColWidth_(0.2222222222222222)), (AlignLeft(), ColWidth_(0.2222222222222222)), (AlignCenter(), ColWidth_(0.2916666666666667))], TableHead(('', [], []), []), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Centered')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>A table foot can be defined by enclosing it with separator lines that use <code>=</code> instead of <code>-</code>:</p> MarkdownPython <pre><code> +---------------+---------------+\n | Fruit         | Price         |\n +===============+===============+\n | Bananas       | $1.34         |\n +---------------+---------------+\n | Oranges       | $2.10         |\n +===============+===============+\n | Sum           | $3.44         |\n +===============+===============+\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('+\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014+'), SoftBreak(), Str('|'), Space(), Str('Fruit'), Space(), Str('|'), Space(), Str('Price'), Space(), Str('|'), SoftBreak(), Str('+===============+===============+'), SoftBreak(), Str('|'), Space(), Str('Bananas'), Space(), Str('|'), Space(), Str('$1.34'), Space(), Str('|'), SoftBreak(), Str('+\u2014\u2014\u2014\u2014\u2014+\u2014\u2014\u2014\u2014\u2014+'), SoftBreak(), Str('|'), Space(), Str('Oranges'), Space(), Str('|'), Space(), Str('$2.10'), Space(), Str('|'), SoftBreak(), Str('+===============+===============+'), SoftBreak(), Str('|'), Space(), Str('Sum'), Space(), Str('|'), Space(), Str('$3.44'), Space(), Str('|'), SoftBreak(), Str('+===============+===============+')])])\n</code></pre> <p>The foot must always be placed at the very bottom of the table.</p> <p>Grid tables can be created easily using Emacs' table-mode (<code>M-x table-insert</code>).</p>"},{"location":"markdown/#extension-pipe_tables","title":"Extension: <code>pipe_tables</code>","text":"<p>Pipe tables look like this:</p> MarkdownPython <pre><code>| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n\n  : Demonstration of pipe table syntax.\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, [Plain([Str('Demonstration'), Space(), Str('of'), Space(), Str('pipe'), Space(), Str('table'), Space(), Str('syntax.')])]), [(AlignRight(), ColWidthDefault()), (AlignLeft(), ColWidthDefault()), (AlignDefault(), ColWidthDefault()), (AlignCenter(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Right')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Left')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Default')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Center')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('12')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('123')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>The syntax is identical to PHP Markdown Extra tables. The beginning and ending pipe characters are optional, but pipes are required between all columns. The colons indicate column alignment as shown. The header cannot be omitted. To simulate a headerless table, include a header with blank cells.</p> <p>Since the pipes indicate column boundaries, columns need not be vertically aligned, as they are in the above example. So, this is a perfectly legal (though ugly) pipe table:</p> MarkdownPython <pre><code>fruit| price\n-----|-----:\napple|2.05\npear|1.37\norange|3.09\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignDefault(), ColWidthDefault()), (AlignRight(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('fruit')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('price')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('apple')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('2.05')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('pear')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('1.37')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('orange')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('3.09')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>The cells of pipe tables cannot contain block elements like paragraphs and lists, and cannot span multiple lines. If any line of the markdown source is longer than the column width (see <code>--columns</code>), then the table will take up the full text width and the cell contents will wrap, with the relative cell widths determined by the number of dashes in the line separating the table header from the table body. (For example <code>---|-</code> would make the first column 3/4 and the second column 1/4 of the full text width.) On the other hand, if no lines are wider than column width, then cell contents will not be wrapped, and the cells will be sized to their contents.</p> <p>Note: pandoc also recognizes pipe tables of the following form, as can be produced by Emacs' orgtbl-mode:</p> MarkdownPython <pre><code>| One | Two   |\n|-----+-------|\n| my  | table |\n| is  | nice  |\n</code></pre> <pre><code>Pandoc(Meta({}), [Table(('', [], []), Caption(None, []), [(AlignDefault(), ColWidthDefault()), (AlignDefault(), ColWidthDefault())], TableHead(('', [], []), [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('One')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('Two')])])])]), [TableBody(('', [], []), RowHeadColumns(0), [], [Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('my')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('table')])])]), Row(('', [], []), [Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('is')])]), Cell(('', [], []), AlignDefault(), RowSpan(1), ColSpan(1), [Plain([Str('nice')])])])])], TableFoot(('', [], []), []))])\n</code></pre> <p>The difference is that <code>+</code> is used instead of <code>|</code>. Other orgtbl features are not supported. In particular, to get non-default column alignment, you'll need to add colons as above.</p>"},{"location":"markdown/#metadata-blocks","title":"Metadata blocks","text":""},{"location":"markdown/#extension-pandoc_title_block","title":"Extension: <code>pandoc_title_block</code>","text":"<p>If the file begins with a title block</p> MarkdownPython <pre><code>% title\n% author(s) (separated by semicolons)\n% date\n</code></pre> <pre><code>Pandoc(Meta({'author': MetaList([MetaInlines([Str('author(s)'), Space(), Str('(separated'), Space(), Str('by'), Space(), Str('semicolons)')])]), 'date': MetaInlines([Str('date')]), 'title': MetaInlines([Str('title')])}), [])\n</code></pre> <p>it will be parsed as bibliographic information, not regular text. (It will be used, for example, in the title of standalone LaTeX or HTML output.) The block may contain just a title, a title and an author, or all three elements. If you want to include an author but no title, or a title and a date but no author, you need a blank line:</p> MarkdownPython <pre><code>%\n% Author\n</code></pre> <pre><code>Pandoc(Meta({'author': MetaList([MetaInlines([Str('Author')])])}), [])\n</code></pre> MarkdownPython <pre><code>% My title\n%\n% June 15, 2006\n</code></pre> <pre><code>Pandoc(Meta({'author': MetaList([MetaInlines([])]), 'date': MetaInlines([Str('June'), Space(), Str('15,'), Space(), Str('2006')]), 'title': MetaInlines([Str('My'), Space(), Str('title')])}), [])\n</code></pre> <p>The title may occupy multiple lines, but continuation lines must begin with leading space, thus:</p> MarkdownPython <pre><code>% My title\n  on multiple lines\n</code></pre> <pre><code>Pandoc(Meta({'title': MetaInlines([Str('My'), Space(), Str('title'), SoftBreak(), Str('on'), Space(), Str('multiple'), Space(), Str('lines')])}), [])\n</code></pre> <p>If a document has multiple authors, the authors may be put on separate lines with leading space, or separated by semicolons, or both. So, all of the following are equivalent:</p> MarkdownPython <pre><code>% Author One\n  Author Two\n</code></pre> <pre><code>Pandoc(Meta({'title': MetaInlines([Str('Author'), Space(), Str('One'), SoftBreak(), Str('Author'), Space(), Str('Two')])}), [])\n</code></pre> MarkdownPython <pre><code>% Author One; Author Two\n</code></pre> <pre><code>Pandoc(Meta({'title': MetaInlines([Str('Author'), Space(), Str('One;'), Space(), Str('Author'), Space(), Str('Two')])}), [])\n</code></pre> MarkdownPython <pre><code>% Author One;\n  Author Two\n</code></pre> <pre><code>Pandoc(Meta({'title': MetaInlines([Str('Author'), Space(), Str('One;'), SoftBreak(), Str('Author'), Space(), Str('Two')])}), [])\n</code></pre> <p>The date must fit on one line.</p> <p>All three metadata fields may contain standard inline formatting (italics, links, footnotes, etc.).</p> <p>Title blocks will always be parsed, but they will affect the output only when the <code>--standalone</code> (<code>-s</code>) option is chosen. In HTML output, titles will appear twice: once in the document head -- this is the title that will appear at the top of the window in a browser -- and once at the beginning of the document body. The title in the document head can have an optional prefix attached (<code>--title-prefix</code> or <code>-T</code> option). The title in the body appears as an H1 element with class \"title\", so it can be suppressed or reformatted with CSS. If a title prefix is specified with <code>-T</code> and no title block appears in the document, the title prefix will be used by itself as the HTML title.</p> <p>The man page writer extracts a title, man page section number, and other header and footer information from the title line. The title is assumed to be the first word on the title line, which may optionally end with a (single-digit) section number in parentheses. (There should be no space between the title and the parentheses.) Anything after this is assumed to be additional footer and header text. A single pipe character (<code>|</code>) should be used to separate the footer text from the header text. Thus,</p> MarkdownPython <pre><code>% PANDOC(1)\n</code></pre> <pre><code>Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)')])}), [])\n</code></pre> <p>will yield a man page with the title <code>PANDOC</code> and section 1.</p> MarkdownPython <pre><code>% PANDOC(1) Pandoc User Manuals\n</code></pre> <pre><code>Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)'), Space(), Str('Pandoc'), Space(), Str('User'), Space(), Str('Manuals')])}), [])\n</code></pre> <p>will also have \"Pandoc User Manuals\" in the footer.</p> MarkdownPython <pre><code>% PANDOC(1) Pandoc User Manuals | Version 4.0\n</code></pre> <pre><code>Pandoc(Meta({'title': MetaInlines([Str('PANDOC(1)'), Space(), Str('Pandoc'), Space(), Str('User'), Space(), Str('Manuals'), Space(), Str('|'), Space(), Str('Version'), Space(), Str('4.0')])}), [])\n</code></pre> <p>will also have \"Version 4.0\" in the header.</p>"},{"location":"markdown/#extension-yaml_metadata_block","title":"Extension: <code>yaml_metadata_block</code>","text":"<p>A YAML metadata block is a valid YAML object, delimited by a line of three hyphens (<code>---</code>) at the top and a line of three hyphens (<code>---</code>) or three dots (<code>...</code>) at the bottom. The initial line <code>---</code> must not be followed by a blank line. A YAML metadata block may occur anywhere in the document, but if it is not at the beginning, it must be preceded by a blank line.</p> <p>Note that, because of the way pandoc concatenates input files when several are provided, you may also keep the metadata in a separate YAML file and pass it to pandoc as an argument, along with your Markdown files:</p> MarkdownPython <pre><code>pandoc chap1.md chap2.md chap3.md metadata.yaml -s -o book.html\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('pandoc'), Space(), Str('chap1.md'), Space(), Str('chap2.md'), Space(), Str('chap3.md'), Space(), Str('metadata.yaml'), Space(), Str('-s'), Space(), Str('-o'), Space(), Str('book.html')])])\n</code></pre> <p>Just be sure that the YAML file begins with <code>---</code> and ends with <code>---</code> or <code>...</code>. Alternatively, you can use the <code>--metadata-file</code> option. Using that approach however, you cannot reference content (like footnotes) from the main markdown input document.</p> <p>Metadata will be taken from the fields of the YAML object and added to any existing document metadata. Metadata can contain lists and objects (nested arbitrarily), but all string scalars will be interpreted as Markdown. Fields with names ending in an underscore will be ignored by pandoc. (They may be given a role by external processors.) Field names must not be interpretable as YAML numbers or boolean values (so, for example, <code>yes</code>, <code>True</code>, and <code>15</code> cannot be used as field names).</p> <p>A document may contain multiple metadata blocks. If two metadata blocks attempt to set the same field, the value from the second block will be taken.</p> <p>Each metadata block is handled internally as an independent YAML document. This means, for example, that any YAML anchors defined in a block cannot be referenced in another block.</p> <p>When pandoc is used with <code>-t markdown</code> to create a Markdown document, a YAML metadata block will be produced only if the <code>-s/--standalone</code> option is used. All of the metadata will appear in a single block at the beginning of the document.</p> <p>Note that YAML escaping rules must be followed. Thus, for example, if a title contains a colon, it must be quoted, and if it contains a backslash escape, then it must be ensured that it is not treated as a YAML escape sequence. The pipe character (<code>|</code>) can be used to begin an indented block that will be interpreted literally, without need for escaping. This form is necessary when the field contains blank lines or block-level formatting:</p> MarkdownPython <pre><code>---\ntitle:  'This is the title: it contains a colon'\nauthor:\n- Author One\n- Author Two\nkeywords: [nothing, nothingness]\nabstract: |\n  This is the abstract.\n\n  It consists of two paragraphs.\n...\n</code></pre> <pre><code>Pandoc(Meta({'abstract': MetaBlocks([Para([Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('abstract.')]), Para([Str('It'), Space(), Str('consists'), Space(), Str('of'), Space(), Str('two'), Space(), Str('paragraphs.')])]), 'author': MetaList([MetaInlines([Str('Author'), Space(), Str('One')]), MetaInlines([Str('Author'), Space(), Str('Two')])]), 'keywords': MetaList([MetaInlines([Str('nothing')]), MetaInlines([Str('nothingness')])]), 'title': MetaInlines([Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('title:'), Space(), Str('it'), Space(), Str('contains'), Space(), Str('a'), Space(), Str('colon')])}), [])\n</code></pre> <p>The literal block after the <code>|</code> must be indented relative to the line containing the <code>|</code>. If it is not, the YAML will be invalid and pandoc will not interpret it as metadata. For an overview of the complex rules governing YAML, see the Wikipedia entry on YAML syntax.</p> <p>Template variables will be set automatically from the metadata. Thus, for example, in writing HTML, the variable <code>abstract</code> will be set to the HTML equivalent of the Markdown in the <code>abstract</code> field:</p> MarkdownPython <pre><code>&lt;p&gt;This is the abstract.&lt;/p&gt;\n&lt;p&gt;It consists of two paragraphs.&lt;/p&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [RawBlock(Format('html'), '&lt;p&gt;'), Plain([Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('abstract.')]), RawBlock(Format('html'), '&lt;/p&gt;'), RawBlock(Format('html'), '&lt;p&gt;'), Plain([Str('It'), Space(), Str('consists'), Space(), Str('of'), Space(), Str('two'), Space(), Str('paragraphs.')]), RawBlock(Format('html'), '&lt;/p&gt;')])\n</code></pre> <p>Variables can contain arbitrary YAML structures, but the template must match this structure. The <code>author</code> variable in the default templates expects a simple list or string, but can be changed to support more complicated structures. The following combination, for example, would add an affiliation to the author if one is given:</p> MarkdownPython <pre><code>---\ntitle: The document title\nauthor:\n- name: Author One\n  affiliation: University of Somewhere\n- name: Author Two\n  affiliation: University of Nowhere\n...\n</code></pre> <pre><code>Pandoc(Meta({'author': MetaList([MetaMap({'affiliation': MetaInlines([Str('University'), Space(), Str('of'), Space(), Str('Somewhere')]), 'name': MetaInlines([Str('Author'), Space(), Str('One')])}), MetaMap({'affiliation': MetaInlines([Str('University'), Space(), Str('of'), Space(), Str('Nowhere')]), 'name': MetaInlines([Str('Author'), Space(), Str('Two')])})]), 'title': MetaInlines([Str('The'), Space(), Str('document'), Space(), Str('title')])}), [])\n</code></pre> <p>To use the structured authors in the example above, you would need a custom template:</p> MarkdownPython <pre><code>$for(author)$\n$if(author.name)$\n$author.name$$if(author.affiliation)$ ($author.affiliation$)$endif$\n$else$\n$author$\n$endif$\n$endfor$\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Math(InlineMath(), 'for(author)'), SoftBreak(), Math(InlineMath(), 'if(author.name)'), SoftBreak(), Math(InlineMath(), 'author.name'), Math(InlineMath(), 'if(author.affiliation)'), Space(), Str('('), Math(InlineMath(), 'author.affiliation'), Str(')'), Math(InlineMath(), 'endif'), SoftBreak(), Math(InlineMath(), 'else'), SoftBreak(), Math(InlineMath(), 'author'), SoftBreak(), Math(InlineMath(), 'endif'), SoftBreak(), Math(InlineMath(), 'endfor')])])\n</code></pre> <p>Raw content to include in the document's header may be specified using <code>header-includes</code>; however, it is important to mark up this content as raw code for a particular output format, using the <code>raw_attribute</code> extension, or it will be interpreted as markdown. For example:</p> MarkdownPython <pre><code>header-includes:\n- |\n  ```{=latex}\n  \\let\\oldsection\\section\n  \\renewcommand{\\section}[1]{\\clearpage\\oldsection{#1}}\n  ```\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('header-includes:'), SoftBreak(), Str('-'), Space(), Str('|'), SoftBreak(), Code(('', [], []), '{=latex}   \\\\let\\\\oldsection\\\\section   \\\\renewcommand{\\\\section}[1]{\\\\clearpage\\\\oldsection{#1}}')])])\n</code></pre> <p>Note: the <code>yaml_metadata_block</code> extension works with <code>commonmark</code> as well as <code>markdown</code> (and it is enabled by default in <code>gfm</code> and <code>commonmark_x</code>). However, in these formats the following restrictions apply:</p> <ul> <li> <p>The YAML metadata block must occur at the beginning of the document     (and there can be only one). If multiple files are given as     arguments to pandoc, only the first can be a YAML metadata block.</p> </li> <li> <p>The leaf nodes of the YAML structure are parsed in isolation from     each other and from the rest of the document. So, for example, you     can't use a reference link in these contexts if the link definition     is somewhere else in the document.</p> </li> </ul>"},{"location":"markdown/#backslash-escapes","title":"Backslash escapes","text":""},{"location":"markdown/#extension-all_symbols_escapable","title":"Extension: <code>all_symbols_escapable</code>","text":"<p>Except inside a code block or inline code, any punctuation or space character preceded by a backslash will be treated literally, even if it would normally indicate formatting. Thus, for example, if one writes</p> MarkdownPython <pre><code>*\\*hello\\**\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Emph([Str('*hello*')])])])\n</code></pre> <p>one will get</p> MarkdownPython <pre><code>&lt;em&gt;*hello*&lt;/em&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([RawInline(Format('html'), '&lt;em&gt;'), Emph([Str('hello')]), RawInline(Format('html'), '&lt;/em&gt;')])])\n</code></pre> <p>instead of</p> MarkdownPython <pre><code>&lt;strong&gt;hello&lt;/strong&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([RawInline(Format('html'), '&lt;strong&gt;'), Str('hello'), RawInline(Format('html'), '&lt;/strong&gt;')])])\n</code></pre> <p>This rule is easier to remember than original Markdown's rule, which allows only the following characters to be backslash-escaped:</p> MarkdownPython <pre><code>\\`*_{}[]()&gt;#+-.!\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('`*_{}'), Link(('', [], []), [], ('', '')), Str('&gt;#+-.!')])])\n</code></pre> <p>(However, if the <code>markdown_strict</code> format is used, the original Markdown rule will be used.)</p> <p>A backslash-escaped space is parsed as a nonbreaking space. In TeX output, it will appear as <code>~</code>. In HTML and XML output, it will appear as a literal unicode nonbreaking space character (note that it will thus actually look \"invisible\" in the generated HTML source; you can still use the <code>--ascii</code> command-line option to make it appear as an explicit entity).</p> <p>A backslash-escaped newline (i.e.\u00a0a backslash occurring at the end of a line) is parsed as a hard line break. It will appear in TeX output as <code>\\\\</code> and in HTML as <code>&lt;br /&gt;</code>. This is a nice alternative to Markdown's \"invisible\" way of indicating hard line breaks using two trailing spaces on a line.</p> <p>Backslash escapes do not work in verbatim contexts.</p>"},{"location":"markdown/#inline-formatting","title":"Inline formatting","text":""},{"location":"markdown/#emphasis","title":"Emphasis","text":"<p>To emphasize some text, surround it with <code>*</code>s or <code>_</code>, like this:</p> MarkdownPython <pre><code>This text is _emphasized with underscores_, and this\nis *emphasized with asterisks*.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('This'), Space(), Str('text'), Space(), Str('is'), Space(), Emph([Str('emphasized'), Space(), Str('with'), Space(), Str('underscores')]), Str(','), Space(), Str('and'), Space(), Str('this'), SoftBreak(), Str('is'), Space(), Emph([Str('emphasized'), Space(), Str('with'), Space(), Str('asterisks')]), Str('.')])])\n</code></pre> <p>Double <code>*</code> or <code>_</code> produces strong emphasis:</p> MarkdownPython <pre><code>This is **strong emphasis** and __with underscores__.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Strong([Str('strong'), Space(), Str('emphasis')]), Space(), Str('and'), Space(), Strong([Str('with'), Space(), Str('underscores')]), Str('.')])])\n</code></pre> <p>A <code>*</code> or <code>_</code> character surrounded by spaces, or backslash-escaped, will not trigger emphasis:</p> MarkdownPython <pre><code>This is * not emphasized *, and \\*neither is this\\*.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('*'), Space(), Str('not'), Space(), Str('emphasized'), Space(), Str('*,'), Space(), Str('and'), Space(), Str('*neither'), Space(), Str('is'), Space(), Str('this*.')])])\n</code></pre>"},{"location":"markdown/#extension-intraword_underscores","title":"Extension: <code>intraword_underscores</code>","text":"<p>Because <code>_</code> is sometimes used inside words and identifiers, pandoc does not interpret a <code>_</code> surrounded by alphanumeric characters as an emphasis marker. If you want to emphasize just part of a word, use <code>*</code>:</p> MarkdownPython <pre><code>feas*ible*, not feas*able*.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('feas'), Emph([Str('ible')]), Str(','), Space(), Str('not'), Space(), Str('feas'), Emph([Str('able')]), Str('.')])])\n</code></pre>"},{"location":"markdown/#highlighting","title":"Highlighting","text":"<p>To highlight text, use the <code>mark</code> class:</p> MarkdownPython <pre><code>[Mark]{.mark}\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Span(('', ['mark'], []), [Str('Mark')])])])\n</code></pre> <p>Or, without the <code>bracketed_spans</code> extension (but with <code>native_spans</code>):</p> MarkdownPython <pre><code>&lt;span class=\"mark\"&gt;Mark&lt;/span&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Span(('', ['mark'], []), [Str('Mark')])])])\n</code></pre> <p>This will work in html output.</p>"},{"location":"markdown/#strikeout","title":"Strikeout","text":""},{"location":"markdown/#extension-strikeout","title":"Extension: <code>strikeout</code>","text":"<p>To strike out a section of text with a horizontal line, begin and end it with <code>~~</code>. Thus, for example,</p> MarkdownPython <pre><code>This ~~is deleted text.~~\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('This'), Space(), Strikeout([Str('is'), Space(), Str('deleted'), Space(), Str('text.')])])])\n</code></pre>"},{"location":"markdown/#superscripts-and-subscripts","title":"Superscripts and subscripts","text":""},{"location":"markdown/#extension-superscript-subscript","title":"Extension: <code>superscript</code>, <code>subscript</code>","text":"<p>Superscripts may be written by surrounding the superscripted text by <code>^</code> characters; subscripts may be written by surrounding the subscripted text by <code>~</code> characters. Thus, for example,</p> MarkdownPython <pre><code>H~2~O is a liquid.  2^10^ is 1024.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('H'), Subscript([Str('2')]), Str('O'), Space(), Str('is'), Space(), Str('a'), Space(), Str('liquid.'), Space(), Str('2'), Superscript([Str('10')]), Space(), Str('is'), Space(), Str('1024.')])])\n</code></pre> <p>The text between <code>^...^</code> or <code>~...~</code> may not contain spaces or newlines. If the superscripted or subscripted text contains spaces, these spaces must be escaped with backslashes. (This is to prevent accidental superscripting and subscripting through the ordinary use of <code>~</code> and <code>^</code>, and also bad interactions with footnotes.) Thus, if you want the letter P with 'a cat' in subscripts, use <code>P~a\\ cat~</code>, not <code>P~a cat~</code>.</p>"},{"location":"markdown/#verbatim","title":"Verbatim","text":"<p>To make a short span of text verbatim, put it inside backticks:</p> MarkdownPython <pre><code>What is the difference between `&gt;&gt;=` and `&gt;&gt;`?\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('What'), Space(), Str('is'), Space(), Str('the'), Space(), Str('difference'), Space(), Str('between'), Space(), Code(('', [], []), '&gt;&gt;='), Space(), Str('and'), Space(), Code(('', [], []), '&gt;&gt;'), Str('?')])])\n</code></pre> <p>If the verbatim text includes a backtick, use double backticks:</p> MarkdownPython <pre><code>Here is a literal backtick `` ` ``.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('literal'), Space(), Str('backtick'), Space(), Code(('', [], []), '`'), Str('.')])])\n</code></pre> <p>(The spaces after the opening backticks and before the closing backticks will be ignored.)</p> <p>The general rule is that a verbatim span starts with a string of consecutive backticks (optionally followed by a space) and ends with a string of the same number of backticks (optionally preceded by a space).</p> <p>Note that backslash-escapes (and other Markdown constructs) do not work in verbatim contexts:</p> MarkdownPython <pre><code>This is a backslash followed by an asterisk: `\\*`.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('backslash'), Space(), Str('followed'), Space(), Str('by'), Space(), Str('an'), Space(), Str('asterisk:'), Space(), Code(('', [], []), '\\\\*'), Str('.')])])\n</code></pre>"},{"location":"markdown/#extension-inline_code_attributes","title":"Extension: <code>inline_code_attributes</code>","text":"<p>Attributes can be attached to verbatim text, just as with fenced code blocks:</p> MarkdownPython <pre><code>`&lt;$&gt;`{.haskell}\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Code(('', ['haskell'], []), '&lt;$&gt;')])])\n</code></pre>"},{"location":"markdown/#underline","title":"Underline","text":"<p>To underline text, use the <code>underline</code> class:</p> MarkdownPython <pre><code>[Underline]{.underline}\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Underline([Str('Underline')])])])\n</code></pre> <p>Or, without the <code>bracketed_spans</code> extension (but with <code>native_spans</code>):</p> MarkdownPython <pre><code>&lt;span class=\"underline\"&gt;Underline&lt;/span&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Underline([Str('Underline')])])])\n</code></pre> <p>This will work in all output formats that support underline.</p>"},{"location":"markdown/#small-caps","title":"Small caps","text":"<p>To write small caps, use the <code>smallcaps</code> class:</p> MarkdownPython <pre><code>[Small caps]{.smallcaps}\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])])\n</code></pre> <p>Or, without the <code>bracketed_spans</code> extension:</p> MarkdownPython <pre><code>&lt;span class=\"smallcaps\"&gt;Small caps&lt;/span&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])])\n</code></pre> <p>For compatibility with other Markdown flavors, CSS is also supported:</p> MarkdownPython <pre><code>&lt;span style=\"font-variant:small-caps;\"&gt;Small caps&lt;/span&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([SmallCaps([Str('Small'), Space(), Str('caps')])])])\n</code></pre> <p>This will work in all output formats that support small caps.</p>"},{"location":"markdown/#math","title":"Math","text":""},{"location":"markdown/#extension-tex_math_dollars","title":"Extension: <code>tex_math_dollars</code>","text":"<p>Anything between two <code>$</code> characters will be treated as TeX math. The opening <code>$</code> must have a non-space character immediately to its right, while the closing <code>$</code> must have a non-space character immediately to its left, and must not be followed immediately by a digit. Thus, <code>$20,000 and $30,000</code> won't parse as math. If for some reason you need to enclose text in literal <code>$</code> characters, backslash-escape them and they won't be treated as math delimiters.</p> <p>For display math, use <code>$$</code> delimiters. (In this case, the delimiters may be separated from the formula by whitespace. However, there can be no blank lines between the opening and closing <code>$$</code> delimiters.)</p> <p>TeX math will be printed in all output formats. How it is rendered depends on the output format:</p> <ul> <li>LaTeX.     It will appear verbatim surrounded by <code>\\(...\\)</code> (for inline math) or     <code>\\[...\\]</code> (for display math).</li> <li>Markdown, Emacs Org mode, ConTeXt, ZimWiki.     It will appear verbatim surrounded by <code>$...$</code> (for inline math) or     <code>$$...$$</code> (for display math).</li> <li>XWiki.     It will appear verbatim surrounded by <code>{{formula}}..{{/formula}}</code>.</li> <li>reStructuredText.     It will be rendered using an interpreted text role     <code>:math:</code>.</li> <li>AsciiDoc.     For AsciiDoc output format (<code>-t asciidoc</code>) it will appear verbatim     surrounded by <code>latexmath:[$...$]</code> (for inline math) or     <code>[latexmath]++++\\[...\\]+++</code> (for display math). For AsciiDoctor     output format (<code>-t asciidoctor</code>) the LaTeX delimiters (<code>$..$</code> and     <code>\\[..\\]</code>) are omitted.</li> <li>Texinfo.     It will be rendered inside a <code>@math</code> command.</li> <li>roff man, Jira markup.     It will be rendered verbatim without <code>$</code>'s.</li> <li>MediaWiki, DokuWiki.     It will be rendered inside <code>&lt;math&gt;</code> tags.</li> <li>Textile.     It will be rendered inside <code>&lt;span class=\"math\"&gt;</code> tags.</li> <li>RTF, OpenDocument.     It will be rendered, if possible, using Unicode characters, and will     otherwise appear verbatim.</li> <li>ODT.     It will be rendered, if possible, using MathML.</li> <li>DocBook.     If the <code>--mathml</code> flag is used, it will be rendered using MathML in     an <code>inlineequation</code> or <code>informalequation</code> tag. Otherwise it will be     rendered, if possible, using Unicode characters.</li> <li>Docx and PowerPoint.     It will be rendered using OMML math markup.</li> <li>FictionBook2.     If the <code>--webtex</code> option is used, formulas are rendered as images     using CodeCogs or other compatible web service, downloaded and     embedded in the e-book. Otherwise, they will appear verbatim.</li> <li>HTML, Slidy, DZSlides, S5, EPUB.     The way math is rendered in HTML will depend on the command-line     options selected. Therefore see Math rendering in     HTML above.</li> </ul>"},{"location":"markdown/#raw-html","title":"Raw HTML","text":""},{"location":"markdown/#extension-raw_html","title":"Extension: <code>raw_html</code>","text":"<p>Markdown allows you to insert raw HTML (or DocBook) anywhere in a document (except verbatim contexts, where <code>&lt;</code>, <code>&gt;</code>, and <code>&amp;</code> are interpreted literally). (Technically this is not an extension, since standard Markdown allows it, but it has been made an extension so that it can be disabled if desired.)</p> <p>The raw HTML is passed through unchanged in HTML, S5, Slidy, Slideous, DZSlides, EPUB, Markdown, CommonMark, Emacs Org mode, and Textile output, and suppressed in other formats.</p> <p>For a more explicit way of including raw HTML in a Markdown document, see the <code>raw_attribute</code> extension.</p> <p>In the CommonMark format, if <code>raw_html</code> is enabled, superscripts, subscripts, strikeouts and small capitals will be represented as HTML. Otherwise, plain-text fallbacks will be used. Note that even if <code>raw_html</code> is disabled, tables will be rendered with HTML syntax if they cannot use pipe syntax.</p>"},{"location":"markdown/#extension-markdown_in_html_blocks","title":"Extension: <code>markdown_in_html_blocks</code>","text":"<p>Original Markdown allows you to include HTML \"blocks\": blocks of HTML between balanced tags that are separated from the surrounding text with blank lines, and start and end at the left margin. Within these blocks, everything is interpreted as HTML, not Markdown; so (for example), <code>*</code> does not signify emphasis.</p> <p>Pandoc behaves this way when the <code>markdown_strict</code> format is used; but by default, pandoc interprets material between HTML block tags as Markdown. Thus, for example, pandoc will turn</p> MarkdownPython <pre><code>&lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;*one*&lt;/td&gt;\n&lt;td&gt;[a link](https://google.com)&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [RawBlock(Format('html'), '&lt;table&gt;'), RawBlock(Format('html'), '&lt;tr&gt;'), RawBlock(Format('html'), '&lt;td&gt;'), Plain([Emph([Str('one')])]), RawBlock(Format('html'), '&lt;/td&gt;'), RawBlock(Format('html'), '&lt;td&gt;'), Plain([Link(('', [], []), [Str('a'), Space(), Str('link')], ('https://google.com', ''))]), RawBlock(Format('html'), '&lt;/td&gt;'), RawBlock(Format('html'), '&lt;/tr&gt;'), RawBlock(Format('html'), '&lt;/table&gt;')])\n</code></pre> <p>into</p> MarkdownPython <pre><code>&lt;table&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;em&gt;one&lt;/em&gt;&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://google.com\"&gt;a link&lt;/a&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [RawBlock(Format('html'), '&lt;table&gt;'), RawBlock(Format('html'), '&lt;tr&gt;'), RawBlock(Format('html'), '&lt;td&gt;'), Plain([RawInline(Format('html'), '&lt;em&gt;'), Str('one'), RawInline(Format('html'), '&lt;/em&gt;')]), RawBlock(Format('html'), '&lt;/td&gt;'), RawBlock(Format('html'), '&lt;td&gt;'), Plain([RawInline(Format('html'), '&lt;a href=\"https://google.com\"&gt;'), Str('a'), Space(), Str('link'), RawInline(Format('html'), '&lt;/a&gt;')]), RawBlock(Format('html'), '&lt;/td&gt;'), RawBlock(Format('html'), '&lt;/tr&gt;'), RawBlock(Format('html'), '&lt;/table&gt;')])\n</code></pre> <p>whereas <code>Markdown.pl</code> will preserve it as is.</p> <p>There is one exception to this rule: text between <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code>, and <code>&lt;textarea&gt;</code> tags is not interpreted as Markdown.</p> <p>This departure from original Markdown should make it easier to mix Markdown with HTML block elements. For example, one can surround a block of Markdown text with <code>&lt;div&gt;</code> tags without preventing it from being interpreted as Markdown.</p>"},{"location":"markdown/#extension-native_divs","title":"Extension: <code>native_divs</code>","text":"<p>Use native pandoc <code>Div</code> blocks for content inside <code>&lt;div&gt;</code> tags. For the most part this should give the same output as <code>markdown_in_html_blocks</code>, but it makes it easier to write pandoc filters to manipulate groups of blocks.</p>"},{"location":"markdown/#extension-native_spans","title":"Extension: <code>native_spans</code>","text":"<p>Use native pandoc <code>Span</code> blocks for content inside <code>&lt;span&gt;</code> tags. For the most part this should give the same output as <code>raw_html</code>, but it makes it easier to write pandoc filters to manipulate groups of inlines.</p>"},{"location":"markdown/#extension-raw_tex","title":"Extension: <code>raw_tex</code>","text":"<p>In addition to raw HTML, pandoc allows raw LaTeX, TeX, and ConTeXt to be included in a document. Inline TeX commands will be preserved and passed unchanged to the LaTeX and ConTeXt writers. Thus, for example, you can use LaTeX to include BibTeX citations:</p> MarkdownPython <pre><code>This result was proved in \\cite{jones.1967}.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('This'), Space(), Str('result'), Space(), Str('was'), Space(), Str('proved'), Space(), Str('in'), Space(), RawInline(Format('tex'), '\\\\cite{jones.1967}'), Str('.')])])\n</code></pre> <p>Note that in LaTeX environments, like</p> MarkdownPython <pre><code>\\begin{tabular}{|l|l|}\\hline\nAge &amp; Frequency \\\\ \\hline\n18--25  &amp; 15 \\\\\n26--35  &amp; 33 \\\\\n36--45  &amp; 22 \\\\ \\hline\n\\end{tabular}\n</code></pre> <pre><code>Pandoc(Meta({}), [RawBlock(Format('tex'), '\\\\begin{tabular}{|l|l|}\\\\hline\\nAge &amp; Frequency \\\\\\\\ \\\\hline\\n18--25  &amp; 15 \\\\\\\\\\n26--35  &amp; 33 \\\\\\\\\\n36--45  &amp; 22 \\\\\\\\ \\\\hline\\n\\\\end{tabular}')])\n</code></pre> <p>the material between the begin and end tags will be interpreted as raw LaTeX, not as Markdown.</p> <p>For a more explicit and flexible way of including raw TeX in a Markdown document, see the <code>raw_attribute</code> extension.</p> <p>Inline LaTeX is ignored in output formats other than Markdown, LaTeX, Emacs Org mode, and ConTeXt.</p>"},{"location":"markdown/#generic-raw-attribute","title":"Generic raw attribute","text":""},{"location":"markdown/#extension-raw_attribute","title":"Extension: <code>raw_attribute</code>","text":"<p>Inline spans and fenced code blocks with a special kind of attribute will be parsed as raw content with the designated format. For example, the following produces a raw roff <code>ms</code> block:</p> MarkdownPython <pre><code>```{=ms}\n.MYMACRO\nblah blah\n```\n</code></pre> <pre><code>Pandoc(Meta({}), [RawBlock(Format('ms'), '.MYMACRO\\nblah blah')])\n</code></pre> <p>And the following produces a raw <code>html</code> inline element:</p> MarkdownPython <pre><code>This is `&lt;a&gt;html&lt;/a&gt;`{=html}\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), RawInline(Format('html'), '&lt;a&gt;html&lt;/a&gt;')])])\n</code></pre> <p>This can be useful to insert raw xml into <code>docx</code> documents, e.g. a pagebreak:</p> MarkdownPython <pre><code>```{=openxml}\n&lt;w:p&gt;\n  &lt;w:r&gt;\n    &lt;w:br w:type=\"page\"/&gt;\n  &lt;/w:r&gt;\n&lt;/w:p&gt;\n```\n</code></pre> <pre><code>Pandoc(Meta({}), [RawBlock(Format('openxml'), '&lt;w:p&gt;\\n  &lt;w:r&gt;\\n    &lt;w:br w:type=\"page\"/&gt;\\n  &lt;/w:r&gt;\\n&lt;/w:p&gt;')])\n</code></pre> <p>The format name should match the target format name (see <code>-t/--to</code>, above, for a list, or use <code>pandoc --list-output-formats</code>). Use <code>openxml</code> for <code>docx</code> output, <code>opendocument</code> for <code>odt</code> output, <code>html5</code> for <code>epub3</code> output, <code>html4</code> for <code>epub2</code> output, and <code>latex</code>, <code>beamer</code>, <code>ms</code>, or <code>html5</code> for <code>pdf</code> output (depending on what you use for <code>--pdf-engine</code>).</p> <p>This extension presupposes that the relevant kind of inline code or fenced code block is enabled. Thus, for example, to use a raw attribute with a backtick code block, <code>backtick_code_blocks</code> must be enabled.</p> <p>The raw attribute cannot be combined with regular attributes.</p>"},{"location":"markdown/#latex-macros","title":"LaTeX macros","text":""},{"location":"markdown/#extension-latex_macros","title":"Extension: <code>latex_macros</code>","text":"<p>When this extension is enabled, pandoc will parse LaTeX macro definitions and apply the resulting macros to all LaTeX math and raw LaTeX. So, for example, the following will work in all output formats, not just LaTeX:</p> MarkdownPython <pre><code>\\newcommand{\\tuple}[1]{\\langle #1 \\rangle}\n\n$\\tuple{a, b, c}$\n</code></pre> <pre><code>Pandoc(Meta({}), [RawBlock(Format('tex'), '\\\\newcommand{\\\\tuple}[1]{\\\\langle #1 \\\\rangle}'), Para([Math(InlineMath(), '\\\\langle a, b, c \\\\rangle')])])\n</code></pre> <p>Note that LaTeX macros will not be applied if they occur inside a raw span or block marked with the <code>raw_attribute</code> extension.</p> <p>When <code>latex_macros</code> is disabled, the raw LaTeX and math will not have macros applied. This is usually a better approach when you are targeting LaTeX or PDF.</p> <p>Macro definitions in LaTeX will be passed through as raw LaTeX only if <code>latex_macros</code> is not enabled. Macro definitions in Markdown source (or other formats allowing <code>raw_tex</code>) will be passed through regardless of whether <code>latex_macros</code> is enabled.</p>"},{"location":"markdown/#links","title":"Links","text":"<p>Markdown allows links to be specified in several ways.</p>"},{"location":"markdown/#automatic-links","title":"Automatic links","text":"<p>If you enclose a URL or email address in pointy brackets, it will become a link:</p> MarkdownPython <pre><code>&lt;https://google.com&gt;\n&lt;sam@green.eggs.ham&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Link(('', ['uri'], []), [Str('https://google.com')], ('https://google.com', '')), SoftBreak(), Link(('', ['email'], []), [Str('sam@green.eggs.ham')], ('mailto:sam@green.eggs.ham', ''))])])\n</code></pre>"},{"location":"markdown/#inline-links","title":"Inline links","text":"<p>An inline link consists of the link text in square brackets, followed by the URL in parentheses. (Optionally, the URL can be followed by a link title, in quotes.)</p> MarkdownPython <pre><code>This is an [inline link](/url), and here's [one with\na title](https://fsf.org \"click here for a good time!\").\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('This'), Space(), Str('is'), Space(), Str('an'), Space(), Link(('', [], []), [Str('inline'), Space(), Str('link')], ('/url', '')), Str(','), Space(), Str('and'), Space(), Str('here\u2019s'), Space(), Link(('', [], []), [Str('one'), Space(), Str('with'), SoftBreak(), Str('a'), Space(), Str('title')], ('https://fsf.org', 'click here for a good time!')), Str('.')])])\n</code></pre> <p>There can be no space between the bracketed part and the parenthesized part. The link text can contain formatting (such as emphasis), but the title cannot.</p> <p>Email addresses in inline links are not autodetected, so they have to be prefixed with <code>mailto</code>:</p> MarkdownPython <pre><code>[Write me!](mailto:sam@green.eggs.ham)\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Link(('', [], []), [Str('Write'), Space(), Str('me!')], ('mailto:sam@green.eggs.ham', ''))])])\n</code></pre>"},{"location":"markdown/#reference-links","title":"Reference links","text":"<p>An explicit reference link has two parts, the link itself and the link definition, which may occur elsewhere in the document (either before or after the link).</p> <p>The link consists of link text in square brackets, followed by a label in square brackets. (There cannot be space between the two unless the <code>spaced_reference_links</code> extension is enabled.) The link definition consists of the bracketed label, followed by a colon and a space, followed by the URL, and optionally (after a space) a link title either in quotes or in parentheses. The label must not be parseable as a citation (assuming the <code>citations</code> extension is enabled): citations take precedence over link labels.</p> <p>Here are some examples:</p> MarkdownPython <pre><code>[my label 1]: /foo/bar.html  \"My title, optional\"\n[my label 2]: /foo\n[my label 3]: https://fsf.org (The Free Software Foundation)\n[my label 4]: /bar#special  'A title in single quotes'\n</code></pre> <pre><code>Pandoc(Meta({}), [])\n</code></pre> <p>The URL may optionally be surrounded by angle brackets:</p> MarkdownPython <pre><code>[my label 5]: &lt;http://foo.bar.baz&gt;\n</code></pre> <pre><code>Pandoc(Meta({}), [])\n</code></pre> <p>The title may go on the next line:</p> MarkdownPython <pre><code>[my label 3]: https://fsf.org\n  \"The Free Software Foundation\"\n</code></pre> <pre><code>Pandoc(Meta({}), [])\n</code></pre> <p>Note that link labels are not case sensitive. So, this will work:</p> MarkdownPython <pre><code>Here is [my link][FOO]\n\n[Foo]: /bar/baz\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Link(('', [], []), [Str('my'), Space(), Str('link')], ('/bar/baz', ''))])])\n</code></pre> <p>In an implicit reference link, the second pair of brackets is empty:</p> MarkdownPython <pre><code>See [my website][].\n\n[my website]: http://foo.bar.baz\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('See'), Space(), Link(('', [], []), [Str('my'), Space(), Str('website')], ('http://foo.bar.baz', '')), Str('.')])])\n</code></pre> <p>Note: In <code>Markdown.pl</code> and most other Markdown implementations, reference link definitions cannot occur in nested constructions such as list items or block quotes. Pandoc lifts this arbitrary-seeming restriction. So the following is fine in pandoc, though not in most other implementations:</p> MarkdownPython <pre><code>&gt; My block [quote].\n&gt;\n&gt; [quote]: /foo\n</code></pre> <pre><code>Pandoc(Meta({}), [BlockQuote([Para([Str('My'), Space(), Str('block'), Space(), Link(('', [], []), [Str('quote')], ('/foo', '')), Str('.')])])])\n</code></pre>"},{"location":"markdown/#extension-shortcut_reference_links","title":"Extension: <code>shortcut_reference_links</code>","text":"<p>In a shortcut reference link, the second pair of brackets may be omitted entirely:</p> MarkdownPython <pre><code>See [my website].\n\n[my website]: http://foo.bar.baz\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('See'), Space(), Link(('', [], []), [Str('my'), Space(), Str('website')], ('http://foo.bar.baz', '')), Str('.')])])\n</code></pre>"},{"location":"markdown/#internal-links","title":"Internal links","text":"<p>To link to another section of the same document, use the automatically generated identifier (see Heading identifiers). For example:</p> MarkdownPython <pre><code>See the [Introduction](#introduction).\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('See'), Space(), Str('the'), Space(), Link(('', [], []), [Str('Introduction')], ('#introduction', '')), Str('.')])])\n</code></pre> <p>or</p> MarkdownPython <pre><code>See the [Introduction].\n\n[Introduction]: #introduction\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('See'), Space(), Str('the'), Space(), Link(('', [], []), [Str('Introduction')], ('#introduction', '')), Str('.')])])\n</code></pre> <p>Internal links are currently supported for HTML formats (including HTML slide shows and EPUB), LaTeX, and ConTeXt.</p>"},{"location":"markdown/#images","title":"Images","text":"<p>A link immediately preceded by a <code>!</code> will be treated as an image. The link text will be used as the image's alt text:</p> MarkdownPython <pre><code>![la lune](lalune.jpg \"Voyage to the moon\")\n\n![movie reel]\n\n[movie reel]: movie.gif\n</code></pre> <pre><code>Pandoc(Meta({}), [Figure(('', [], []), Caption(None, [Plain([Str('la'), Space(), Str('lune')])]), [Plain([Image(('', [], []), [Str('la'), Space(), Str('lune')], ('lalune.jpg', 'Voyage to the moon'))])]), Figure(('', [], []), Caption(None, [Plain([Str('movie'), Space(), Str('reel')])]), [Plain([Image(('', [], []), [Str('movie'), Space(), Str('reel')], ('movie.gif', ''))])])])\n</code></pre>"},{"location":"markdown/#extension-implicit_figures","title":"Extension: <code>implicit_figures</code>","text":"<p>An image with nonempty alt text, occurring by itself in a paragraph, will be rendered as a figure with a caption. The image's alt text will be used as the caption.</p> MarkdownPython <pre><code>![This is the caption](/url/of/image.png)\n</code></pre> <pre><code>Pandoc(Meta({}), [Figure(('', [], []), Caption(None, [Plain([Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('caption')])]), [Plain([Image(('', [], []), [Str('This'), Space(), Str('is'), Space(), Str('the'), Space(), Str('caption')], ('/url/of/image.png', ''))])])])\n</code></pre> <p>How this is rendered depends on the output format. Some output formats (e.g.\u00a0RTF) do not yet support figures. In those formats, you'll just get an image in a paragraph by itself, with no caption.</p> <p>If you just want a regular inline image, just make sure it is not the only thing in the paragraph. One way to do this is to insert a nonbreaking space after the image:</p> MarkdownPython <pre><code>![This image won't be a figure](/url/of/image.png)\\\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Image(('', [], []), [Str('This'), Space(), Str('image'), Space(), Str('won\u2019t'), Space(), Str('be'), Space(), Str('a'), Space(), Str('figure')], ('/url/of/image.png', '')), LineBreak()])])\n</code></pre> <p>Note that in reveal.js slide shows, an image in a paragraph by itself that has the <code>r-stretch</code> class will fill the screen, and the caption and figure tags will be omitted.</p>"},{"location":"markdown/#extension-link_attributes","title":"Extension: <code>link_attributes</code>","text":"<p>Attributes can be set on links and images:</p> MarkdownPython <pre><code>An inline ![image](foo.jpg){#id .class width=30 height=20px}\nand a reference ![image][ref] with attributes.\n\n[ref]: foo.jpg \"optional title\" {#id .class key=val key2=\"val 2\"}\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('An'), Space(), Str('inline'), Space(), Image(('id', ['class'], [('width', '30'), ('height', '20px')]), [Str('image')], ('foo.jpg', '')), SoftBreak(), Str('and'), Space(), Str('a'), Space(), Str('reference'), Space(), Image(('id', ['class'], [('key', 'val'), ('key2', 'val 2')]), [Str('image')], ('foo.jpg', 'optional title')), Space(), Str('with'), Space(), Str('attributes.')])])\n</code></pre> <p>(This syntax is compatible with PHP Markdown Extra when only <code>#id</code> and <code>.class</code> are used.)</p> <p>For HTML and EPUB, all known HTML5 attributes except <code>width</code> and <code>height</code> (but including <code>srcset</code> and <code>sizes</code>) are passed through as is. Unknown attributes are passed through as custom attributes, with <code>data-</code> prepended. The other writers ignore attributes that are not specifically supported by their output format.</p> <p>The <code>width</code> and <code>height</code> attributes on images are treated specially. When used without a unit, the unit is assumed to be pixels. However, any of the following unit identifiers can be used: <code>px</code>, <code>cm</code>, <code>mm</code>, <code>in</code>, <code>inch</code> and <code>%</code>. There must not be any spaces between the number and the unit. For example:</p> MarkdownPython <pre><code>![](file.jpg){ width=50% }\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Image(('', [], [('width', '50%')]), [], ('file.jpg', ''))])])\n</code></pre> <ul> <li>Dimensions may be converted to a form that is compatible with the     output format (for example, dimensions given in pixels will be     converted to inches when converting HTML to LaTeX). Conversion     between pixels and physical measurements is affected by the <code>--dpi</code>     option (by default, 96 dpi is assumed, unless the image itself     contains dpi information).</li> <li>The <code>%</code> unit is generally relative to some available space. For     example the above example will render to the following.<ul> <li>HTML: <code>&lt;img href=\"file.jpg\" style=\"width: 50%;\" /&gt;</code></li> <li>LaTeX:     <code>\\includegraphics[width=0.5\\textwidth,height=\\textheight]{file.jpg}</code>     (If you're using a custom template, you need to configure     <code>graphicx</code> as in the default template.)</li> <li>ConTeXt: <code>\\externalfigure[file.jpg][width=0.5\\textwidth]</code></li> </ul> </li> <li>Some output formats have a notion of a class     (ConTeXt)     or a unique identifier (LaTeX <code>\\caption</code>), or both (HTML).</li> <li>When no <code>width</code> or <code>height</code> attributes are specified, the fallback     is to look at the image resolution and the dpi metadata embedded in     the image file.</li> </ul>"},{"location":"markdown/#divs-and-spans","title":"Divs and Spans","text":"<p>Using the <code>native_divs</code> and <code>native_spans</code> extensions (see above), HTML syntax can be used as part of markdown to create native <code>Div</code> and <code>Span</code> elements in the pandoc AST (as opposed to raw HTML). However, there is also nicer syntax available:</p>"},{"location":"markdown/#extension-fenced_divs","title":"Extension: <code>fenced_divs</code>","text":"<p>Allow special fenced syntax for native <code>Div</code> blocks. A Div starts with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. The attribute syntax is exactly as in fenced code blocks (see Extension: <code>fenced_code_attributes</code>). As with fenced code blocks, one can use either attributes in curly braces or a single unbraced word, which will be treated as a class name. The Div ends with another line containing a string of at least three consecutive colons. The fenced Div should be separated by blank lines from preceding and following blocks.</p> <p>Example:</p> MarkdownPython <pre><code>::::: {#special .sidebar}\nHere is a paragraph.\n\nAnd another.\n:::::\n</code></pre> <pre><code>Pandoc(Meta({}), [Div(('special', ['sidebar'], []), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('paragraph.')]), Para([Str('And'), Space(), Str('another.')])])])\n</code></pre> <p>Fenced divs can be nested. Opening fences are distinguished because they must have attributes:</p> MarkdownPython <pre><code>::: Warning ::::::\nThis is a warning.\n\n::: Danger\nThis is a warning within a warning.\n:::\n::::::::::::::::::\n</code></pre> <pre><code>Pandoc(Meta({}), [Div(('', ['Warning'], []), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('warning.')]), Div(('', ['Danger'], []), [Para([Str('This'), Space(), Str('is'), Space(), Str('a'), Space(), Str('warning'), Space(), Str('within'), Space(), Str('a'), Space(), Str('warning.')])])])])\n</code></pre> <p>Fences without attributes are always closing fences. Unlike with fenced code blocks, the number of colons in the closing fence need not match the number in the opening fence. However, it can be helpful for visual clarity to use fences of different lengths to distinguish nested divs from their parents.</p>"},{"location":"markdown/#extension-bracketed_spans","title":"Extension: <code>bracketed_spans</code>","text":"<p>A bracketed sequence of inlines, as one would use to begin a link, will be treated as a <code>Span</code> with attributes if it is followed immediately by attributes:</p> MarkdownPython <pre><code>[This is *some text*]{.class key=\"val\"}\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Span(('', ['class'], [('key', 'val')]), [Str('This'), Space(), Str('is'), Space(), Emph([Str('some'), Space(), Str('text')])])])])\n</code></pre>"},{"location":"markdown/#footnotes","title":"Footnotes","text":""},{"location":"markdown/#extension-footnotes","title":"Extension: <code>footnotes</code>","text":"<p>Pandoc's Markdown allows footnotes, using the following syntax:</p> MarkdownPython <pre><code>Here is a footnote reference,[^1] and another.[^longnote]\n\n[^1]: Here is the footnote.\n\n[^longnote]: Here's one with multiple blocks.\n\n    Subsequent paragraphs are indented to show that they\nbelong to the previous footnote.\n\n        { some.code }\n\n    The whole paragraph can be indented, or just the first\n    line.  In this way, multi-paragraph footnotes work like\n    multi-paragraph list items.\n\nThis paragraph won't be part of the note, because it\nisn't indented.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('a'), Space(), Str('footnote'), Space(), Str('reference,'), Note([Para([Str('Here'), Space(), Str('is'), Space(), Str('the'), Space(), Str('footnote.')])]), Space(), Str('and'), Space(), Str('another.'), Note([Para([Str('Here\u2019s'), Space(), Str('one'), Space(), Str('with'), Space(), Str('multiple'), Space(), Str('blocks.')]), Para([Str('Subsequent'), Space(), Str('paragraphs'), Space(), Str('are'), Space(), Str('indented'), Space(), Str('to'), Space(), Str('show'), Space(), Str('that'), Space(), Str('they'), SoftBreak(), Str('belong'), Space(), Str('to'), Space(), Str('the'), Space(), Str('previous'), Space(), Str('footnote.')]), CodeBlock(('', [], []), '{ some.code }'), Para([Str('The'), Space(), Str('whole'), Space(), Str('paragraph'), Space(), Str('can'), Space(), Str('be'), Space(), Str('indented,'), Space(), Str('or'), Space(), Str('just'), Space(), Str('the'), Space(), Str('first'), SoftBreak(), Str('line.'), Space(), Str('In'), Space(), Str('this'), Space(), Str('way,'), Space(), Str('multi-paragraph'), Space(), Str('footnotes'), Space(), Str('work'), Space(), Str('like'), SoftBreak(), Str('multi-paragraph'), Space(), Str('list'), Space(), Str('items.')])])]), Para([Str('This'), Space(), Str('paragraph'), Space(), Str('won\u2019t'), Space(), Str('be'), Space(), Str('part'), Space(), Str('of'), Space(), Str('the'), Space(), Str('note,'), Space(), Str('because'), Space(), Str('it'), SoftBreak(), Str('isn\u2019t'), Space(), Str('indented.')])])\n</code></pre> <p>The identifiers in footnote references may not contain spaces, tabs, or newlines. These identifiers are used only to correlate the footnote reference with the note itself; in the output, footnotes will be numbered sequentially.</p> <p>The footnotes themselves need not be placed at the end of the document. They may appear anywhere except inside other block elements (lists, block quotes, tables, etc.). Each footnote should be separated from surrounding content (including other footnotes) by blank lines.</p>"},{"location":"markdown/#extension-inline_notes","title":"Extension: <code>inline_notes</code>","text":"<p>Inline footnotes are also allowed (though, unlike regular notes, they cannot contain multiple paragraphs). The syntax is as follows:</p> MarkdownPython <pre><code>Here is an inline note.^[Inline notes are easier to write, since\nyou don't have to pick an identifier and move down to type the\nnote.]\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Here'), Space(), Str('is'), Space(), Str('an'), Space(), Str('inline'), Space(), Str('note.'), Note([Para([Str('Inline'), Space(), Str('notes'), Space(), Str('are'), Space(), Str('easier'), Space(), Str('to'), Space(), Str('write,'), Space(), Str('since'), SoftBreak(), Str('you'), Space(), Str('don\u2019t'), Space(), Str('have'), Space(), Str('to'), Space(), Str('pick'), Space(), Str('an'), Space(), Str('identifier'), Space(), Str('and'), Space(), Str('move'), Space(), Str('down'), Space(), Str('to'), Space(), Str('type'), Space(), Str('the'), SoftBreak(), Str('note.')])])])])\n</code></pre> <p>Inline and regular footnotes may be mixed freely.</p>"},{"location":"markdown/#citation-syntax","title":"Citation syntax","text":""},{"location":"markdown/#extension-citations","title":"Extension: <code>citations</code>","text":"<p>To cite a bibliographic item with an identifier foo, use the syntax <code>@foo</code>. Normal citations should be included in square brackets, with semicolons separating distinct items:</p> MarkdownPython <pre><code>Blah blah [@doe99; @smith2000; @smith2004].\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Cite([Citation('doe99', [], [], NormalCitation(), 1, 0), Citation('smith2000', [], [], NormalCitation(), 1, 0), Citation('smith2004', [], [], NormalCitation(), 1, 0)], [Str('[@doe99;'), Space(), Str('@smith2000;'), Space(), Str('@smith2004]')]), Str('.')])])\n</code></pre> <p>How this is rendered depends on the citation style. In an author-date style, it might render as</p> MarkdownPython <pre><code>Blah blah (Doe 1999, Smith 2000, 2004).\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Str('(Doe'), Space(), Str('1999,'), Space(), Str('Smith'), Space(), Str('2000,'), Space(), Str('2004).')])])\n</code></pre> <p>In a footnote style, it might render as</p> MarkdownPython <pre><code>Blah blah.[^1]\n\n[^1]:  John Doe, \"Frogs,\" *Journal of Amphibians* 44 (1999);\nSusan Smith, \"Flies,\" *Journal of Insects* (2000);\nSusan Smith, \"Bees,\" *Journal of Insects* (2004).\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah.'), Note([Para([Str('John'), Space(), Str('Doe,'), Space(), Quoted(DoubleQuote(), [Str('Frogs,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Amphibians')]), Space(), Str('44'), Space(), Str('(1999);'), SoftBreak(), Str('Susan'), Space(), Str('Smith,'), Space(), Quoted(DoubleQuote(), [Str('Flies,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Insects')]), Space(), Str('(2000);'), SoftBreak(), Str('Susan'), Space(), Str('Smith,'), Space(), Quoted(DoubleQuote(), [Str('Bees,')]), Space(), Emph([Str('Journal'), Space(), Str('of'), Space(), Str('Insects')]), Space(), Str('(2004).')])])])])\n</code></pre> <p>See the CSL user documentation for more information about CSL styles and how they affect rendering.</p> <p>Unless a citation key starts with a letter, digit, or <code>_</code>, and contains only alphanumerics and single internal punctuation characters (<code>:.#$%&amp;-+?&lt;&gt;~/</code>), it must be surrounded by curly braces, which are not considered part of the key. In <code>@Foo_bar.baz.</code>, the key is <code>Foo_bar.baz</code> because the final period is not internal punctuation, so it is not included in the key. In <code>@{Foo_bar.baz.}</code>, the key is <code>Foo_bar.baz.</code>, including the final period. In <code>@Foo_bar--baz</code>, the key is <code>Foo_bar</code> because the repeated internal punctuation characters terminate the key. The curly braces are recommended if you use URLs as keys: <code>[@{https://example.com/bib?name=foobar&amp;date=2000}, p.  33]</code>.</p> <p>Citation items may optionally include a prefix, a locator, and a suffix. In</p> MarkdownPython <pre><code>Blah blah [see @doe99, pp. 33-35 and *passim*; @smith04, chap. 1].\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Blah'), Space(), Str('blah'), Space(), Cite([Citation('doe99', [Str('see')], [Str(','), Space(), Str('pp.\\xa033-35'), Space(), Str('and'), Space(), Emph([Str('passim')])], NormalCitation(), 1, 0), Citation('smith04', [], [Str(','), Space(), Str('chap.\\xa01')], NormalCitation(), 1, 0)], [Str('[see'), Space(), Str('@doe99,'), Space(), Str('pp.'), Space(), Str('33-35'), Space(), Str('and'), Space(), Str('*passim*;'), Space(), Str('@smith04,'), Space(), Str('chap.'), Space(), Str('1]')]), Str('.')])])\n</code></pre> <p>the first item (<code>doe99</code>) has prefix <code>see</code>, locator <code>pp.  33-35</code>, and suffix <code>and *passim*</code>. The second item (<code>smith04</code>) has locator <code>chap. 1</code> and no prefix or suffix.</p> <p>Pandoc uses some heuristics to separate the locator from the rest of the subject. It is sensitive to the locator terms defined in the CSL locale files. Either abbreviated or unabbreviated forms are accepted. In the <code>en-US</code> locale, locator terms can be written in either singular or plural forms, as <code>book</code>, <code>bk.</code>/<code>bks.</code>; <code>chapter</code>, <code>chap.</code>/<code>chaps.</code>; <code>column</code>, <code>col.</code>/<code>cols.</code>; <code>figure</code>, <code>fig.</code>/<code>figs.</code>; <code>folio</code>, <code>fol.</code>/<code>fols.</code>; <code>number</code>, <code>no.</code>/<code>nos.</code>; <code>line</code>, <code>l.</code>/<code>ll.</code>; <code>note</code>, <code>n.</code>/<code>nn.</code>; <code>opus</code>, <code>op.</code>/<code>opp.</code>; <code>page</code>, <code>p.</code>/<code>pp.</code>; <code>paragraph</code>, <code>para.</code>/<code>paras.</code>; <code>part</code>, <code>pt.</code>/<code>pts.</code>; <code>section</code>, <code>sec.</code>/<code>secs.</code>; <code>sub verbo</code>, <code>s.v.</code>/<code>s.vv.</code>; <code>verse</code>, <code>v.</code>/<code>vv.</code>; <code>volume</code>, <code>vol.</code>/<code>vols.</code>; <code>\u00b6</code>/<code>\u00b6\u00b6</code>; <code>\u00a7</code>/<code>\u00a7\u00a7</code>. If no locator term is used, \"page\" is assumed.</p> <p>In complex cases, you can force something to be treated as a locator by enclosing it in curly braces or prevent parsing the suffix as locator by prepending curly braces:</p> MarkdownPython <pre><code>[@smith{ii, A, D-Z}, with a suffix]\n[@smith, {pp. iv, vi-xi, (xv)-(xvii)} with suffix here]\n[@smith{}, 99 years later]\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Cite([Citation('smith', [], [Str('{ii,'), Space(), Str('A,'), Space(), Str('D-Z},'), Space(), Str('with'), Space(), Str('a'), Space(), Str('suffix')], NormalCitation(), 1, 0)], [Str('[@smith{ii,'), Space(), Str('A,'), Space(), Str('D-Z},'), Space(), Str('with'), Space(), Str('a'), Space(), Str('suffix]')]), SoftBreak(), Cite([Citation('smith', [], [Str(','), Space(), Str('{pp.\\xa0iv,'), Space(), Str('vi-xi,'), Space(), Str('(xv)-(xvii)}'), Space(), Str('with'), Space(), Str('suffix'), Space(), Str('here')], NormalCitation(), 2, 0)], [Str('[@smith,'), Space(), Str('{pp.'), Space(), Str('iv,'), Space(), Str('vi-xi,'), Space(), Str('(xv)-(xvii)}'), Space(), Str('with'), Space(), Str('suffix'), Space(), Str('here]')]), SoftBreak(), Cite([Citation('smith', [], [Str('{},'), Space(), Str('99'), Space(), Str('years'), Space(), Str('later')], NormalCitation(), 3, 0)], [Str('[@smith{},'), Space(), Str('99'), Space(), Str('years'), Space(), Str('later]')])])])\n</code></pre> <p>A minus sign (<code>-</code>) before the <code>@</code> will suppress mention of the author in the citation. This can be useful when the author is already mentioned in the text:</p> MarkdownPython <pre><code>Smith says blah [-@smith04].\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('Smith'), Space(), Str('says'), Space(), Str('blah'), Space(), Cite([Citation('smith04', [], [], SuppressAuthor(), 1, 0)], [Str('[-@smith04]')]), Str('.')])])\n</code></pre> <p>You can also write an author-in-text citation, by omitting the square brackets:</p> MarkdownPython <pre><code>@smith04 says blah.\n\n@smith04 [p. 33] says blah.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Cite([Citation('smith04', [], [], AuthorInText(), 1, 0)], [Str('@smith04')]), Space(), Str('says'), Space(), Str('blah.')]), Para([Cite([Citation('smith04', [], [Str('p.\\xa033')], AuthorInText(), 2, 0)], [Str('@smith04'), Space(), Str('[p.'), Space(), Str('33]')]), Space(), Str('says'), Space(), Str('blah.')])])\n</code></pre> <p>This will cause the author's name to be rendered, followed by the bibliographical details. Use this form when you want to make the citation the subject of a sentence.</p> <p>When you are using a note style, it is usually better to let citeproc create the footnotes from citations rather than writing an explicit note. If you do write an explicit note that contains a citation, note that normal citations will be put in parentheses, while author-in-text citations will not. For this reason, it is sometimes preferable to use the author-in-text style inside notes when using a note style.</p> <ol> <li> <p>The point of this rule is to ensure that normal paragraphs starting with people's initials, like</p> MarkdownPython <pre><code>B. Russell was an English philosopher.\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('B.'), Space(), Str('Russell'), Space(), Str('was'), Space(), Str('an'), Space(), Str('English'), Space(), Str('philosopher.')])])\n</code></pre> <p>do not get treated as list items.</p> <p>This rule will not prevent</p> MarkdownPython <pre><code>(C) 2007 Joe Smith\n</code></pre> <pre><code>Pandoc(Meta({}), [OrderedList((3, UpperAlpha(), TwoParens()), [[Plain([Str('2007'), Space(), Str('Joe'), Space(), Str('Smith')])]])])\n</code></pre> <p>from being interpreted as a list item. In this case, a backslash escape can be used:</p> MarkdownPython <pre><code>(C\\) 2007 Joe Smith\n</code></pre> <pre><code>Pandoc(Meta({}), [Para([Str('(C)'), Space(), Str('2007'), Space(), Str('Joe'), Space(), Str('Smith')])])\n</code></pre> <p> \u21a9</p> </li> <li> <p>I have been influenced by the suggestions of David Wheeler.\u00a0\u21a9</p> </li> <li> <p>This scheme is due to Michel Fortin, who proposed it on the Markdown discussion list.\u00a0\u21a9</p> </li> </ol>"}]}